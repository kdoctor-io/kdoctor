{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"kdoctor","text":"<p>English | \u7b80\u4f53\u4e2d\u6587</p>"},{"location":"#introduction","title":"Introduction","text":"<p>kdoctor is a Kubernetes data plane testing component that conducts functional and performance tests on clusters using proactive pressure injection. It addresses the operational needs of network, storage, and applications by adopting a cloud-native approach based on extensive research and abstraction. With its CRD design, kdoctor can seamlessly integrate with observability components.</p> <p>kdoctor mainly offers three types of tasks: * AppHttpHealthy: according to the task configuration, perform connectivity checks using HTTP and HTTPS protocols on specified addresses within or outside the cluster, supporting various request methods such as PUT, GET, and POST. * NetReach: conduct connectivity inspections on Pod IP, ClusterIP, NodePort, LoadBalancer IP, Ingress IP, and even Pods with multiple network interfaces or dual-stack IPs. * NetDns: perform connectivity checks on designated DNS servers within or outside the cluster, supporting UDP, TCP, and TCP-TLS protocols.</p> <p>Advantages of kdoctor over traditional testing components: * By configuring inspection tasks through CRDs, users only need to focus on the inspection targets, frequency, pressure parameters, and expected results. * Pressure-injecting agents are dynamically run as Deployments or DaemonSets, achieving the effect of multiple pressure-injecting machines. * The execution of tasks utilizes default agents or newly created agents based on the task's spec configurations, enabling resource reuse and task resource isolation. * Agents are bound to corresponding resource targets such as ingress and service. Each agent Pod mutually accesses the bound resources according to the task configuration, deriving conclusions from the request results. * Through performance optimization, the pressure-injecting client significantly reduces resource consumption during requests. * Inspection reports can be generated through various means, including logging, aggregated APIs, and file storage.</p>"},{"location":"#architecture","title":"Architecture","text":"<p>Components: * kdoctor agent: kdoctor controller: a persistent Deployment responsible for CR monitoring, task creation, and task report aggregation. * kdoctor agent: dynamically created on-demand as Deployments or DaemonSets to execute tasks.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Install * Refer to Install kdoctor \u6216 kind Quick Start</p> <p>Task Get Started * AppHttpHealthy Get Started * NetReach Get Started * NetDNS Get Started</p>"},{"location":"#contribution","title":"Contribution","text":"<p>Refer to the Contribution doc.</p>"},{"location":"#license","title":"License","text":"<p>kdoctor is licensed under the Apache License, Version 2.0. See LICENSE for the full license text.</p>"},{"location":"README-zh_CN/","title":"kdoctor","text":"<p>\u7b80\u4f53\u4e2d\u6587 | English</p>"},{"location":"README-zh_CN/#_1","title":"\u4ecb\u7ecd","text":"<p>kdoctor \u662f\u4e00\u4e2a\u57fa\u4e8e\u4e3b\u52a8\u5f0f\u538b\u529b\u6ce8\u5165\u7684 Kubernetes \u6570\u636e\u9762\u6d4b\u8bd5\u7ec4\u4ef6\uff0c\u5bf9\u96c6\u7fa4\u8fdb\u884c\u529f\u80fd\u3001\u6027\u80fd\u7684\u6d4b\u8bd5\u3002\u901a\u8fc7\u8c03\u7814\u548c\u62bd\u8c61\u4e86\u8fd0\u7ef4\u4eba\u5458\u7684\u5e38\u89c4\u8fd0\u7ef4\u9700\u6c42\uff0c\u8ba9\u7f51\u7edc\u3001\u5b58\u50a8\u3001\u5e94\u7528\u7b49\u8fd0\u7ef4\u4efb\u52a1\u8fdb\u884c\u4e86\u4e91\u539f\u751f\u5b9e\u73b0\uff0c\u57fa\u4e8e CRD\u7684\u8bbe\u8ba1\uff0c\u80fd\u591f\u5bf9\u63a5\u89c2\u6d4b\u6027\u7ec4\u4ef6\u3002</p> <p>kdoctor \u4e3b\u8981\u5305\u542b\u4ee5\u4e0b 3 \u4e2a\u7c7b\u578b\u7684\u4efb\u52a1\uff1a * AppHttpHealthy: \u6839\u636e\u4efb\u52a1\u914d\u7f6e\u5bf9\u96c6\u7fa4\u5185\u5916\u6307\u5b9a\u8bbf\u95ee\u5730\u5740\uff0c\u4f7f\u7528 HTTP\u3001HTTPS \u534f\u8bae\u8fdb\u884c\u8fde\u901a\u6027\u68c0\u67e5\uff0c\u652f\u6301 PUT\u3001GET\u3001POST \u7b49\u591a\u79cd\u8bf7\u6c42\u65b9\u5f0f\u3002 * NetReach: \u6839\u636e\u4efb\u52a1\u914d\u7f6e\u5bf9\u96c6\u7fa4\u5185 Pod IP\u3001ClusterIP\u3001NodePort\u3001Loadbalancer IP\u3001Ingress IP, \u751a\u81f3\u662f POD \u591a\u7f51\u5361\u3001\u53cc\u6808IP\u8fdb\u884c\u8fde\u901a\u6027\u5de1\u68c0\u3002 * NetDns: \u6839\u636e\u4efb\u52a1\u914d\u7f6e\uff0c\u5bf9\u96c6\u7fa4\u5185\u5916\u7684\u6307\u5b9a DNS Server \u8fdb\u884c\u8fde\u901a\u6027\u68c0\u6d4b\uff0c\u652f\u6301 udp\u3001tcp\u3001tcp-tls \u534f\u8bae\u3002</p> <p>kdoctor \u8f83\u4f20\u7edf\u7684\u6d4b\u8bd5\u7ec4\u4ef6\u6709\u54ea\u4e9b\u4f18\u52bf: * \u901a\u8fc7\u4e0b\u53d1 CRD \u914d\u7f6e\u5de1\u68c0\u4efb\u52a1\u9700\u6c42\uff0c\u4f7f\u7528\u8005\u53ea\u9700\u8981\u5173\u6ce8\u5de1\u68c0\u76ee\u6807\u3001\u5de1\u68c0\u9891\u7387\u3001\u53d1\u538b\u53c2\u6570\u4ee5\u53ca\u671f\u671b\u5de1\u68c0\u7ed3\u679c\u3002 * \u901a\u8fc7\u8bfb\u53d6\u4efb\u52a1\u914d\u7f6e\uff0c\u4ee5 Deployment \u6216 DaemonSet \u7684\u65b9\u5f0f\u8fd0\u884c\u53d1\u538b agent\uff0c\u4ee5\u8fbe\u5230\u591a\u53f0\u53d1\u538b\u673a\u5668\u7684\u6548\u679c\u3002 * \u6839\u636e\u4efb\u52a1\u7684 spec \u914d\u7f6e\uff0c\u4f7f\u7528 default agent \u6216\u521b\u5efa\u65b0\u7684 agent \u6267\u884c\u4efb\u52a1\uff0c\u4ee5\u8fbe\u5230\u8d44\u6e90\u91cd\u590d\u5229\u7528\u548c\u4efb\u52a1\u8d44\u6e90\u9694\u79bb\u3002 * \u7ed1\u5b9a\u76f8\u5bf9\u5e94\u7684\u8d44\u6e90\u76ee\u6807\uff0c\u5982 ingress \u3001service\uff0c\u6bcf\u4e00\u4e2a agent pod \u6839\u636e\u4efb\u52a1\u914d\u7f6e\u76f8\u4e92\u8bbf\u95ee\u7ed1\u5b9a\u7684\u8d44\u6e90\uff0c\u6839\u636e\u8bf7\u6c42\u7ed3\u679c\u5f97\u51fa\u7ed3\u8bba\u3002 * \u53d1\u538b client \u901a\u8fc7\u6027\u80fd\u8c03\u4f18\uff0c\u5927\u5927\u964d\u4f4e\u4e86\u53d1\u538b\u8bf7\u6c42\u65f6\u7684\u8d44\u6e90\u6d88\u8017\u3002 * \u5de1\u68c0\u62a5\u544a\u901a\u8fc7\u65e5\u5fd7\u3001\u805a\u5408 api \u3001\u6587\u4ef6\u843d\u76d8\u7b49\u65b9\u5f0f\u8f93\u51fa\u3002</p>"},{"location":"README-zh_CN/#_2","title":"\u67b6\u6784","text":"<p>\u7ec4\u4ef6\u6784\u6210\uff1a * kdoctor controller: \u4ee5 Deployment \u5f62\u5f0f\u5e38\u9a7b\uff0c\u5b9e\u65bd CR \u76d1\u63a7\uff0c\u4efb\u52a1\u521b\u5efa\uff0c\u4efb\u52a1\u62a5\u544a\u6c47\u805a\u7b49\u3002 * kdoctor agent: \u4ee5 Deployment \u6216 DaemonSet \u5f62\u5f0f\u6309\u9700\u52a8\u6001\u521b\u5efa\uff0c\u4efb\u52a1\u7684\u6267\u884c\u8005\u3002</p>"},{"location":"README-zh_CN/#_3","title":"\u5feb\u901f\u5f00\u59cb","text":"<p>\u5b89\u88c5 * \u5b89\u88c5 kdoctor \u6216 kind \u5feb\u901f\u5f00\u59cb</p> <p>\u5f00\u59cb\u4efb\u52a1 * \u5f00\u59cb\u4efb\u52a1 AppHttpHealthy * \u5f00\u59cb\u4efb\u52a1 NetReach * \u5f00\u59cb\u4efb\u52a1 NetDNS</p>"},{"location":"README-zh_CN/#_4","title":"\u53c2\u4e0e\u5f00\u53d1","text":"<p>\u53ef\u53c2\u8003 \u5f00\u53d1\u642d\u5efa\u6587\u6863.</p>"},{"location":"README-zh_CN/#license","title":"License","text":"<p>kdoctor is licensed under the Apache License, Version 2.0. See LICENSE for the full license text.</p>"},{"location":"concepts/runtime-zh_CN/","title":"runtime zh CN","text":""},{"location":"concepts/runtime-zh_CN/#runtime","title":"runtime","text":"<p>English | \u7b80\u4f53\u4e2d\u6587</p> <p>\u90e8\u7f72 kdoctor \u540e\uff0c\u4f1a\u521b\u5efa\u4e00\u4e2a\u9ed8\u8ba4\u4efb\u52a1\u8f7d\u4f53\uff08Daemonset\uff09\uff0c\u5f53\u4e0b\u53d1\u4efb\u52a1 CR \u540e\uff0ckdoctor-controller \u4f1a\u6839\u636e CR \u4e2d\u7684\u662f\u5426\u5b9a\u4e49 AgentSpec \u5b57\u6bb5\u9009\u62e9\u751f\u6210\u5bf9\u5e94\u7684\u4efb\u52a1\u8f7d\u4f53\uff08DaemonSet \u6216 Deployment\uff09\u6216\u4f7f\u7528\u9ed8\u8ba4\u7684\u8f7d\u4f53\u8d44\u6e90\uff0c\u5f53\u6240\u6709 Pod \u5c31\u7eea\u540e\uff0c\u5f00\u59cb\u6309\u7167 Spec \u4e2d\u7684\u4efb\u52a1\u5b9a\u4e49\u6267\u884c\u4efb\u52a1\u3002</p>"},{"location":"concepts/runtime-zh_CN/#_1","title":"\u8f7d\u4f53\u8d44\u6e90","text":"<p>\u5f53\u4efb\u52a1 CR \u4e0b\u53d1\u540e\uff0ckdocotr-controller \u4f1a\u521b\u5efa\u6216\u590d\u7528\u5982\u4e0b\u8d44\u6e90\u6267\u884c\u4efb\u52a1\u3002</p>"},{"location":"concepts/runtime-zh_CN/#_2","title":"\u5de5\u4f5c\u8d1f\u8f7d","text":"<ol> <li> <p>\u9ed8\u8ba4\u5de5\u4f5c\u8d1f\u8f7d     &gt; \u9ed8\u8ba4\u5de5\u4f5c\u8d1f\u8f7d\uff08DaemonSet\uff09\u5728\u90e8\u7f72 kdoctor \u540e\u751f\u6210\uff0c\u5728\u672a\u5b9a\u4e49 AgentSpec \u65f6\uff0c\u4f7f\u7528\u6b64\u8f7d\u4f53\u6267\u884c\u4efb\u52a1\uff0c\u6b64\u8f7d\u4f53\u4e0d\u4f1a\u56e0\u4e3a\u4efb\u52a1\u5220\u9664\u6216\u7ed3\u675f\u800c\u88ab\u5220\u9664\u3002</p> <p>\u56e0\u6240\u6709\u4f7f\u7528\u9ed8\u8ba4\u5de5\u4f5c\u8d1f\u8f7d\u7684\u4efb\u52a1\u90fd\u4f1a\u5728\u6b64\u8d1f\u8f7d\u4e2d\u6267\u884c\uff0c\u56e0\u6b64\u9002\u5408\u8bf7\u6c42\u91cf\u8f83\u5c11\uff0c\u8d44\u6e90\u4f7f\u7528\u8f83\u5c11\u7684\u4efb\u52a1\u3002  </p> </li> <li> <p>\u65b0\u5efa\u5de5\u4f5c\u8d1f\u8f7d     &gt; \u5de5\u4f5c\u8d1f\u8f7d\u4e3a DaemonSet \u6216 Deployment\uff0c\u9ed8\u8ba4\u4e3a DaemonSet\uff0c\u8d1f\u8f7d\u4e2d\u7684\u6bcf\u4e00\u4e2a Pod \u6839\u636e\u4efb\u52a1\u914d\u7f6e\u6267\u884c\u8bf7\u6c42\uff0c\u5e76\u5c06\u6267\u884c\u7ed3\u679c\u843d\u76d8\u5230 Pod \u4e2d\uff0c\u53ef\u901a\u8fc7 AgentSpec \u4e2d\u8bbe\u7f6e     \u5de5\u4f5c\u8d1f\u8f7d\u7684\u9500\u6bc1\u65f6\u95f4\uff0c\u9ed8\u8ba4\u4efb\u52a1\u6267\u884c\u5b8c 60 \u5206\u949f\u540e\uff0c\u9500\u6bc1\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u5f53\u5220\u9664 CR \u4efb\u52a1\u65f6\uff0c\u5de5\u4f5c\u8d1f\u8f7d\u4f1a\u4e00\u5e76\u88ab\u5220\u9664\u3002</p> <p>\u6b64\u5de5\u4f5c\u8d1f\u8f7d\u5355\u72ec\u6267\u884c\u4e00\u4e2a\u4efb\u52a1\uff0c\u56e0\u6b64\u4e0e\u5176\u4ed6\u4efb\u52a1\u7684\u8d44\u6e90\u4f7f\u7528\u662f\u9694\u79bb\u7684\uff0c\u9002\u5408\u8bf7\u6c42\u91cf\u8f83\u5927\uff0c\u8d44\u6e90\u6d88\u8017\u8f83\u5927\u7684\u4efb\u52a1\u3002 </p> </li> </ol>"},{"location":"concepts/runtime-zh_CN/#service","title":"Service","text":"<ol> <li>\u9ed8\u8ba4\u5de5\u4f5c\u8f7d\u4f53 Service     &gt;\u4e0e\u9ed8\u8ba4\u5de5\u4f5c\u8d1f\u8f7d\u4e00\u6837\uff0c\u5728\u90e8\u7f72 kdoctor \u540e\u751f\u6210\uff0c\u4e0e\u9ed8\u8ba4\u8d1f\u8f7d\u5173\u8054\u4e14\u4e0d\u4f1a\u56e0\u4e3a\u4efb\u52a1\u5220\u9664\u6216\u7ed3\u675f\u800c\u88ab\u5220\u9664\u3002</li> <li>\u65b0\u5efa\u5de5\u4f5c\u8f7d\u4f53 Service     &gt;\u5728\u521b\u5efa\u5de5\u4f5c\u8d1f\u8f7d\u65f6\uff0ckdoctor-controller \u540c\u65f6\u4f1a\u6839\u636e IP Family \u7684\u914d\u7f6e\uff0c\u521b\u5efa\u5bf9\u5e94\u7684 service \u4e0e\u5de5\u4f5c\u8d1f\u8f7d\u7684 Pod \u7ed1\u5b9a\u3002\u7528\u4e8e\u6d4b\u8bd5 service \u7f51\u7edc\u8fde\u901a\u6027\u3002\u4e0e\u5de5\u4f5c\u8d1f\u8f7d\u7684\u9500\u6bc1\u903b\u8f91\u76f8\u540c\u3002</li> </ol>"},{"location":"concepts/runtime-zh_CN/#ingress","title":"Ingress","text":"<ol> <li>\u9ed8\u8ba4\u5de5\u4f5c\u8f7d\u4f53 Ingress <p>\u4e0e\u9ed8\u8ba4\u5de5\u4f5c\u8d1f\u8f7d\u4e00\u6837\uff0c\u5728\u90e8\u7f72 kdoctor \u540e\u751f\u6210\uff0c\u4e0e\u9ed8\u8ba4\u8d1f\u8f7d service \u5173\u8054\u4e14\u4e0d\u4f1a\u56e0\u4e3a\u4efb\u52a1\u5220\u9664\u6216\u7ed3\u675f\u800c\u88ab\u5220\u9664\u3002</p> </li> <li>\u65b0\u5efa\u5de5\u4f5c\u8f7d\u4f53 Ingress <p>\u5f53\u4efb\u52a1\u4e3a NetReach \u65f6\uff0c\u82e5\u6d4b\u8bd5\u76ee\u6807\u5305\u542b Ingress \u65f6\uff0c\u4f1a\u521b\u5efa\u4e00\u4e2a Ingress\uff0c\u7528\u4e8e\u6d4b\u8bd5 Ingress \u7684\u7f51\u7edc\u8054\u901a\u6027\uff0c\u4e0e\u5de5\u4f5c\u8d1f\u8f7d\u7684\u9500\u6bc1\u903b\u8f91\u76f8\u540c\u3002</p> </li> </ol>"},{"location":"concepts/runtime-zh_CN/#_3","title":"\u62a5\u544a\u6536\u53d6","text":"<p>\u5f53\u4efb\u52a1 CR \u4e0b\u53d1\u540e\uff0ckdoctor-controller \u4f1a\u5c06\u4efb\u52a1\u6ce8\u518c\u8fdb ReportManager\uff0cReportManager \u4f1a\u5b9a\u671f\u53bb\u6bcf\u4e00\u4e2a\u4efb\u52a1\u8d1f\u8f7d\u4e2d\u901a\u8fc7 GRPC \u63a5\u53e3\u83b7\u53d6\u62a5\u544a\uff0c\u5e76\u805a\u5408 \u5728 kdoctor-controller \u4e2d\uff0c\u805a\u5408\u540e\u53ef\u901a\u8fc7\u547d\u4ee4 <code>kubectl get kdoctorreport</code> \u83b7\u53d6\u62a5\u544a\u7ed3\u679c\uff0c\u56e0\u6b64\uff0c\u82e5\u62a5\u544a\u672a\u6536\u96c6\u5b8c\u6210\u5c31\u5c06\u5de5\u4f5c\u8d1f\u8f7d\u5220\u9664\u5c06\u5f71\u54cd\u62a5\u544a\u805a\u5408\u7ed3\u679c\u3002</p>"},{"location":"concepts/runtime-zh_CN/#_4","title":"\u751f\u547d\u5468\u671f","text":"<ul> <li>\u4efb\u52a1\u5f00\u59cb\u540e\uff0ckdoctor-controller \u4f1a\u5b9a\u65f6\u5411\u4efb\u52a1\u4e2d\u7684 Pod \u6536\u53d6\u62a5\u544a\uff0c\u4efb\u52a1\u5b8c\u6210\u540e\uff0c\u62a5\u544a\u6536\u96c6\u5b8c\u6210\uff0c\u4e0d\u4f1a\u518d\u8fdb\u884c\u62a5\u544a\u6536\u96c6\u3002</li> <li>\u4efb\u52a1\u8d1f\u8f7d\u6267\u884c\u5b8c\u4efb\u52a1\u540e\uff0c\u62a5\u544a\u88ab kdoctor-controller \u6536\u53d6\u62a5\u544a\u9ed8\u8ba4 10 \u5206\u949f\u540e\uff0c\u4f1a\u81ea\u52a8\u6e05\u7406\u6389\u8d1f\u8f7d\u4e2d\u7684\u62a5\u544a\u3002</li> <li>\u5f53\u5220\u9664\u6389\u5df2\u7ecf\u5b8c\u6210\u7684\u4efb\u52a1 CR \u540e\uff0c\u62a5\u544a\u4f9d\u7136\u5b58\u5728 kdoctor-controller \u62a5\u544a\u76ee\u5f55\u4e0b\uff0c\u4f46\u65e0\u6cd5\u901a\u8fc7 k8s \u805a\u5408 api \u67e5\u770b\uff0c\u9700\u8981\u624b\u52a8\u624d\u80fd\u8fdb\u884c\u67e5\u770b\u3002</li> <li>\u5f53\u5220\u9664\u6267\u884c\u4e2d\u7684\u4efb\u52a1 CR \u65f6\uff0c\u4efb\u52a1\u4f1a\u7ec8\u6b62\uff0c\u521b\u5efa CR \u65f6\u751f\u6210\u7684\u8d44\u6e90\u4f1a\u4e00\u5e76\u5220\u9664\uff0c\u5df2\u7ecf\u6536\u96c6\u597d\u7684\u62a5\u544a\u4f9d\u7136\u5b58\u653e\u5728 kdoctor-controller \u62a5\u544a\u76ee\u5f55\u4e0b\u3002</li> </ul>"},{"location":"concepts/runtime/","title":"Runtime","text":""},{"location":"concepts/runtime/#runtime","title":"Runtime","text":"<p>\u7b80\u4f53\u4e2d\u6587 | English</p> <p>After deploying kdoctor, a default task carrier (Daemonset) will be created. When a task CR is delivered, kdoctor-controller will choose to generate the corresponding task carrier (DaemonSet or Deployment) or use the default carrier resources based on whether or not the AgentSpec field is defined in the CR. When all Pods are ready, they start executing tasks according to the task definitions in the Spec.</p>"},{"location":"concepts/runtime/#carrier-resources","title":"Carrier Resources","text":"<p>When a task CR is delivered, kdoctor-controller creates or reuses the following resources to execute the task.</p>"},{"location":"concepts/runtime/#workloads","title":"Workloads","text":"<ol> <li>Default workload     &gt; The default workload (DaemonSet) is generated after kdoctor is deployed and is used for executing tasks when no AgentSpec is defined; this carrier is not deleted for task deletion or termination.     &gt; Since all tasks that use the default workload will be executed in this workload, it is suitable for tasks with fewer requests and less resource usage.  </li> <li> <p>New workload     &gt; The workload is DaemonSet or Deployment, and the former is the default. Each Pod in the workload executes the request according to the task configuration and drops the execution result to the Pod. Destruction time of the workload can be set in AgentSpec.     By default, the workload will be destroyed after 60 minutes of task execution. When the CR task is deleted, the workload will be deleted  as well. </p> <p>This workload executes a task alone, so it is isolated from the resource usage of other tasks, which is suitable for tasks with a large number of requests and resource consumption. </p> </li> </ol>"},{"location":"concepts/runtime/#service","title":"Service","text":"<ol> <li>Default workload Service     &gt; Same as the default workload, it is generated after deploying kdoctor, associated with the default workload, and will not be deleted when a task is deleted or terminated.</li> <li>New workload Service     &gt;When creating a workload, kdoctor-controller will create a corresponding service and bind it to the Pod of the workload according to the IP Family configuration. This is used to test the service network connectivity, which is the same logic as workload     destruction logic.</li> </ol>"},{"location":"concepts/runtime/#ingress","title":"Ingress","text":"<ol> <li>Default workload Ingress <p>The default workload Ingress is generated after deployment of the kdoctor and is associated with the default workload service and will not be deleted when the task is deleted or terminated, as is the case with the default workload.</p> </li> <li>New workload Ingress <p>When the task is NetReach and the test target contains an Ingress, an Ingress is created to test the network connectivity of the Ingress, with the same destruction logic as the workload.</p> </li> </ol>"},{"location":"concepts/runtime/#report-collection","title":"Report Collection","text":"<p>When the task CR is delivered, kdoctor-controller will register the task into ReportManager. ReportManager will periodically go to each task workload to get the report via GRPC interface and aggregate the reports into the kdoctor-controller. In kdoctor-controller, after aggregation, you can get the report result by command <code>kubectl get kdoctorreport</code>. Therefore, if you delete the workload before the report is collected, it will affect the report aggregation result.</p>"},{"location":"concepts/runtime/#lifecycle","title":"Lifecycle","text":"<ul> <li>After a task is started, kdoctor-controller collects reports from the Pods in the task at regular interval. After the task is completed, report collection is complete and no further report collection will be performed.</li> <li>After the workload execute the task, the reports are collected by the kdoctor-controller. By default, after 10 minutes, the kdoctor-controller automatically cleans up the reports from the workload.</li> <li>When a completed task CR is deleted, the report still exists in the kdoctor-controller report directory. However, it cannot be viewed through the k8s aggregation api and needs to be viewed manually.</li> <li>When deleting an executing task CR, the task will be terminated, and the resources generated during the creation of the CR will be deleted, and the collected reports will still be stored in the kdoctor-controller report catalog.</li> </ul>"},{"location":"develop/contributing/","title":"Contribution","text":""},{"location":"develop/contributing/#unitest","title":"unitest","text":"<p>run the following command to check unitest</p> <p><code>make unitest_tests</code></p>"},{"location":"develop/contributing/#setup-cluster-and-run-test","title":"setup cluster and run test","text":"<ol> <li> <p>check required developing tools on you local host. If something missing, please run 'test/scripts/install-tools.sh' to install them</p> <pre><code># make -C test  checkBin\n pass   'kubectl' installed:   GitVersion:\"v1.24.4\"\n pass   'kind' installed:  kind version 0.19.0\n pass   'helm' installed:  Version:\"v3.12.0\"\n pass   'docker' installed:  Docker version 24.0.6, build ed223bc\n</code></pre> </li> <li> <p>run the e2e</p> <pre><code># make e2e\n</code></pre> </li> </ol> <p>if your run it for the first time, it will download some images, you could set the http proxy</p> <pre><code>    # ADDR=10.6.0.1\n    # export https_proxy=http://${ADDR}:7890 http_proxy=http://${ADDR}:7890\n    # make e2e\n</code></pre> <p>run a specified case</p> <pre><code>    # make e2e -e E2E_GINKGO_LABELS=\"lable1,label2\"\n</code></pre> <ol> <li> <p>you could do it step by step with the follow</p> <p>if you are in China, it could add <code>-e E2E_CHINA_IMAGE_REGISTRY=true</code> to pull images from china image registry, add <code>-e HTTP_PROXY=http://${ADDR}</code> to get chart</p> <p>build the image</p> <pre><code># do some coding\n\n$ git add .\n$ git commit -s -m 'message'\n\n# !!! images is built by commit sha, so make sure the commit is submit locally\n$ make build_local_image\n</code></pre> <p>setup the cluster</p> <pre><code># setup the kind cluster of dual-stack\n# !!! images is tested by commit sha, so make sure the commit is submit locally\n$ make e2e_init\n</code></pre> <p>run the e2e test</p> <pre><code># run all e2e test on dual-stack cluster\n$ make e2e_run\n\n# run all e2e test on ipv4-only cluster\n$ make e2e_run -e E2E_IP_FAMILY=ipv4\n\n# run all e2e test on ipv6-only cluster\n$ make e2e_run -e E2E_IP_FAMILY=ipv6\n\n$ ls e2ereport.json\n\n$ make e2e_clean\n</code></pre> </li> </ol> <p>5.clean <code>make e2e_clean</code></p>"},{"location":"develop/contributing/#submit-pull-request","title":"Submit Pull Request","text":"<p>A pull request will be checked by following workflow, which is required for merging.</p>"},{"location":"develop/contributing/#action-your-pr-should-be-signed-off","title":"Action: your PR should be signed off","text":"<p>When you commit your modification, add <code>-s</code> in your commit command <code>git commit -s</code></p>"},{"location":"develop/contributing/#action-check-yaml-files","title":"Action: check yaml files","text":"<p>If this check fails, see the yaml rule.</p> <p>Once the issue is fixed, it could be verified on your local host by command <code>make lint-yaml</code>.</p> <p>Note: To ignore a yaml rule, you can add it into <code>.github/yamllint-conf.yml</code>.</p>"},{"location":"develop/contributing/#action-check-golang-source-code","title":"Action: check golang source code","text":"<p>It checks the following items against any updated golang file.</p> <ul> <li> <p>Mod dependency updated, golangci-lint, gofmt updated, go vet, use internal lock pkg</p> </li> <li> <p>Comment <code>// TODO</code> should follow the format: <code>// TODO (AuthorName) ...</code>, which easy to trace the owner of the remaining job</p> </li> <li> <p>Unitest and upload coverage to codecov</p> </li> <li> <p>Each golang test file should mark ginkgo label</p> </li> </ul>"},{"location":"develop/contributing/#action-check-licenses","title":"Action: check licenses","text":"<p>Any golang or shell file should be licensed correctly.</p>"},{"location":"develop/contributing/#action-check-markdown-file","title":"Action: check markdown file","text":""},{"location":"develop/contributing/#action-lint-yaml-file","title":"Action: lint yaml file","text":"<p>If it fails, see https://yamllint.readthedocs.io/en/stable/rules.html for reasons.</p> <p>You can test it on your local machine with the command <code>make lint-yaml</code>.</p>"},{"location":"develop/contributing/#action-lint-chart","title":"Action: lint chart","text":"<p>You can test it on your local machine with the command <code>make lint_chart_format</code>.</p>"},{"location":"develop/contributing/#action-lint-openapiyaml","title":"Action: lint openapi.yaml","text":""},{"location":"develop/contributing/#action-check-code-spell","title":"Action: check code spell","text":"<p>Any code spell error of golang files will be checked.</p> <p>You can check it on your local machine with the command <code>make lint-code-spell</code>.</p> <p>It could be automatically fixed on your local machine with the command <code>make fix-code-spell</code>.</p> <p>If you believe it can be ignored, edit <code>.github/codespell-ignorewords</code> and make sure all letters are lower-case.</p>"},{"location":"develop/contributing/#changelog","title":"Changelog","text":"<p>How to automatically generate changelogs:</p> <ol> <li> <p>All PRs should be labeled with \"pr/release/***\" and can be merged.</p> </li> <li> <p>When you add the label, the changelog will be created automatically.</p> </li> </ol> <p>The changelog contents include:</p> <ul> <li> <p>New Features: it includes all PRs labeled with \"pr/release/feature-new\"</p> </li> <li> <p>Changed Features: it includes all PRs labeled with \"pr/release/feature-changed\"</p> </li> <li> <p>Fixes: it includes all PRs labeled with \"pr/release/bug\"</p> </li> <li> <p>All historical commits within this version</p> </li> <li> <p>The changelog will be attached to Github RELEASE and submitted to /changelogs of branch 'github_pages'.</p> </li> </ul>"},{"location":"develop/crd/","title":"develop new crd","text":"<ol> <li> <p>define CRD in pkg/k8s/apis/kdoctor.io/v1beta1/xx_types.go    add role to pkg/k8s/apis/kdoctor.io/v1beta1/rbac.go</p> </li> <li> <p>make update_openapi_sdk</p> </li> <li> <p>add crd to MutatingWebhookConfiguration and ValidatingWebhookConfiguration in charts/templates/tls.yaml </p> </li> <li> <p>add your crd to charts/template/role.yaml</p> </li> <li> <p>implement the interface pkg/pluginManager/types in pkg/plugins/xxxx    register your interface in pkg/pluginManager/types/manager.go</p> </li> </ol> <p>the plugin manager will auto help plugins to finish following jobs:</p> <ol> <li> <p>schedule task and call plugin to implement each round task</p> </li> <li> <p>collect all report and save to controller disc</p> </li> <li> <p>summarize each round result and update to CRD</p> </li> </ol>"},{"location":"develop/dev/","title":"develop","text":""},{"location":"develop/dev/#local-develop","title":"local develop","text":"<ol> <li> <p><code>make build_local_image</code></p> </li> <li> <p>setup kind </p> <pre><code>make e2e_init\n    -----------------------------------------------------------------------------------------------------\n     succeeded to setup cluster spider\n     you could use following command to access the cluster\n        export KUBECONFIG=$(pwd)/test/runtime/kubeconfig_kdoctor.config\n        kubectl get nodes\n    -----------------------------------------------------------------------------------------------------\n</code></pre> <p>for chian developer </p> <pre><code>make e2e_init -e E2E_CHINA_IMAGE_REGISTRY=true -e E2E_HELM_HTTP_PROXY=http://xxxx\n</code></pre> </li> <li> <p><code>make e2e_run</code></p> </li> <li> <p>check proscope, browser vists http://NodeIP:4040</p> </li> <li> <p><code>make e2e_clean</code></p> </li> </ol>"},{"location":"develop/dev/#chart-develop","title":"chart develop","text":"<p>helm repo add rock https://kdoctor-io.github.io/kdoctor/</p>"},{"location":"develop/release/","title":"workflow for release","text":""},{"location":"develop/release/#pre-steps","title":"pre-steps","text":"<ul> <li> <p>update 'version' and 'appVersion' filed in 'charts/*/Chart.yaml'</p> </li> <li> <p>update version in '/VERSION'</p> </li> <li> <p>a version tag should be set on right branch. The version should go with </p> <ul> <li> <p>v0.1.0-rc0</p> </li> <li> <p>v0.1.0-rc1</p> </li> <li> <p>v0.1.0</p> </li> <li> <p>v0.1.1</p> </li> <li> <p>v0.1.2</p> </li> <li> <p>v0.2.0-rc0</p> </li> <li> <p>v0.2.0</p> </li> </ul> </li> </ul>"},{"location":"develop/release/#push-a-version-tag","title":"push a version tag","text":"<p>If a tag vx.x.x is pushed , the following steps will automatically run:</p> <ol> <li> <p>check the tag name is same with '/VERSION'</p> </li> <li> <p>create a branch named 'release-vx.x.x'</p> </li> <li> <p>build the images with the pushed tag, and push to ghcr registry</p> </li> <li> <p>generate the changelog by historical PR labeled as \"pr/release/*\"</p> <p>submit the changelog file to directory 'changelogs' of branch 'github_pages', with PR labeled as \"pr/release/robot_update_githubpage\".</p> <p>changelogs is generated by historical PR label:</p> <p>label \"release/feature-new\" to be classified to \"New Features\"</p> <p>label \"release/feature-changed\" to be classified to \"Changed Features\"</p> <p>label \"release/bug\" to be classified to \"Fixes\"</p> </li> <li> <p>build the chart package with the pushed tag, and submit a PR to branch 'github_pages' </p> <p>you cloud get the chart with command <code>helm repo add $REPO_NAME https://kdoctor-io.github.io/$REPO_NAME</code></p> </li> <li> <p>submit '/docs' to '/docs' of branch 'github_pages'</p> </li> <li> <p>create a GitHub Release attached with the chart package and changelog</p> </li> <li> <p>Finally, by hand, need approve the chart PR labeled as \"pr/release/robot_update_githubpage\" , and changelog PR labeled as \"pr/release/robot_update_githubpage\"</p> </li> </ol>"},{"location":"develop/release/#post","title":"post","text":"<ol> <li>Submit a issue of the version update to the documentation site --&gt; https://github.com/DaoCloud/DaoCloud-docs</li> </ol>"},{"location":"develop/roadmap/","title":"feature","text":"<p>\u6d4b\u8bd5\u96c6\u7fa4\u529f\u80fd\u3001\u6027\u80fd\u5de1\u68c0\u5de5\u5177\uff0c\u6279\u91cf\u5316\u5de1\u68c0\uff0c\u6781\u5927\u964d\u4f4e\u4eba\u5de5\u8d1f\u8f7d</p>"},{"location":"develop/roadmap/#crd","title":"CRD","text":""},{"location":"develop/roadmap/#netreachhealthy-and-httpapphealthy","title":"NetReachHealthy and HttpAppHealthy","text":"<ul> <li> <p>\u5927\u89c4\u6a21\u96c6\u7fa4\u90e8\u7f72\u540e\uff0c\u5de1\u68c0\u6bcf\u4e2a\u8282\u70b9\u4e0a\u7684\u7f51\u7edc\u60c5\u51b5\uff0c\u5177\u4f53\u662f\uff1a\u672c\u8282\u70b9\u662f\u5426\u80fd\u591f\u901a\u8fc7 pod ip\uff08multus\u591a\u7f51\u5361\uff09\u3001cluster ip\u3001   nodePort\u3001loadbalancer ip\u3001ingress ip \u3001\u591a\u7f51\u5361 \u7b49\u6240\u6709\u7f51\u7edc\u6e20\u9053\uff0c\u8bbf\u95ee\u5230\u96c6\u7fa4\u5176\u5b83\u8282\u70b9</p> </li> <li> <p>\u96c6\u7fa4\u6240\u6709\u7684 node \u4e0a \u53bb \u538b\u6d4b\u4e00\u4e2a\u96c6\u7fa4\u5185/\u5916\u7684\u5e94\u7528\u5730\u5740\uff0c\u4ee5\u67e5\u770b\u5e94\u7528\u7684\u6027\u80fd\u3001\u96c6\u7fa4\u6bcf\u4e2a\u89d2\u843d\u5230\u8fbe\u8be5\u5e94\u7528\u7684\u8fde\u901a\u6027\u3001\u7ed9\u5e94\u7528\u6ce8\u5165\u538b\u529b\u590d\u73b0\u67d0\u7c7bbug</p> </li> <li> <p>\u7ed9 api server \u6ce8\u5165\u538b\u529b\uff0c\u4ee5\u8f85\u52a9\u6392\u67e5 \u5176\u4ed6\u7ec4\u4ef6\uff08\u4f9d\u8d56 api server\uff09\u7684\u9ad8\u53ef\u7528</p> </li> <li> <p>\u751f\u4ea7\u548c\u5f00\u53d1\u73af\u5883\u7684\u5fc3\u8df3\u5de1\u68c0\uff0c\u4ee5qps=1\u4e3a\u538b\u529b\uff0c\u6bcf 1m \u95f4\u9694\u5de1\u68c0\u6574\u4e2a\u96c6\u7fa4\u5185 full mesh \u7f51\u7edc\u7684\u8fde\u901a\u6027\u3001\u5176\u5b83\u8282\u70b9\u5230\u4e00\u4e2a\u5e94\u7528\u7684\u53ef\u7528\u6027</p> </li> </ul>"},{"location":"develop/roadmap/#httpappdetect","title":"HttpAppDetect","text":"<ul> <li>\u81ea\u52a8\u53d1\u73b0\u5e94\u7528\u7684\u6700\u5927\u6027\u80fd</li> </ul>"},{"location":"develop/roadmap/#netdelayhealthy","title":"NetDelayHealthy","text":"<ul> <li>\u96c6\u7fa4\u8282\u70b9\u95f4\u7684\u5ef6\u65f6</li> </ul>"},{"location":"develop/roadmap/#dnshealthy","title":"DnsHealthy","text":"<ul> <li> <p>\u5927\u89c4\u6a21\u96c6\u7fa4\u90e8\u7f72\u540e\uff0c\u6d4b\u8bd5\u96c6\u7fa4\u4e2d\u6bcf\u4e2a\u89d2\u843d\u8bbf\u95ee dns \u7684\u8fde\u901a\u6027</p> </li> <li> <p>\u5927\u89c4\u6a21\u96c6\u7fa4\u90e8\u7f72\u540e\uff0c\u8c03\u8bd5 coredns \u7684\u526f\u672c\u6570\uff0c\u786e\u8ba4\u662f\u5426\u6ee1\u8db3\u8bbe\u8ba1\u9700\u6c42</p> </li> <li> <p>\u6d4b\u8bd5\u96c6\u7fa4\u5916\u90e8\u7684 DNS \u670d\u52a1</p> </li> </ul>"},{"location":"develop/roadmap/#dnsdetect","title":"DnsDetect","text":"<ul> <li>\u81ea\u52a8\u53d1\u73b0 dns \u7684\u6700\u5927\u6027\u80fd</li> </ul>"},{"location":"develop/roadmap/#nettcphealthy","title":"NetTcpHealthy","text":""},{"location":"develop/roadmap/#netudphealthy","title":"NetUdpHealthy","text":""},{"location":"develop/roadmap/#storagelocaldisk","title":"StorageLocalDisk","text":"<ul> <li>\u5927\u89c4\u6a21\u96c6\u7fa4\u90e8\u7f72\u540e\uff0c\u6d4b\u8bd5\u96c6\u7fa4\u4e2d\u6bcf\u4e2a\u4e3b\u673a\u4e0a\u7684\u78c1\u76d8 \u541e\u5410\u91cf \u548c \u5ef6\u65f6</li> </ul>"},{"location":"develop/roadmap/#cpupressure","title":"CpuPressure ?","text":"<ul> <li>\u7ed9\u6bcf\u4e2a\u4e3b\u673a\u4e0a\u6ce8\u5165 CPU \u538b\u529b\uff0c\u4ee5\u6d4b\u8bd5\u5e94\u7528\u7684\u7a33\u5b9a\u6027\uff0c\u590d\u73b0\u4e00\u4e9b bug</li> </ul>"},{"location":"develop/roadmap/#memorypressure","title":"MemoryPressure ?","text":"<ul> <li>\u7ed9\u6bcf\u4e2a\u4e3b\u673a\u4e0a\u6ce8\u5165 memory \u538b\u529b\uff0c\u4ee5\u6d4b\u8bd5\u5e94\u7528\u7684\u7a33\u5b9a\u6027\uff0c\u590d\u73b0\u4e00\u4e9b bug</li> </ul>"},{"location":"develop/roadmap/#registryhealthy","title":"RegistryHealthy","text":"<ul> <li>\u68c0\u6d4b\u6bcf\u4e2a\u8282\u70b9\u5230\u955c\u50cf\u4ed3\u5e93\u7684\u8fde\u901a\u6027</li> </ul>"},{"location":"develop/roadmap/#k8sapihealthy","title":"K8sApiHealthy","text":""},{"location":"develop/roadmap/#mysqlhealthy","title":"MysqlHealthy","text":""},{"location":"develop/roadmap/#report","title":"report","text":"<p>\u652f\u6301\u901a\u8fc7 API \u83b7\u53d6\u62a5\u544a</p> <p>\u652f\u6301 pvc\u3001\u672c\u5730\u78c1\u76d8\u5b58\u50a8</p> <p>\u65e5\u5fd7\u5410\u51fa</p>"},{"location":"develop/roadmap/#metric","title":"metric","text":""},{"location":"develop/roadmap/#_1","title":"\u5176\u5b83","text":"<p>\u5982\u679c\u6709 job \u65f6\u95f4\u91cd\u53e0\u4e86\uff0c\u5219\u53ea\u5141\u8bb8\u8fd0\u884c\u4e00\u4e2a \u6216\u8005 \u591a\u4e2a\uff0c\u907f\u514d\u81ea\u8eab CPU \u4e0d\u8db3\u5f71\u54cd job \u7684\u7ed3\u679c</p> <p>\u4e2d\u95f4\u4ef6\u3001etcd \u7b49 \u63a2\u6d4b</p> kind feature status \u4efb\u52a1 \u652f\u6301\u5468\u671f\u548c\u4e00\u6b21\u6027\u8c03\u5ea6 \u591a\u4e2a\u4efb\u52a1\u5e76\u53d1\u65f6\uff0c\u652f\u6301\u89c4\u907f\uff0c\u907f\u514d cpu \u548c memory \u8017\u5c3d\uff0c\u4f7f\u5f97\u4efb\u52a1\u6267\u884c\u51c6\u786e \u6240\u6709\u4efb\u52a1\uff0c\u6700\u5927 qps \u5b89\u5168\u8fb9\u9645\u8bbe\u7f6e \u652f\u6301\u8bbe\u7f6e\u53d1\u538bqps\u3001\u53d1\u538b\u65f6\u95f4 \u652f\u6301\u8bbe\u7f6e\u5e76\u53d1\u538b\u6d4b worker \uff0c \u4e14\u652f\u6301\u8ddf\u968f\u5e94\u7528\u526f\u672c\u6570\u91cf\u81ea\u52a8\u5408\u9002\u5e76\u53d1\u6570\uff0c\u4ee5\u6ee1\u8db3K8S \u8d1f\u8f7d\u5747\u8861\u7279\u6027 \u652f\u6301select \u53d1\u538b pod \u7f51\u7edc\u53ef\u8fbe\u6027 \u652f\u6301 pod ip\uff0ccluster ip\uff0cnodePort\uff0cloadbalancer ip\uff0cingress\uff0c\u591a\u7f51\u5361\uff0cipv6 \u7b49\u591a\u6837\u5316\u6e20\u9053 \u6301\u7eed\u53d1\u538b\uff0c\u53d1\u73b0\u5076\u53d1\u4e22\u5305 \u670d\u52a1 http \u5de1\u68c0 \u652f\u6301 pod selector \u548c url \u6301\u7eed\u53d1\u538b\uff0c\u53d1\u73b0\u5076\u53d1\u4e22\u5305 \u652f\u6301 http/https/http2 \u652f\u6301\u5b9a\u5236 header\u3001method\u3001body dns\u5de1\u68c0 \u7f51\u7edc\u53ef\u8fbe\u6027 \u6027\u80fd\u6d4b\u8bd5 tcp \u5de1\u68c0 \u7f51\u7edc\u541e\u5410\u91cf udp \u5de1\u68c0 \u7f51\u7edc\u4e22\u5305\u7387 api server \u5de1\u68c0 \u7f51\u7edc\u53ef\u8fbe\u6027 \u5b58\u50a8\u5de1\u68c0 \u652f\u6301\u672c\u5730\u78c1\u76d8\u5de1\u68c0 IO \u541e\u5410\u91cf\u548c\u5ef6\u65f6 \u955c\u50cf\u4ed3\u5e93\u5de1\u68c0 \u7f51\u7edc\u53ef\u8fbe\u6027 \u4e2d\u95f4\u4ef6\u5de1\u68c0 \u7f51\u7edc\u53ef\u8fbe\u6027 mysql  redis \u62a5\u544a CR \u4e2d\u72b6\u6001\u5c55\u793a \u8be6\u7ec6\u62a5\u544a\u652f\u6301 pv \u5b58\u50a8 \u8be6\u7ec6\u62a5\u544a\u652f\u6301 API \u83b7\u53d6 \u8be6\u7ec6\u62a5\u544a\u652f\u6301 webhook \u5410\u51fa \u6307\u6807 \u8be6\u7ec6\u62a5\u544a\u7684\u4fdd\u7559\u65f6\u95f4\u8bbe\u7f6e \u62a5\u544a\u8f6e\u6eda\uff0c\u907f\u514d\u5b58\u6ee1 PVC"},{"location":"reference/_example/","title":"CRD","text":""},{"location":"reference/_example/#_1","title":"\u57fa\u672c\u63cf\u8ff0","text":"<p>\u672cCRD \u662f\u505a\u4ec0\u4e48\u7684</p>"},{"location":"reference/_example/#_2","title":"\u914d\u7f6e\u8bf4\u660e","text":"<p>\u8868\u683c\uff08\u5b57\u6bb5\u3001\u63cf\u8ff0\u3001\u53d6\u503c\u8303\u6587\u548c\u7f3a\u7701\u503c\uff09\uff0c\u5305\u62ec\u4e86 status \u7684\u4fe1\u606f\u8bf4\u660e</p>"},{"location":"reference/_example/#_3","title":"\u4f7f\u7528\u4f8b\u5b50","text":"<p>\u7ed9\u51fa\u4e00\u4e9b\u573a\u666f\u573a\u666f\u4e0b\u7684 CR yaml</p>"},{"location":"reference/apphttphealthy-zh_CN/","title":"AppHttpHealthy","text":"<p>English | \u7b80\u4f53\u4e2d\u6587</p>"},{"location":"reference/apphttphealthy-zh_CN/#_1","title":"\u57fa\u672c\u63cf\u8ff0","text":"<p>\u5bf9\u4e8e\u8fd9\u79cd\u4efb\u52a1\uff0ckdoctor-controller \u4f1a\u6839\u636e agentSpec \u751f\u6210\u5bf9\u5e94\u7684 agent \u7b49\u8d44\u6e90\uff0c\u6bcf\u4e00\u4e2a agent Pod \u90fd\u4f1a\u5411\u6307\u5b9a\u7684\u76ee\u6807\u53d1\u9001 HTTP\u8bf7\u6c42\uff0c\u5e76\u83b7\u5f97\u6210\u529f\u7387\u548c\u5e73\u5747\u5ef6\u8fdf\u3002\u5b83\u53ef\u4ee5\u6307\u5b9a\u6210\u529f\u6761\u4ef6\u6765\u5224\u65ad\u7ed3\u679c\u662f\u5426\u6210\u529f\u3002\u5e76\u4e14\uff0c\u53ef\u4ee5\u901a\u8fc7\u805a\u5408 API \u83b7\u53d6\u8be6\u7ec6\u7684\u62a5\u544a\u3002</p>"},{"location":"reference/apphttphealthy-zh_CN/#apphttphealthy_1","title":"AppHttpHealthy \u793a\u4f8b","text":"<pre><code>apiVersion: kdoctor.io/v1beta1\nkind: AppHttpHealthy\nmetadata:\n  name: apphttphealth\nspec:\n  agentSpec:\n    hostNetwork: false\n    kind: DaemonSet\n    terminationGracePeriodMinutes: 60\n  expect:\n    meanAccessDelayInMs: 1500\n    successRate: 1\n  request:\n    durationInSecond: 10\n    perRequestTimeoutInMS: 2000\n    qps: 10\n  schedule:\n    roundNumber: 1\n    roundTimeoutMinute: 1\n    schedule: 0 1\n  target:\n    enableLatencyMetric: false\n    host: http://www.baidu.com\n    http2: false\n    method: GET\nstatus:\n  doneRound: 1\n  expectedRound: 1\n  finish: true\n  history:\n    - deadLineTimeStamp: \"2023-07-28T09:58:41Z\"\n      duration: 17.272005445s\n      endTimeStamp: \"2023-07-28T09:57:58Z\"\n      expectedActorNumber: 2\n      failedAgentNodeList: []\n      notReportAgentNodeList: []\n      roundNumber: 1\n      startTimeStamp: \"2023-07-28T09:57:41Z\"\n      status: succeed\n      succeedAgentNodeList:\n        - kdoctor-worker\n        - kdoctor-control-plane\n  lastRoundStatus: succeed\n</code></pre>"},{"location":"reference/apphttphealthy-zh_CN/#apphttphealthy_2","title":"AppHttpHealthy \u5b9a\u4e49","text":""},{"location":"reference/apphttphealthy-zh_CN/#metadata","title":"Metadata","text":"\u5b57\u6bb5 \u63cf\u8ff0 \u7ed3\u6784 \u9a8c\u8bc1 name AppHttpHealthy \u8d44\u6e90\u7684\u540d\u79f0 string \u5fc5\u586b"},{"location":"reference/apphttphealthy-zh_CN/#spec","title":"Spec","text":"\u5b57\u6bb5 \u63cf\u8ff0 \u7ed3\u6784 \u9a8c\u8bc1 \u53d6\u503c \u9ed8\u8ba4\u503c agentSpec \u4efb\u52a1\u6267\u884c agent \u914d\u7f6e agentSpec \u53ef\u9009 schedule \u8c03\u5ea6\u4efb\u52a1\u6267\u884c schedule \u53ef\u9009 request \u5bf9\u76ee\u6807\u5730\u5740\u8bf7\u6c42\u914d\u7f6e request \u53ef\u9009 target \u8bf7\u6c42\u76ee\u6807\u8bbe\u7f6e target \u53ef\u9009 expect \u4efb\u52a1\u6210\u529f\u6761\u4ef6\u5224\u65ad expect \u53ef\u9009"},{"location":"reference/apphttphealthy-zh_CN/#agentspec","title":"AgentSpec","text":"\u5b57\u6bb5 \u63cf\u8ff0 \u7ed3\u6784 \u9a8c\u8bc1 \u53d6\u503c \u9ed8\u8ba4\u503c annotation agent \u5de5\u4f5c\u8d1f\u8f7d\u7684 annotation map[string]string \u53ef\u9009 kind agent \u5de5\u4f5c\u8d1f\u8f7d\u7684\u7c7b\u578b string \u53ef\u9009 Deployment\u3001DaemonSet DaemonSet deploymentReplicas agent \u5de5\u4f5c\u8d1f\u8f7d\u7c7b\u578b\u4e3a deployment \u65f6\u7684\u671f\u671b\u526f\u672c\u6570 int \u53ef\u9009 \u5927\u4e8e\u7b49\u4e8e 0 0 affinity agent \u5de5\u4f5c\u8d1f\u8f7d\u4eb2\u548c\u6027 labelSelector \u53ef\u9009 env agent \u5de5\u4f5c\u8d1f\u8f7d\u73af\u5883\u53d8\u91cf env \u53ef\u9009 hostNetwork agent \u5de5\u4f5c\u8d1f\u8f7d\u662f\u5426\u4f7f\u7528\u5bbf\u4e3b\u673a\u7f51\u7edc bool \u53ef\u9009 true\u3001false false resources agent \u5de5\u4f5c\u8d1f\u8f7d\u8d44\u6e90\u4f7f\u7528\u914d\u7f6e resources \u53ef\u9009 limit cpu:1000m,memory:1024Mi terminationGracePeriodMinutes agent \u5de5\u4f5c\u8d1f\u8f7d\u5b8c\u6210\u4efb\u52a1\u540e\u591a\u5c11\u5206\u949f\u4e4b\u540e\u7ec8\u6b62 int \u53ef\u9009 \u5927\u4e8e\u7b49\u4e8e 0 60"},{"location":"reference/apphttphealthy-zh_CN/#schedule","title":"Schedule","text":"\u5b57\u6bb5 \u63cf\u8ff0 \u7ed3\u6784 \u9a8c\u8bc1 \u53d6\u503c \u9ed8\u8ba4\u503c roundNumber \u4efb\u52a1\u6267\u884c\u8f6e\u6570 int \u53ef\u9009 \u5927\u4e8e\u7b49\u4e8e-1\uff0c\u4e3a -1 \u65f6\u8868\u793a\u6c38\u4e45\u6267\u884c,\u5927\u4e8e 0 \u8868\u793a\u5c06\u8981\u6267\u884c\u7684\u8f6e\u6570 1 schedule \u4efb\u52a1\u6267\u884c\u65f6\u95f4, \u6267\u884c\u65f6\u95f4\u5e94\u5c0f\u4e8eroundTimeoutMinute string \u53ef\u9009 \u652f\u6301 linux crontab \u4e0e\u95f4\u9694\u6cd5\u4e24\u79cd\u5199\u6cd5linux crontab \uff1a */1 * * * * \u8868\u793a\u6bcf\u5206\u949f\u6267\u884c\u4e00\u6b21 \u95f4\u9694\u6cd5\uff1a\u4e66\u5199\u683c\u5f0f\u4e3a \u201cM N\u201d \uff0cM\u53d6\u503c\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c\u8868\u793a\u591a\u5c11\u5206\u949f\u4e4b\u540e\u5f00\u542f\u4efb\u52a1\uff0cN\u53d6\u503c\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c\u8868\u793a\u6bcf\u4e00\u8f6e\u4efb\u52a1\u7684\u95f4\u9694\u591a\u5c11\u5206\u949f\u6267\u884c\uff0c\u4f8b\u5982 \u201c0 1\u201d \u8868\u793a\u7acb\u5373\u5f00\u59cb\u4efb\u52a1\uff0c\u6bcf\u8f6e\u4efb\u52a1\u95f4\u96941min \"0 1\" roundTimeoutMinute \u4efb\u52a1\u8d85\u65f6\u65f6\u95f4\uff0c\u9700\u8981\u5927\u4e8e durationInSecond \u548c \u4efb\u52a1\u6267\u884c\u65f6\u95f4 int \u53ef\u9009 \u5927\u4e8e\u7b49\u4e8e 1 60"},{"location":"reference/apphttphealthy-zh_CN/#request","title":"Request","text":"\u5b57\u6bb5 \u63cf\u8ff0 \u7ed3\u6784 \u9a8c\u8bc1 \u53d6\u503c \u9ed8\u8ba4\u503c durationInSecond \u6bcf\u8f6e\u4efb\u52a1\u7684\u8bf7\u6c42\u53d1\u538b\u7684\u6301\u7eed\u65f6\u95f4\uff0c\u5c0f\u4e8eroundTimeoutMinute int \u53ef\u9009 \u5927\u4e8e\u7b49\u4e8e 1 2 perRequestTimeoutInMS \u6bcf\u4e2a\u8bf7\u6c42\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u4e0d\u53ef\u5927\u4e8e durationInSecond int \u53ef\u9009 \u5927\u4e8e\u7b49\u4e8e 1 500 qps \u6bcf\u4e00\u4e2a agent \u6bcf\u79d2\u8bf7\u6c42\u6570\u91cf int \u53ef\u9009 \u5927\u4e8e\u7b49\u4e8e 1 5 <p>\u4f7f\u7528 agent \u8bf7\u6c42\u65f6\uff0c\u6240\u6709\u7684 agent \u90fd\u4f1a\u5411\u76ee\u6807\u5730\u5740\u8fdb\u884c\u8bf7\u6c42\uff0c\u56e0\u6b64\u5b9e\u9645 server \u63a5\u6536\u7684 QPS \u7b49\u4e8e agent \u6570\u91cf * \u8bbe\u7f6e\u7684 QPS\u3002</p>"},{"location":"reference/apphttphealthy-zh_CN/#target","title":"Target","text":"\u5b57\u6bb5 \u63cf\u8ff0 \u7ed3\u6784 \u9a8c\u8bc1 \u53d6\u503c \u9ed8\u8ba4\u503c host HTTP \u8bf7\u6c42\u5730\u5740 string \u5fc5\u586b method HTTP \u8bf7\u6c42\u65b9\u6cd5 string \u5fc5\u586b GET\u3001POST\u3001PUT\u3001DELETE\u3001CONNECT\u3001OPTIONS\u3001PATCH\u3001HEAD bodyConfigmapName HTTP \u8bf7\u6c42 body \u5b58\u653e\u7684 configmap \u540d\u79f0,configmap \u5185\u5bb9\u53c2\u8003\uff0c\u82e5\u4e0d\u9700\u8981 body \u8bf7\u6c42\uff0c\u5ffd\u7565\u6b64\u5b57\u6bb5 string \u53ef\u9009 bodyConfigmapNamespace HTTP \u8bf7\u6c42 body \u7684 configmap \u547d\u540d\u7a7a\u95f4\uff0c\u5982\u679c bodyConfigmapName \u4e0d\u4e3a\u7a7a\uff0c\u9700\u8981\u8bbe\u7f6e\u6b64\u5b57\u6bb5 string \u53ef\u9009 tlsSecretName HTTPs \u8bf7\u6c42\u8bc1\u4e66\u5b58\u653e\u7684 secret \u540d\u79f0\uff0csecret\u7c7b\u578b\u4e3a kubernetes.io/tls,secret \u5185\u5bb9\u53c2\u8003\uff0c\u82e5\u4f7f\u7528\u534f\u8bae\u975e https \u5ffd\u7565\u6b64\u5b57\u6bb5 string \u53ef\u9009 tlsSecretNamespace HTTPs \u8bf7\u6c42\u8bc1\u4e66\u5b58\u653e\u7684 secret \u547d\u540d\u7a7a\u95f4\uff0c\u5982\u679c tlsSecretName \u5b57\u6bb5\u4e0d\u4e3a\u7a7a\uff0c\u9700\u8981\u8bbe\u7f6e\u6b64\u5b57\u6bb5 string \u53ef\u9009 header HTTP \u8bf7\u6c42\u5934\uff0c\u6570\u7ec4\u5f62\u5f0f,\u793a\u4f8b\u4e3a \"Content-Type: application/json\" \u5143\u7d20\u4e3a\u5b57\u7b26\u4e32\u7684\u6570\u7ec4 \u53ef\u9009 HTTP2 \u4f7f\u7528 HTTP2 \u534f\u8bae\u8fdb\u884c\u8bf7\u6c42\u5f00\u5173 bool \u53ef\u9009 true,false false enableLatencyMetric \u7edf\u8ba1\u6f14\u793a\u5206\u5e03,\u5f00\u542f\u540e\u4f1a\u589e\u52a0\u5185\u5b58\u4f7f\u7528\u91cf bool \u53ef\u9009 true,false false"},{"location":"reference/apphttphealthy-zh_CN/#expect","title":"Expect","text":"<p>\u4efb\u52a1\u6210\u529f\u6761\u4ef6\uff0c\u82e5\u4efb\u52a1\u7ed3\u679c\u6ca1\u6709\u8fbe\u5230\u671f\u671b\u6761\u4ef6\uff0c\u4efb\u52a1\u5931\u8d25</p> \u5b57\u6bb5 \u63cf\u8ff0 \u7ed3\u6784 \u9a8c\u8bc1 \u53d6\u503c \u9ed8\u8ba4\u503c meanAccessDelayInMs \u5e73\u5747\u5ef6\u65f6,\u5982\u679c\u6700\u7ec8\u7684\u7ed3\u679c \u8d85\u8fc7\u672c\u503c\uff0c\u4efb\u52a1\u4f1a\u5224\u5b9a\u4e3a\u5931\u8d25 int \u53ef\u9009 \u5927\u4e8e\u7b49\u4e8e 1 5000 successRate HTTP \u8bf7\u6c42\u6210\u529f\u7387,\u5982\u679c\u6700\u7ec8\u7684\u7ed3\u679c \u5c0f\u4e8e\u672c\u503c\uff0c\u4efb\u52a1\u4f1a\u5224\u5b9a\u4e3a\u5931\u8d25 float \u53ef\u9009 0-1 1 statusCode \u671f\u5f85\u7684 HTTP \u8fd4\u56de\u72b6\u6001\u7801\uff0c\u5982\u679c\u6700\u7ec8\u7684\u7ed3\u679c\u4e0d\u7b49\u4e8e\u672c\u503c\uff0c\u4efb\u52a1\u4f1a\u5224\u5b9a\u4e3a\u5931\u8d25 int \u53ef\u9009 0-600 200"},{"location":"reference/apphttphealthy-zh_CN/#body","title":"Body","text":"<p>\u643a\u5e26 body \u8bf7\u6c42\uff0cbody \u5199\u6cd5\u793a\u4f8b</p> <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: kdoctor-test-body-5656-89207258\n  namespace: kdoctor\ndata:\n  test1: test1\n  test2: test2\n</code></pre>"},{"location":"reference/apphttphealthy-zh_CN/#tls","title":"TLS","text":"<p>HTTPs \u8bf7\u6c42\u4f7f\u7528\u8bc1\u4e66\u65f6\uff0c\u82e5\u4e0d\u586b\u5199 CA \u8bc1\u4e66\u5219\u4e0d\u5bf9\u8bc1\u4e66\u5b89\u5168\u8fdb\u884c\u6821\u9a8c\uff0cHTTPs \u8bf7\u6c42\u8bc1\u4e66\u793a\u4f8b\u3002</p> <pre><code>apiVersion: v1\ndata:\n  ca.crt:  xxxxxxxxxbase64\n  tls.crt: xxxxxxxxxbase64\n  tls.key: xxxxxxxxxbase64\nkind: Secret\nmetadata:\n  name: kdoctor-client-cert\n  namespace: kdoctor\ntype: kubernetes.io/tls\n</code></pre>"},{"location":"reference/apphttphealthy-zh_CN/#status","title":"Status","text":"\u5b57\u6bb5 \u63cf\u8ff0 \u7ed3\u6784 \u53d6\u503c doneRound \u5b8c\u6210\u7684\u4efb\u52a1\u8f6e\u6570 int expectedRound \u671f\u671b\u6267\u884c\u7684\u8f6e\u6570 int finish \u4efb\u52a1\u662f\u5426\u5b8c\u6210 bool true\u3001false lastRoundStatus \u6700\u540e\u4e00\u8f6e\u4efb\u52a1\u72b6\u6001 string notstarted\u3001ongoing\u3001succeed\u3001fail history \u4efb\u52a1\u5386\u53f2 \u5143\u7d20\u4e3ahistory\u7684\u6570\u7ec4"},{"location":"reference/apphttphealthy-zh_CN/#history","title":"History","text":"\u5b57\u6bb5 \u63cf\u8ff0 \u7ed3\u6784 \u53d6\u503c roundNumber \u4efb\u52a1\u8f6e\u6570 int status \u4efb\u52a1\u72b6\u6001 string notstarted\u3001ongoing\u3001succeed\u3001fail startTimeStamp \u672c\u8f6e\u4efb\u52a1\u5f00\u59cb\u65f6\u95f4 string endTimeStamp \u672c\u8f6e\u4efb\u52a1\u7ed3\u675f\u65f6\u95f4 string duration \u672c\u8f6e\u4efb\u52a1\u6267\u884c\u65f6\u95f4 string deadLineTimeStamp \u672c\u8f6e\u4efb\u52a1 deadline string failedAgentNodeList \u4efb\u52a1\u5931\u8d25\u7684 agent \u5143\u7d20\u4e3a string \u7684\u6570\u7ec4 succeedAgentNodeList \u4efb\u52a1\u6210\u529f\u7684 agent \u5143\u7d20\u4e3a string \u7684\u6570\u7ec4 notReportAgentNodeList \u6ca1\u6709\u4e0a\u4f20\u4efb\u52a1\u62a5\u544a\u7684 agent \u5143\u7d20\u4e3a string \u7684\u6570\u7ec4"},{"location":"reference/apphttphealthy/","title":"AppHttpHealthy","text":"<p>\u7b80\u4f53\u4e2d\u6587 | English</p>"},{"location":"reference/apphttphealthy/#basic-description","title":"Basic description","text":"<p>For this kind of task, kdoctor-controller generates the corresponding agent and other resources. Each agent Pod sends an HTTP request to the specified target and gets the success rate and average latency. It can specify the success condition to determine whether the result is successful or not. And, detailed reports can be obtained through the aggregation API.</p>"},{"location":"reference/apphttphealthy/#apphttphealthy-example","title":"AppHttpHealthy Example","text":"<pre><code>apiVersion: kdoctor.io/v1beta1\nkind: AppHttpHealthy\nmetadata:\n  name: apphttphealth\nspec:\n  agentSpec:\n    hostNetwork: false\n    kind: DaemonSet\n    terminationGracePeriodMinutes: 60\n  expect:\n    meanAccessDelayInMs: 1500\n    successRate: 1\n  request:\n    durationInSecond: 10\n    perRequestTimeoutInMS: 2000\n    qps: 10\n  schedule:\n    roundNumber: 1\n    roundTimeoutMinute: 1\n    schedule: 0 1\n  target:\n    enableLatencyMetric: false\n    host: http://www.baidu.com\n    http2: false\n    method: GET\nstatus:\n  doneRound: 1\n  expectedRound: 1\n  finish: true\n  history:\n    - deadLineTimeStamp: \"2023-07-28T09:58:41Z\"\n      duration: 17.272005445s\n      endTimeStamp: \"2023-07-28T09:57:58Z\"\n      expectedActorNumber: 2\n      failedAgentNodeList: []\n      notReportAgentNodeList: []\n      roundNumber: 1\n      startTimeStamp: \"2023-07-28T09:57:41Z\"\n      status: succeed\n      succeedAgentNodeList:\n        - kdoctor-worker\n        - kdoctor-control-plane\n  lastRoundStatus: succeed\n</code></pre>"},{"location":"reference/apphttphealthy/#apphttphealthy-definitions","title":"AppHttpHealthy Definitions","text":""},{"location":"reference/apphttphealthy/#metadata","title":"Metadata","text":"Fields Descriptions Structures Validations Name Name of the AppHttpHealthy Resource String Required"},{"location":"reference/apphttphealthy/#spec","title":"Spec","text":"Fields Description Structure Validation Values Default agentSpec Task Execution Agent Configuration agentSpec Optional Schedule Scheduling Task Execution schedule Optional Request Request Configuration for a Destination Address request Optional Target Request Target Settings target Optional Expect Task Success Condition Judgment expect Optional"},{"location":"reference/apphttphealthy/#agentspec","title":"AgentSpec","text":"Fields Description Structure Validation Values Default Annotation Annotation of Agent Workload Map[string]String Optional Kind Type of Agent Workload String Optional Deployment, DaemonSet DaemonSet deploymentReplicas The expected number of replicas when the agent workload type is deployment int Optional Greater than or Equal to 0 0 Affinity Agent Workload Affinity labelSelector Optional env Agent Workload Environment Variable env Optional hostNetwork Whether or not the agent workload uses the host network Bool Optional True, false False Resources Agent Workload Resource Usage Configuration Resources Optional Limit CPU:1000m,Memory:1024Mi terminationGracePeriodMinutes the minutes after a agent workload completes a task before it terminates int Optional Greater than or equal to 0 60"},{"location":"reference/apphttphealthy/#schedule","title":"Schedule","text":"Fields Description Structure Validation Values Defaults roundNumber Task Execution Rounds int Optional A value greater than or equal to -1 indicates indefinite execution, with -1 representing permanent execution. A value greater than 0 represents the number of rounds to be executed 1 roundTimeoutMinute Task timeout which needs to be greater than durationInSecond and task execution time int optional greater than or equal to 1 60"},{"location":"reference/apphttphealthy/#request","title":"Request","text":"Fields Description Structure Validation Values Defaults durationInSecond Duration of request send pressure for each round of tasks which is less than roundTimeoutMinute int Optional Greater than or equal to 1 2 perRequestTimeoutInMS Timeout per request, not greater than durationInSecond int Optional Greater than or equal to 1 500 QPS Number of requests per second per agent int Optional Greater than or equal to 1 5 <p>When using agent requests, all agents will make requests to the destination address, so the actual QPS received by the server is equal to the number of agents multiplied by the set QPS.</p>"},{"location":"reference/apphttphealthy/#target","title":"Target","text":"Fields Description Structures Validation Values Defaults Host HTTP Request Address String Required Method HTTP Request Method String Required GET, POST, PUT, DELETE, CONNECT, OPTIONS, PATCH, HEAD bodyConfigmapName The name of the configmap stored in the body of the HTTP request. Refer to configmap. If you don't need a body request, ignore this field. String Optional bodyConfigmapNamespace HTTP request body's configmap namespace. If bodyConfigmapName is not empty, you need to set this field string optional tlsSecretName The name of the secret where the HTTPs request certificate is stored, with a secret of type kubernetes.io/tls. Refer to secret. Ignore this field if using a protocol other than HTTPs String optional tlsSecretNamespace The secret namespace where the HTTPs request certificate is stored. If the tlsSecretName field is not null, you need to set this field String Optional header HTTP request header, in the form of an array, for example \"Content-Type: application/json\" Elements are an array of strings Optional HTTP2 Use the request HTTP2 protocol switch bool Optional True,false False enableLatencyMetric Statistics demo distribution, which increases memory usage when turned on Bool Optional True,false False"},{"location":"reference/apphttphealthy/#expect","title":"Expect","text":"<p>Task success condition. If the task result does not meet the expected condition, the task fails.</p> Fields Description Structures Validation Values Defaults meanAccessDelayInMs The average delay. If the final result exceeds this value, the task will be judged as failed int Optional Greater than or equal to 1 5000 successRate Success rate of the HTTP request. If the final result is less than this value, the task will fail Float Optional 0-1 1 statusCode The expected HTTP return status code. If the final result is not equal to this value, the task will be determined to have failed int Optional 0-600 200"},{"location":"reference/apphttphealthy/#body","title":"Body","text":"<p>Carry a body request. Example of how to write a body</p> <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata: name: kdoctor-test-body-5656-89207258\n  name: kdoctor-test-body-5656-89207258\n  namespace: kdoctor\ndata: kdoctor-test-body-5656-89207258 namespace: kdoctor\n  test1: test1\n  test2: test2\n</code></pre>"},{"location":"reference/apphttphealthy/#tls","title":"TLS","text":"<p>If you don't fill in the CA certificate when using certificate for HTTPs request, the certificate security will not be verified, HTTPs request certificate example:</p> <pre><code>apiVersion: v1\ndata: ca.crt: xxxxxxx\n  ca.crt: xxxxxxxxxxxbase64\n  tls.crt: xxxxxxxxxxxbase64\n  tls.key: xxxxxxxxxxxbase64\nkind: Secret\nmetadata.\n  name: kdoctor-client-cert\n  namespace: kdoctor\ntype: kubernetes.io/tls\n</code></pre>"},{"location":"reference/apphttphealthy/#status","title":"Status","text":"Fields Description Structures Values doneRound Number of completed task rounds int expectedRound Number of rounds expected to be performed int Finish Whether the task is complete or not Bool True, false lastRoundStatus lastRoundStatus String Notstarted, on-going, succeed, fail History Task History Element is history array"},{"location":"reference/apphttphealthy/#history","title":"History","text":"Fields Description Structure Values roundNumber Task Round Number int Status Task Status String Notstarted, ongoing, succeed, fail startTimeStamp Start of the current round of tasks String endTimeStamp End of the current round of tasks string duration Execution time of the current round of tasks string deadLineTimeStamp Deadline of the current round of tasks string failedAgentNodeList Agent whose tasks failed Array of elements as string succeedAgentNodeList Agent whose task succeeded Array of elements as string notReportAgentNodeList Agent who did not upload a task report Array of elements as string"},{"location":"reference/arch/","title":"Architecture","text":"<p>The kdoctor aims to test clusters and generate task reports to check whether the cluster is healthy.</p> <p>It consists of controller deployment and agent daemonset.</p> <ul> <li> <p>The controller schedules the task, update and summarize the task result, and aggregate all reports.</p> </li> <li> <p>The agent implement tasks.</p> </li> </ul>"},{"location":"reference/kdoctor-agent/","title":"kdoctor-agent","text":"<p>This page describes CLI options and ENV of kdoctor-agent.</p>"},{"location":"reference/kdoctor-agent/#kdoctor-agent-daemon","title":"kdoctor-agent Daemon","text":"<p>Run the kdoctor agent daemon.</p>"},{"location":"reference/kdoctor-agent/#options","title":"Options","text":"Options Type Default Description --config-dir String /tmp/config-map/conf.yml Config file path --app-mode bool false Agent running mode. When using app mode, the agent only provides an HTTP and HTTPS server for testing. --tls-insecure Bool True The HTTPS server skips TLS authentication. --default-agent Bool False The default agent performs tasks. --tls-ca-cert String /etc/tls/ca.crt The CA certificate path, which is used by the agent to generate the signing certificate. --tls-ca-key String /etc/tls/ca.key The CA key path, which is used by the agent to generate the signing certificate. --task-kind String \"\" The kind of task. values AppHttpHealthy\u3001NetReach and Netdns. --task-name String \"\" The name of task. --service-ipv4-name string \"\" The ipv4 service name of the task workload. --service-ipv6-name string \"\" The ipv6 service name of the task workload."},{"location":"reference/kdoctor-agent/#env","title":"ENV","text":"env default description ENV_LOG_LEVEL info Log level, optional values are \"debug\", \"info\", \"warn\", \"error\", \"fatal\", \"panic\". ENV_ENABLED_METRIC false Enable/disable metrics. ENV_METRIC_HTTP_PORT 5711 Metric HTTP server port. ENV_AGENT_HEALTH_HTTP_PORT 5710 kdoctor-agent health backend HTTP server port. ENV_AGENT_APP_HTTP_PORT 80 kdoctor-agent app backend HTTP server port. ENV_AGENT_APP_HTTPS_PORT 443 kdoctor-agent app backend HTTP server port. ENV_ENABLE_AGGREGATE_AGENT_REPORT false enable aggregate report ENV_CLEAN_AGED_REPORT_INTERVAL_IN_MINUTE 10 clean aggregate report interval in minute ENV_AGENT_REPORT_STORAGE_PATH /report aggregate report storage path ENV_GOPS_LISTEN_PORT 5712 Gops port ENV_PYROSCOPE_PUSH_SERVER_ADDRESS \"\" pyroscope addr ENV_POD_NAME \"\" agent pod name ENV_POD_NAMESPACE \"\" agent pod namespace ENV_GOLANG_MAXPROCS 8 golang runtime max procs ENV_AGENT_GRPC_LISTEN_PORT 3000 agent grpc port ENV_CLUSTER_DNS_DOMAIN cluster.local cluster domian ENV_LOCAL_NODE_IP \"\" loacl node ip ENV_LOCAL_NODE_NAME \"\" loacl node name ENV_AGENT_RESOURCE_COLLECT_INTERVAL_IN_SECOND \"1\" agent CPU and memory usage collection interval time"},{"location":"reference/kdoctor-controller/","title":"kdoctor-controller","text":"<p>This page describes CLI options and ENV of kdoctor-controller.</p>"},{"location":"reference/kdoctor-controller/#kdoctor-controller-daemon","title":"kdoctor-controller Daemon","text":"<p>Run the kdoctor controller daemon.</p>"},{"location":"reference/kdoctor-controller/#options","title":"Options","text":"Options Type Default Description --config-dir String /tmp/config-map/conf.yml Config file path. --tls-ca-cert string /etc/tls/ca.crt The CA certificate path. The CA is used to validate the certificate. --tls-server-cert string /etc/tls/tls.crt The server tls cert path. --tls-server-key string /etc/tls/tls.key The server tls key path. --configmap-deployment-template string /tmp/configmap-app-template/deployment.yml The configmap deployment template file path. --configmap-daemonset-template string /tmp/configmap-app-template/daemonset.yml The configmap daemonset template file path. --configmap-pod-template string /tmp/configmap-app-template/pod.yml The configmap Pod template file path. --configmap-service-template string /tmp/configmap-app-template/service.yml The configmap service template file path. --configmap-ingress-template string /tmp/configmap-app-template/ingress.yml The configmap ingress template file path."},{"location":"reference/kdoctor-controller/#env","title":"ENV","text":"Env Default Description ENV_LOG_LEVEL Info Log level.Optional values are \"debug\", \"info\", \"warn\", \"error\", \"fatal\", \"panic\". ENV_ENABLED_METRIC False Enable/disable metrics. ENV_METRIC_HTTP_PORT 5711 Metric HTTP server port. ENV_HTTP_PORT 80 kdoctor-controller backend HTTP server port. ENV_ENABLE_AGGREGATE_AGENT_REPORT False Enable aggregate report ENV_CLEAN_AGED_REPORT_INTERVAL_IN_MINUTE 10 Clean aggregate report interval in minutes ENV_COLLECT_AGENT_REPORT_INTERVAL_IN_SECOND 600 Collect agent report interval time ENV_CONTROLLER_REPORT_AGE_IN_DAY 30 Controller report age in ady ENV_AGENT_REPORT_STORAGE_PATH /report Aggregate report storage path ENV_CONTROLLER_REPORT_STORAGE_PATH /report Controller report storage path ENV_GOPS_LISTEN_PORT 5724 Gops port ENV_WEBHOOK_PORT 5722 Controller webhook port ENV_PYROSCOPE_PUSH_SERVER_ADDRESS \"\" pyroscope addr ENV_POD_NAME \"\" Controller Pod name ENV_POD_NAMESPACE \"\" Controller Pod namespace ENV_GOLANG_MAXPROCS 8 golang runtime max procs ENV_DEFAULT_AGENT_NAME kdoctor-agent Default agent name ENV_DEFAULT_AGENT_TYPE Daemonset Default agent type ENV_DEFAULT_AGENT_SERVICE_V4_NAME \"\" Default agent server IPv4 name ENV_DEFAULT_AGENT_SERVICE_V6_NAME \"\" Default agent server IPv6 name"},{"location":"reference/netdns-zh_CN/","title":"netdns","text":"<p>English | \u7b80\u4f53\u4e2d\u6587</p>"},{"location":"reference/netdns-zh_CN/#_1","title":"\u57fa\u672c\u63cf\u8ff0","text":"<p>\u5bf9\u4e8e\u8fd9\u79cd\u4efb\u52a1\uff0ckdoctor-controller \u4f1a\u6839\u636e agentSpec \u751f\u6210\u5bf9\u5e94\u7684 agent \u7b49\u8d44\u6e90\uff0c\u6bcf\u4e00\u4e2a agent Pod \u90fd\u4f1a\u5411\u6307\u5b9a\u7684\u76ee\u6807\u53d1\u9001 DNS \u8bf7\u6c42\uff0c\u5e76\u83b7\u5f97\u6210\u529f\u7387\u548c\u5e73\u5747\u5ef6\u8fdf\u3002\u5b83\u53ef\u4ee5\u6307\u5b9a\u6210\u529f\u6761\u4ef6\u6765\u544a\u77e5\u7ed3\u679c\u6210\u529f\u6216\u5931\u8d25\u3002</p>"},{"location":"reference/netdns-zh_CN/#netdns_1","title":"netdns \u793a\u4f8b","text":""},{"location":"reference/netdns-zh_CN/#dns-server","title":"\u96c6\u7fa4 DNS Server \u68c0\u67e5","text":"<p>\u5bf9\u96c6\u7fa4\u5185\u7684 DNS server\uff08CoreDNS\uff09\u53d1\u9001\u5bf9\u5e94\u8bf7\u6c42\uff0c\u83b7\u53d6\u96c6\u7fa4\u5185 DNS server \u6027\u80fd\u72b6\u6001\u3002</p> <pre><code>apiVersion: kdoctor.io/v1beta1\nkind: Netdns\nmetadata:\n  name: netdns-cluster\nspec:\n  agentSpec:\n    hostNetwork: false\n    kind: DaemonSet\n    terminationGracePeriodMinutes: 60\n  expect:\n    meanAccessDelayInMs: 1500\n    successRate: 1\n  request:\n    domain: kubernetes.default.svc.cluster.local\n    durationInSecond: 10\n    perRequestTimeoutInMS: 1000\n    protocol: udp\n    qps: 10\n  schedule:\n    roundNumber: 1\n    roundTimeoutMinute: 1\n    schedule: 0 1\n  target:\n    enableLatencyMetric: false\n    targetDns:\n      serviceName: kube-dns\n      serviceNamespace: kube-system\n      testIPv4: true\n      testIPv6: true\nstatus:\n  doneRound: 1\n  expectedRound: 1\n  finish: true\n  history:\n    - deadLineTimeStamp: \"2023-07-28T09:45:03Z\"\n      duration: 15.809063339s\n      endTimeStamp: \"2023-07-28T09:44:18Z\"\n      expectedActorNumber: 2\n      failedAgentNodeList: []\n      notReportAgentNodeList: []\n      roundNumber: 1\n      startTimeStamp: \"2023-07-28T09:44:03Z\"\n      status: succeed\n      succeedAgentNodeList:\n        - kdoctor-control-plane\n        - kdoctor-worker\n  lastRoundStatus: succeed\n</code></pre>"},{"location":"reference/netdns-zh_CN/#dns-server_1","title":"\u6307\u5b9a DNS server \u68c0\u67e5","text":"<p>\u5bf9\u96c6\u7fa4\u5916\u90e8\u7684 DNS server \u53d1\u9001\u5bf9\u5e94\u8bf7\u6c42\uff0c\u83b7\u53d6\u96c6\u7fa4\u5916\u90e8 DNS server \u6027\u80fd\u72b6\u6001\u3002</p> <pre><code>apiVersion: kdoctor.io/v1beta1\nkind: Netdns\nmetadata:\n  name: netdns- user\nspec:\n  expect:\n    meanAccessDelayInMs: 1500\n    successRate: 1\n  request:\n    domain: www.baidu.com\n    durationInSecond: 10\n    perRequestTimeoutInMS: 1000\n    protocol: udp\n    qps: 10\n  schedule:\n    roundNumber: 1\n    roundTimeoutMinute: 1\n    schedule: 0 1\n  target:\n    enableLatencyMetric: false\n    targetUser:\n      port: 53\n      server: 172.41.54.83\n</code></pre>"},{"location":"reference/netdns-zh_CN/#netdns_2","title":"netdns \u5b9a\u4e49","text":""},{"location":"reference/netdns-zh_CN/#metadata","title":"Metadata","text":"\u5b57\u6bb5 \u63cf\u8ff0 \u7ed3\u6784 \u9a8c\u8bc1 name netdns \u8d44\u6e90\u7684\u540d\u79f0 string \u5fc5\u586b"},{"location":"reference/netdns-zh_CN/#spec","title":"Spec","text":"\u5b57\u6bb5 \u63cf\u8ff0 \u7ed3\u6784 \u9a8c\u8bc1 \u53d6\u503c \u9ed8\u8ba4\u503c agentSpec \u4efb\u52a1\u6267\u884cagent \u914d\u7f6e agentSpec \u53ef\u9009 schedule \u8c03\u5ea6\u4efb\u52a1\u6267\u884c schedule \u53ef\u9009 request \u5bf9\u76ee\u6807\u5730\u5740\u8bf7\u6c42\u914d\u7f6e request \u53ef\u9009 target \u8bf7\u6c42\u76ee\u6807\u8bbe\u7f6e target \u53ef\u9009 expect \u4efb\u52a1\u6210\u529f\u6761\u4ef6\u5224\u65ad expect \u53ef\u9009"},{"location":"reference/netdns-zh_CN/#agentspec","title":"AgentSpec","text":"\u5b57\u6bb5 \u63cf\u8ff0 \u7ed3\u6784 \u9a8c\u8bc1 \u53d6\u503c \u9ed8\u8ba4\u503c annotation agent \u5de5\u4f5c\u8d1f\u8f7d\u7684 annotation map[string]string \u53ef\u9009 kind agent \u5de5\u4f5c\u8d1f\u8f7d\u7684\u7c7b\u578b string \u53ef\u9009 Deployment\u3001DaemonSet DaemonSet deploymentReplicas agent \u5de5\u4f5c\u8d1f\u8f7d\u7c7b\u578b\u4e3a deployment \u65f6\u7684\u671f\u671b\u526f\u672c\u6570 int \u53ef\u9009 \u5927\u4e8e\u7b49\u4e8e 0 0 affinity agent \u5de5\u4f5c\u8d1f\u8f7d\u4eb2\u548c\u6027 labelSelector \u53ef\u9009 env agent \u5de5\u4f5c\u8d1f\u8f7d\u73af\u5883\u53d8\u91cf env \u53ef\u9009 hostNetwork agent \u5de5\u4f5c\u8d1f\u8f7d\u662f\u5426\u4f7f\u7528\u5bbf\u4e3b\u673a\u7f51\u7edc bool \u53ef\u9009 true\u3001false false resources agent \u5de5\u4f5c\u8d1f\u8f7d\u8d44\u6e90\u4f7f\u7528\u914d\u7f6e resources \u53ef\u9009 limit cpu:1000m,memory:1024Mi terminationGracePeriodMinutes agent \u5de5\u4f5c\u8d1f\u8f7d\u5b8c\u6210\u4efb\u52a1\u540e\u591a\u5c11\u5206\u949f\u4e4b\u540e\u7ec8\u6b62 int \u53ef\u9009 \u5927\u4e8e\u7b49\u4e8e 0 60"},{"location":"reference/netdns-zh_CN/#schedule","title":"Schedule","text":"\u5b57\u6bb5 \u63cf\u8ff0 \u7ed3\u6784 \u9a8c\u8bc1 \u53d6\u503c \u9ed8\u8ba4\u503c roundNumber \u4efb\u52a1\u6267\u884c\u8f6e\u6570 int \u53ef\u9009 \u5927\u4e8e\u7b49\u4e8e-1\uff0c\u4e3a -1 \u65f6\u8868\u793a\u6c38\u4e45\u6267\u884c,\u5927\u4e8e 0 \u8868\u793a\u5c06\u8981\u6267\u884c\u7684\u8f6e\u6570 1 schedule \u4efb\u52a1\u6267\u884c\u65f6\u95f4, \u6267\u884c\u65f6\u95f4\u5e94\u5c0f\u4e8eroundTimeoutMinute string \u53ef\u9009 \u652f\u6301 linux crontab \u4e0e\u95f4\u9694\u6cd5\u4e24\u79cd\u5199\u6cd5linux crontab \uff1a */1 * * * * \u8868\u793a\u6bcf\u5206\u949f\u6267\u884c\u4e00\u6b21 \u95f4\u9694\u6cd5\uff1a\u4e66\u5199\u683c\u5f0f\u4e3a \u201cM N\u201d \uff0cM \u53d6\u503c\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c\u8868\u793a\u591a\u5c11\u5206\u949f\u4e4b\u540e\u5f00\u542f\u4efb\u52a1\uff0cN\u53d6\u503c\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c\u8868\u793a\u6bcf\u4e00\u8f6e\u4efb\u52a1\u7684\u95f4\u9694\u591a\u5c11\u5206\u949f\u6267\u884c\uff0c\u4f8b\u5982 \u201c0 1\u201d \u8868\u793a\u7acb\u5373\u5f00\u59cb\u4efb\u52a1\uff0c\u6bcf\u8f6e\u4efb\u52a1\u95f4\u9694 1min \"0 60\" roundTimeoutMinute \u4efb\u52a1\u8d85\u65f6\u65f6\u95f4\uff0c\u9700\u8981\u5927\u4e8e durationInSecond \u548c \u4efb\u52a1\u6267\u884c\u65f6\u95f4 int \u53ef\u9009 \u5927\u4e8e\u7b49\u4e8e 1 60"},{"location":"reference/netdns-zh_CN/#request","title":"Request","text":"\u5b57\u6bb5 \u63cf\u8ff0 \u7ed3\u6784 \u9a8c\u8bc1 \u53d6\u503c \u9ed8\u8ba4\u503c durationInSecond \u6bcf\u8f6e\u4efb\u52a1\u7684\u8bf7\u6c42\u53d1\u538b\u7684\u6301\u7eed\u65f6\u95f4\uff0c\u5c0f\u4e8eroundTimeoutMinute int \u53ef\u9009 \u5927\u4e8e\u7b49\u4e8e 1 2 perRequestTimeoutInMS \u6bcf\u4e2a\u8bf7\u6c42\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u4e0d\u53ef\u5927\u4e8e durationInSecond int \u53ef\u9009 \u5927\u4e8e\u7b49\u4e8e 1 500 qps \u6bcf\u4e00\u4e2a agent \u6bcf\u79d2\u8bf7\u6c42\u6570\u91cf int \u53ef\u9009 \u5927\u4e8e\u7b49\u4e8e 1 5 protocol \u8bf7\u6c42\u534f\u8bae string \u53ef\u9009 UDP\u3001TCP\u3001TCP-TLS UDP domain DNS \u8bf7\u6c42\u89e3\u6790\u7684\u57df\u540d string \u53ef\u9009 kubernetes.default.svc.cluster.local <p>\u6ce8\u610f\uff1a\u4f7f\u7528 agent \u8bf7\u6c42\u65f6\uff0c\u6240\u6709\u7684 agent \u90fd\u4f1a\u5411\u76ee\u6807\u5730\u5740\u8fdb\u884c\u8bf7\u6c42\uff0c\u56e0\u6b64\u5b9e\u9645 server \u63a5\u6536\u7684 QPS \u7b49\u4e8e agent \u6570\u91cf * \u8bbe\u7f6e\u7684 QPS\u3002</p>"},{"location":"reference/netdns-zh_CN/#target","title":"Target","text":"\u5b57\u6bb5 \u63cf\u8ff0 \u7ed3\u6784 \u9a8c\u8bc1 \u53d6\u503c \u9ed8\u8ba4\u503c targetUser \u5bf9\u7528\u6237\u81ea\u5b9a\u4e49\u7684 DNS server \u8fdb\u884c DNS \u8bf7\u6c42 targetUser \u53ef\u9009 true targetDns \u5bf9\u96c6\u7fa4\u7684 DNS server\uff08CoreDNS\uff09\u8fdb\u884c DNS \u8bf7\u6c42 targetDns \u53ef\u9009 true enableLatencyMetric \u7edf\u8ba1\u6f14\u793a\u5206\u5e03,\u5f00\u542f\u540e\u4f1a\u589e\u52a0\u5185\u5b58\u4f7f\u7528\u91cf bool \u53ef\u9009 true,false false"},{"location":"reference/netdns-zh_CN/#expect","title":"Expect","text":"<p>\u4efb\u52a1\u6210\u529f\u6761\u4ef6\uff0c\u82e5\u4efb\u52a1\u7ed3\u679c\u6ca1\u6709\u8fbe\u5230\u671f\u671b\u6761\u4ef6\uff0c\u4efb\u52a1\u5931\u8d25</p> \u5b57\u6bb5 \u63cf\u8ff0 \u7ed3\u6784 \u9a8c\u8bc1 \u53d6\u503c \u9ed8\u8ba4\u503c meanAccessDelayInMs \u5e73\u5747\u5ef6\u65f6,\u5982\u679c\u6700\u7ec8\u7684\u7ed3\u679c \u8d85\u8fc7\u672c\u503c\uff0c\u4efb\u52a1\u4f1a\u5224\u5b9a\u4e3a\u5931\u8d25 int \u53ef\u9009 \u5927\u4e8e\u7b49\u4e8e 1 5000 successRate http\u8bf7\u6c42\u6210\u529f\u7387,\u5982\u679c\u6700\u7ec8\u7684\u7ed3\u679c \u5c0f\u4e8e\u672c\u503c\uff0c\u4efb\u52a1\u4f1a\u5224\u5b9a\u4e3a\u5931\u8d25 float \u53ef\u9009 0-1 1"},{"location":"reference/netdns-zh_CN/#targetuser","title":"TargetUser","text":"<p>\u6d4b\u8bd5\u7528\u6237\u81ea\u5b9a\u4e49 DNS server</p> \u5b57\u6bb5 \u63cf\u8ff0 \u7ed3\u6784 \u9a8c\u8bc1 \u53d6\u503c \u9ed8\u8ba4\u503c server DNS server \u5730\u5740 string \u5fc5\u586b port DNS server \u7aef\u53e3 int \u5fc5\u586b 1-65535"},{"location":"reference/netdns-zh_CN/#targetdns","title":"TargetDns","text":"<p>\u6d4b\u8bd5\u96c6\u7fa4\u5185 DNS server</p> \u5b57\u6bb5 \u63cf\u8ff0 \u7ed3\u6784 \u9a8c\u8bc1 \u53d6\u503c \u9ed8\u8ba4\u503c testIPv4 \u6d4b\u8bd5 IPv4 \u5730\u5740 \u8bf7\u6c42 A \u8bb0\u5f55 bool \u53ef\u9009 true,false true testIPv6 \u6d4b\u8bd5 IPv6 \u5730\u5740 \u8bf7\u6c42 AAAA \u8bb0\u5f55 bool \u53ef\u9009 true,false false serviceName \u96c6\u7fa4 DNS server service \u5730\u5740 string \u53ef\u9009 serviceNamespace \u96c6\u7fa4 DNS server service \u7aef\u53e3 string \u53ef\u9009"},{"location":"reference/netdns-zh_CN/#status","title":"status","text":"\u5b57\u6bb5 \u63cf\u8ff0 \u7ed3\u6784 \u53d6\u503c doneRound \u5b8c\u6210\u7684\u4efb\u52a1\u8f6e\u6570 int expectedRound \u671f\u671b\u6267\u884c\u7684\u8f6e\u6570 int finish \u4efb\u52a1\u662f\u5426\u5b8c\u6210 bool true\u3001false lastRoundStatus \u6700\u540e\u4e00\u8f6e\u4efb\u52a1\u72b6\u6001 string notstarted\u3001ongoing\u3001succeed\u3001fail history \u4efb\u52a1\u5386\u53f2 \u5143\u7d20\u4e3ahistory\u7684\u6570\u7ec4"},{"location":"reference/netdns-zh_CN/#history","title":"History","text":"\u5b57\u6bb5 \u63cf\u8ff0 \u7ed3\u6784 \u53d6\u503c roundNumber \u4efb\u52a1\u8f6e\u6570 int status \u4efb\u52a1\u72b6\u6001 string notstarted\u3001ongoing\u3001succeed\u3001fail startTimeStamp \u672c\u8f6e\u4efb\u52a1\u5f00\u59cb\u65f6\u95f4 string endTimeStamp \u672c\u8f6e\u4efb\u52a1\u7ed3\u675f\u65f6\u95f4 string duration \u672c\u8f6e\u4efb\u6267\u884c\u65f6\u95f4 string deadLineTimeStamp \u672c\u8f6e\u4efb\u52a1 deadline string failedAgentNodeList \u4efb\u52a1\u5931\u8d25\u7684 agent \u5143\u7d20\u4e3astring\u7684\u6570\u7ec4 succeedAgentNodeList \u4efb\u52a1\u6210\u529f\u7684 agent \u5143\u7d20\u4e3astring\u7684\u6570\u7ec4 notReportAgentNodeList \u6ca1\u6709\u4e0a\u4f20\u4efb\u52a1\u62a5\u544a\u7684 agent \u5143\u7d20\u4e3astring\u7684\u6570\u7ec4"},{"location":"reference/netdns/","title":"netdns","text":"<p>\u7b80\u4f53\u4e2d\u6587 | English</p>"},{"location":"reference/netdns/#basic-description","title":"Basic Description","text":"<p>For this kind of task, kdoctor-controller generates the corresponding agent and other resources. Each agent Pod sends a DNS request to the specified target and gets the success rate and average latency. It can specify a success condition to inform the result of success or failure.</p>"},{"location":"reference/netdns/#netdns-example","title":"netdns Example","text":""},{"location":"reference/netdns/#cluster-dns-server-check","title":"Cluster DNS Server Check","text":"<p>Send a corresponding request to a DNS server (CoreDNS) in a cluster to get the performance status of the DNS server in the cluster.</p> <pre><code>apiVersion: kdoctor.io/v1beta1\nkind: Netdns\nmetadata:\n  name: netdns-cluster\nspec:\n  agentSpec:\n    hostNetwork: false\n    kind: DaemonSet\n    terminationGracePeriodMinutes: 60\n  expect:\n    meanAccessDelayInMs: 1500\n    successRate: 1\n  request:\n    domain: kubernetes.default.svc.cluster.local\n    durationInSecond: 10\n    perRequestTimeoutInMS: 1000\n    protocol: udp\n    qps: 10\n  schedule:\n    roundNumber: 1\n    roundTimeoutMinute: 1\n    schedule: 0 1\n  target:\n    enableLatencyMetric: false\n    targetDns:\n      serviceName: kube-dns\n      serviceNamespace: kube-system\n      testIPv4: true\n      testIPv6: true\nstatus:\n  doneRound: 1\n  expectedRound: 1\n  finish: true\n  history:\n    - deadLineTimeStamp: \"2023-07-28T09:45:03Z\"\n      duration: 15.809063339s\n      endTimeStamp: \"2023-07-28T09:44:18Z\"\n      expectedActorNumber: 2\n      failedAgentNodeList: []\n      notReportAgentNodeList: []\n      roundNumber: 1\n      startTimeStamp: \"2023-07-28T09:44:03Z\"\n      status: succeed\n      succeedAgentNodeList:\n        - kdoctor-control-plane\n        - kdoctor-worker\n  lastRoundStatus: succeed\n</code></pre>"},{"location":"reference/netdns/#specify-dns-server-check","title":"Specify DNS Server Check","text":"<p>Send a corresponding request to a DNS server outside the cluster to get its performance status.</p> <pre><code>apiVersion: kdoctor.io/v1beta1\nkind: Netdns\nmetadata:\n  name: netdns- user\nspec:\n  expect:\n    meanAccessDelayInMs: 1500\n    successRate: 1\n  request:\n    domain: www.baidu.com\n    durationInSecond: 10\n    perRequestTimeoutInMS: 1000\n    protocol: udp\n    qps: 10\n  schedule:\n    roundNumber: 1\n    roundTimeoutMinute: 1\n    schedule: 0 1\n  target:\n    enableLatencyMetric: false\n    targetUser:\n      port: 53\n      server: 172.41.54.83\n</code></pre>"},{"location":"reference/netdns/#netdns-definition","title":"netdns Definition","text":""},{"location":"reference/netdns/#metadata","title":"Metadata","text":"Fields Description Structure Validation Name Name of the netdns Resource String Required"},{"location":"reference/netdns/#spec","title":"Spec","text":"Fields Description Structure Validation Take Values Default agentSpec Task Execution Agent Configuration agentSpec Optional Schedule Schedule Task Execution schedule Optional Request Request Configuration for Destination Address request Optional Target Request Target Settings Target Optional Expect Task Success Condition Judgment expect Optional"},{"location":"reference/netdns/#agentspec","title":"AgentSpec","text":"Fields Description Structure Validation Values Default Annotation Annotation of Agent Workload Map[string]String Optional kind Type of Agent Workload String Optional Deployment, DaemonSet DaemonSet deploymentReplicas The expected number of replicas when the agent workload type is deployment int Optional Greater than or equal to 0 0 Affinity Agent Workload Affinity labelSelector Optional env Agent Workload Environment Variable env Optional hostNetwork Whether or not the agent workload uses the host network Bool Optional True, false False Resources Agent Workload Resource Usage Configuration Resources Optional Limit cpu: 1000m,Memory:1024Mi terminationGracePeriodMinutes the minutes after a agent workload completes a task before it terminates int Optional Greater than or equal to 0 60"},{"location":"reference/netdns/#schedule","title":"Schedule","text":"Fields Description Structure Validation Values Defaults roundNumber Task Execution Rounds int Optional A value greater than or equal to -1 indicates indefinite execution, with -1 representing permanent execution. A value greater than 0 represents the number of rounds to be executed 1 roundTimeoutMinute Task timeout which needs to be greater than durationInSecond and task execution time int Optional Greater than or equal to 1 60"},{"location":"reference/netdns/#request","title":"Request","text":"Fields Description Structure Validation Values Defaults durationInSecond Duration of request send pressure for each round of tasks which is less than roundTimeoutMinute int Optional Greater than or equal to 1 2 perRequestTimeoutInMS Timeout per request, not greater than durationInSecond int Optional Greater than or equal to 1 500 QPS Requests per second per agent int Optional Greater than or equal to 1 5 Protocol Request Protocol String Optional UDP, TCP, TCP-TLS UDP <p>When using agent requests, all agents will make requests to the destination address, so the actual QPS received by the server is equal to the number of agents multiplied by the set QPS.</p>"},{"location":"reference/netdns/#target","title":"Target","text":"Fields Description Structures Validation Values Defaults targetUser DNS request to user-defined DNS server targetUser Optional True targetDns Make a DNS request to the cluster's DNS server (CoreDNS) targetDns Optional True enableLatencyMetric Statistics demo distribution, which increases memory usage when turned on Bool Optional True,false False"},{"location":"reference/netdns/#expect","title":"Expect","text":"<p>Task success condition. If the task result does not meet the expected condition, the task will fail.</p> Fields Description Structures Validation Values Default meanAccessDelayInMs The average delay. If the final result exceeds this value, the task will be judged as failed int Optional Greater than or equal to 1 5000 successRate Success rate of the HTTP request. If the final result is less than this value, the task will fail Float Optional 0-1 1"},{"location":"reference/netdns/#targetuser","title":"TargetUser","text":"<p>Test user customized DNS server</p> Fields Description Structure Validation Values Defaults Server DNS Server Address String Required Port DNS Server Port int Required 1-65535"},{"location":"reference/netdns/#targetdns","title":"TargetDns","text":"<p>Test the DNS server in a cluster</p> Fields Description Structure Validation Values Defaults testIPv4 Test IPv4 address request A record Bool Optional True,false True testIPv6 Test IPv6 address request AAAA record Bool Optional True,false False serviceName Cluster DNS Server Service Address String Optional serviceNamespace Cluster DNS Server Service Port String Optional"},{"location":"reference/netdns/#status","title":"Status","text":"Fields Description Structures Values doneRound Number of completed task rounds int expectedRound Number of rounds expected to be performed int Finish Whether the task is complete or not Bool True, false lastRoundStatus lastRoundStatus String Notstarted, on-going, succeed, fail History Task History Element is history array"},{"location":"reference/netdns/#history","title":"History","text":"Fields Description Structure Values roundNumber Task Round Number int Status Task Status String Notstarted, on-going, succeed, fail startTimeStamp Start of the current round of tasks String endTimeStamp End of the current round of tasks string duration Execution time of the current round of tasks string deadLineTimeStamp Deadline of the current round of tasks string failedAgentNodeList Agent whose tasks failed Array of elements as string succeedAgentNodeList Agent whose task succeeded Array of elements as string notReportAgentNodeList Agent who did not upload a task report Array of elements as string"},{"location":"reference/netreach-zh_CN/","title":"NetReach","text":"<p>English | \u7b80\u4f53\u4e2d\u6587</p>"},{"location":"reference/netreach-zh_CN/#_1","title":"\u57fa\u672c\u63cf\u8ff0","text":"<p>\u5bf9\u4e8e\u8fd9\u79cd\u4efb\u52a1\uff0ckdoctor-controller \u4f1a\u6839\u636e agentSpec \u751f\u6210\u5bf9\u5e94\u7684 agent \u7b49\u8d44\u6e90\uff0c\u6bcf\u4e00\u4e2a agent Pod \u90fd\u4f1a\u76f8\u4e92\u53d1\u9001 http \u8bf7\u6c42\uff0c\u8bf7\u6c42\u5730\u5740\u4e3a\u6bcf\u4e00\u4e2a agent \u7684 Pod IP\u3001service IP\u3001ingress IP \u7b49\u7b49\uff0c\u5e76\u83b7\u5f97\u6210\u529f\u7387\u548c\u5e73\u5747\u5ef6\u8fdf\u3002\u5b83\u53ef\u4ee5\u6307\u5b9a\u6210\u529f\u6761\u4ef6\u6765\u5224\u65ad\u7ed3\u679c\u662f\u5426\u6210\u529f\u3002\u5e76\u4e14\uff0c\u53ef\u4ee5\u901a\u8fc7\u805a\u5408API\u83b7\u53d6\u8be6\u7ec6\u7684\u62a5\u544a\u3002</p>"},{"location":"reference/netreach-zh_CN/#netreach_1","title":"NetReach \u793a\u4f8b","text":"<pre><code>apiVersion: kdoctor.io/v1beta1\nkind: NetReach\nmetadata:\n  name: netreach\nspec:\n  agentSpec:\n    hostNetwork: false\n    kind: DaemonSet\n    terminationGracePeriodMinutes: 60\n  expect:\n    meanAccessDelayInMs: 1500\n    successRate: 1\n  request:\n    durationInSecond: 10\n    perRequestTimeoutInMS: 1000\n    qps: 10\n  schedule:\n    roundNumber: 1\n    roundTimeoutMinute: 1\n    schedule: 0 1\n  target:\n    clusterIP: true\n    enableLatencyMetric: false\n    endpoint: true\n    ingress: true\n    ipv4: true\n    ipv6: true\n    loadBalancer: true\n    multusInterface: false\n    nodePort: true\nstatus:\n  doneRound: 1\n  expectedRound: 1\n  finish: true\n  history:\n    - deadLineTimeStamp: \"2023-07-28T09:59:12Z\"\n      duration: 15.462579243s\n      endTimeStamp: \"2023-07-28T09:58:27Z\"\n      expectedActorNumber: 2\n      failedAgentNodeList:\n        - kdoctor-worker\n        - kdoctor-control-plane\n      failureReason: some agents failed\n      notReportAgentNodeList: []\n      roundNumber: 1\n      startTimeStamp: \"2023-07-28T09:58:12Z\"\n      status: fail\n      succeedAgentNodeList: []\n  lastRoundStatus: fail\n</code></pre>"},{"location":"reference/netreach-zh_CN/#netreach_2","title":"NetReach \u5b9a\u4e49","text":""},{"location":"reference/netreach-zh_CN/#metadata","title":"Metadata","text":"\u5b57\u6bb5 \u63cf\u8ff0 \u7ed3\u6784 \u9a8c\u8bc1 name NetReach \u8d44\u6e90\u7684\u540d\u79f0 string \u5fc5\u586b"},{"location":"reference/netreach-zh_CN/#spec","title":"Spec","text":"\u5b57\u6bb5 \u63cf\u8ff0 \u7ed3\u6784 \u9a8c\u8bc1 \u53d6\u503c \u9ed8\u8ba4\u503c agentSpec \u4efb\u52a1\u6267\u884cagent \u914d\u7f6e agentSpec \u53ef\u9009 schedule \u8c03\u5ea6\u4efb\u52a1\u6267\u884c schedule \u53ef\u9009 request \u5bf9\u76ee\u6807\u5730\u5740\u8bf7\u6c42\u914d\u7f6e request \u53ef\u9009 target \u8bf7\u6c42\u76ee\u6807\u8bbe\u7f6e target \u53ef\u9009 expect \u4efb\u52a1\u6210\u529f\u6761\u4ef6\u5224\u65ad expect \u53ef\u9009"},{"location":"reference/netreach-zh_CN/#agentspec","title":"AgentSpec","text":"\u5b57\u6bb5 \u63cf\u8ff0 \u7ed3\u6784 \u9a8c\u8bc1 \u53d6\u503c \u9ed8\u8ba4\u503c annotation agent \u5de5\u4f5c\u8d1f\u8f7d\u7684 annotation map[string]string \u53ef\u9009 kind agent \u5de5\u4f5c\u8d1f\u8f7d\u7684\u7c7b\u578b string \u53ef\u9009 Deployment\u3001DaemonSet DaemonSet deploymentReplicas agent \u5de5\u4f5c\u8d1f\u8f7d\u7c7b\u578b\u4e3a deployment \u65f6\u7684\u671f\u671b\u526f\u672c\u6570 int \u53ef\u9009 \u5927\u4e8e\u7b49\u4e8e 0 0 affinity agent \u5de5\u4f5c\u8d1f\u8f7d\u4eb2\u548c\u6027 labelSelector \u53ef\u9009 env agent \u5de5\u4f5c\u8d1f\u8f7d\u73af\u5883\u53d8\u91cf env \u53ef\u9009 hostNetwork agent \u5de5\u4f5c\u8d1f\u8f7d\u662f\u5426\u4f7f\u7528\u5bbf\u4e3b\u673a\u7f51\u7edc bool \u53ef\u9009 true\u3001false false resources agent \u5de5\u4f5c\u8d1f\u8f7d\u8d44\u6e90\u4f7f\u7528\u914d\u7f6e resources \u53ef\u9009 limit cpu:1000m,memory:1024Mi terminationGracePeriodMinutes agent \u5de5\u4f5c\u8d1f\u8f7d\u5b8c\u6210\u4efb\u52a1\u540e\u591a\u5c11\u5206\u949f\u4e4b\u540e\u7ec8\u6b62 int \u53ef\u9009 \u5927\u4e8e\u7b49\u4e8e 0 60"},{"location":"reference/netreach-zh_CN/#schedule","title":"Schedule","text":"\u5b57\u6bb5 \u63cf\u8ff0 \u7ed3\u6784 \u9a8c\u8bc1 \u53d6\u503c \u9ed8\u8ba4\u503c roundNumber \u4efb\u52a1\u6267\u884c\u8f6e\u6570 int \u53ef\u9009 \u5927\u4e8e\u7b49\u4e8e-1\uff0c\u4e3a -1 \u65f6\u8868\u793a\u6c38\u4e45\u6267\u884c,\u5927\u4e8e 0 \u8868\u793a\u5c06\u8981\u6267\u884c\u7684\u8f6e\u6570 1 schedule \u4efb\u52a1\u6267\u884c\u65f6\u95f4, \u6267\u884c\u65f6\u95f4\u5e94\u5c0f\u4e8eroundTimeoutMinute string \u53ef\u9009 \u652f\u6301 linux crontab \u4e0e\u95f4\u9694\u6cd5\u4e24\u79cd\u5199\u6cd5linux crontab \uff1a */1 * * * * \u8868\u793a\u6bcf\u5206\u949f\u6267\u884c\u4e00\u6b21 \u95f4\u9694\u6cd5\uff1a\u4e66\u5199\u683c\u5f0f\u4e3a \u201cM N\u201d \uff0cM\u53d6\u503c\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c\u8868\u793a\u591a\u5c11\u5206\u949f\u4e4b\u540e\u5f00\u542f\u4efb\u52a1\uff0cN\u53d6\u503c\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c\u8868\u793a\u6bcf\u4e00\u8f6e\u4efb\u52a1\u7684\u95f4\u9694\u591a\u5c11\u5206\u949f\u6267\u884c\uff0c\u4f8b\u5982 \u201c0 1\u201d \u8868\u793a\u7acb\u5373\u5f00\u59cb\u4efb\u52a1\uff0c\u6bcf\u8f6e\u4efb\u52a1\u95f4\u96941min \"0 1\" roundTimeoutMinute \u4efb\u52a1\u8d85\u65f6\u65f6\u95f4\uff0c\u9700\u8981\u5927\u4e8e durationInSecond \u548c \u4efb\u52a1\u6267\u884c\u65f6\u95f4 int \u53ef\u9009 \u5927\u4e8e\u7b49\u4e8e 1 60"},{"location":"reference/netreach-zh_CN/#request","title":"Request","text":"\u5b57\u6bb5 \u63cf\u8ff0 \u7ed3\u6784 \u9a8c\u8bc1 \u53d6\u503c \u9ed8\u8ba4\u503c durationInSecond \u6bcf\u8f6e\u4efb\u52a1\u7684\u8bf7\u6c42\u53d1\u538b\u7684\u6301\u7eed\u65f6\u95f4\uff0c\u5c0f\u4e8eroundTimeoutMinute int \u53ef\u9009 \u5927\u4e8e\u7b49\u4e8e 1 2 perRequestTimeoutInMS \u6bcf\u4e2a\u8bf7\u6c42\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u4e0d\u53ef\u5927\u4e8e durationInSecond int \u53ef\u9009 \u5927\u4e8e\u7b49\u4e8e 1 500 qps \u6bcf\u4e00\u4e2a agent \u6bcf\u79d2\u8bf7\u6c42\u6570\u91cf int \u53ef\u9009 \u5927\u4e8e\u7b49\u4e8e 1 5 <p>\u6ce8\u610f\uff1a\u4f7f\u7528 agent \u8bf7\u6c42\u65f6\uff0c\u6240\u6709\u7684 agent \u90fd\u4f1a\u5411\u76ee\u6807\u5730\u5740\u8fdb\u884c\u8bf7\u6c42\uff0c\u56e0\u6b64\u5b9e\u9645 server \u63a5\u6536\u7684 qps \u7b49\u4e8e agent \u6570\u91cf * \u8bbe\u7f6e\u7684qps\u3002</p>"},{"location":"reference/netreach-zh_CN/#target","title":"Target","text":"\u5b57\u6bb5 \u63cf\u8ff0 \u7ed3\u6784 \u9a8c\u8bc1 \u53d6\u503c \u9ed8\u8ba4\u503c clusterIP \u6d4b\u8bd5\u96c6\u7fa4 service cluster IP bool \u53ef\u9009 true,false true endpoint \u6d4b\u8bd5\u96c6\u7fa4 Pod endpoint bool \u53ef\u9009 true,false true multusInterface \u6d4b\u8bd5\u96c6\u7fa4 Pod multus \u591a\u7f51\u5361 IP bool \u53ef\u9009 true,false false IPv4 \u6d4b\u8bd5 IPv4 bool \u53ef\u9009 true,false true IPv6 \u6d4b\u8bd5 IPv6 bool \u53ef\u9009 true,false false ingress \u6d4b\u8bd5 ingress \u5730\u5740 bool \u53ef\u9009 true,false false nodePort \u6d4b\u8bd5 service node port bool \u53ef\u9009 true,false true enableLatencyMetric \u7edf\u8ba1\u6f14\u793a\u5206\u5e03,\u5f00\u542f\u540e\u4f1a\u589e\u52a0\u5185\u5b58\u4f7f\u7528\u91cf bool \u53ef\u9009 true,false false"},{"location":"reference/netreach-zh_CN/#expect","title":"Expect","text":"<p>\u4efb\u52a1\u6210\u529f\u6761\u4ef6\uff0c\u82e5\u4efb\u52a1\u7ed3\u679c\u6ca1\u6709\u8fbe\u5230\u671f\u671b\u6761\u4ef6\uff0c\u4efb\u52a1\u5931\u8d25</p> \u5b57\u6bb5 \u63cf\u8ff0 \u7ed3\u6784 \u9a8c\u8bc1 \u53d6\u503c \u9ed8\u8ba4\u503c meanAccessDelayInMs \u5e73\u5747\u5ef6\u65f6,\u5982\u679c\u6700\u7ec8\u7684\u7ed3\u679c \u8d85\u8fc7\u672c\u503c\uff0c\u4efb\u52a1\u4f1a\u5224\u5b9a\u4e3a\u5931\u8d25 int \u53ef\u9009 \u5927\u4e8e\u7b49\u4e8e 1 5000 successRate http\u8bf7\u6c42\u6210\u529f\u7387,\u5982\u679c\u6700\u7ec8\u7684\u7ed3\u679c \u5c0f\u4e8e\u672c\u503c\uff0c\u4efb\u52a1\u4f1a\u5224\u5b9a\u4e3a\u5931\u8d25 float \u53ef\u9009 0-1 1"},{"location":"reference/netreach-zh_CN/#status","title":"status","text":"\u5b57\u6bb5 \u63cf\u8ff0 \u7ed3\u6784 \u53d6\u503c doneRound \u5b8c\u6210\u7684\u4efb\u52a1\u8f6e\u6570 int expectedRound \u671f\u671b\u6267\u884c\u7684\u8f6e\u6570 int finish \u4efb\u52a1\u662f\u5426\u5b8c\u6210 bool true\u3001false lastRoundStatus \u6700\u540e\u4e00\u8f6e\u4efb\u52a1\u72b6\u6001 string notstarted\u3001ongoing\u3001succeed\u3001fail history \u4efb\u52a1\u5386\u53f2 \u5143\u7d20\u4e3ahistory\u7684\u6570\u7ec4"},{"location":"reference/netreach-zh_CN/#history","title":"History","text":"\u5b57\u6bb5 \u63cf\u8ff0 \u7ed3\u6784 \u53d6\u503c roundNumber \u4efb\u52a1\u8f6e\u6570 int status \u4efb\u52a1\u72b6\u6001 string notstarted\u3001ongoing\u3001succeed\u3001fail startTimeStamp \u672c\u8f6e\u4efb\u52a1\u5f00\u59cb\u65f6\u95f4 string endTimeStamp \u672c\u8f6e\u4efb\u52a1\u7ed3\u675f\u65f6\u95f4 string duration \u672c\u8f6e\u4efb\u6267\u884c\u65f6\u95f4 string deadLineTimeStamp \u672c\u8f6e\u4efb\u52a1 deadline string failedAgentNodeList \u4efb\u52a1\u5931\u8d25\u7684 agent \u5143\u7d20\u4e3astring\u7684\u6570\u7ec4 succeedAgentNodeList \u4efb\u52a1\u6210\u529f\u7684 agent \u5143\u7d20\u4e3astring\u7684\u6570\u7ec4 notReportAgentNodeList \u6ca1\u6709\u4e0a\u4f20\u4efb\u52a1\u62a5\u544a\u7684 agent \u5143\u7d20\u4e3astring\u7684\u6570\u7ec4"},{"location":"reference/netreach/","title":"NetReach","text":"<p>\u7b80\u4f53\u4e2d\u6587 | English</p>"},{"location":"reference/netreach/#basic-description","title":"Basic description","text":"<p>For this kind of task, kdoctor-controller will generate corresponding agent and other resources. Each agent Pod sends http requests to each other with the request address of each agent's Pod IP, service IP, ingress IP and so on, and obtains the success rate and average latency. It can specify the success condition to determine whether the result is successful or not. Detailed reports can be obtained through the aggregation API.</p>"},{"location":"reference/netreach/#netreach-example","title":"NetReach example","text":"<pre><code>apiVersion: kdoctor.io/v1beta1\nkind: NetReach\nmetadata:\n  name: netreach\nspec:\n  agentSpec:\n    hostNetwork: false\n    kind: DaemonSet\n    terminationGracePeriodMinutes: 60\n  expect:\n    meanAccessDelayInMs: 1500\n    successRate: 1\n  request:\n    durationInSecond: 10\n    perRequestTimeoutInMS: 1000\n    qps: 10\n  schedule:\n    roundNumber: 1\n    roundTimeoutMinute: 1\n    schedule: 0 1\n  target:\n    clusterIP: true\n    enableLatencyMetric: false\n    endpoint: true\n    ingress: true\n    ipv4: true\n    ipv6: true\n    loadBalancer: true\n    multusInterface: false\n    nodePort: true\nstatus:\n  doneRound: 1\n  expectedRound: 1\n  finish: true\n  history:\n    - deadLineTimeStamp: \"2023-07-28T09:59:12Z\"\n      duration: 15.462579243s\n      endTimeStamp: \"2023-07-28T09:58:27Z\"\n      expectedActorNumber: 2\n      failedAgentNodeList:\n        - kdoctor-worker\n        - kdoctor-control-plane\n      failureReason: some agents failed\n      notReportAgentNodeList: []\n      roundNumber: 1\n      startTimeStamp: \"2023-07-28T09:58:12Z\"\n      status: fail\n      succeedAgentNodeList: []\n  lastRoundStatus: fail\n</code></pre>"},{"location":"reference/netreach/#netreach-definition","title":"NetReach Definition","text":""},{"location":"reference/netreach/#metadata","title":"Metadata","text":"Fields Description Structure Validation Name Name of the NetReach Resource String Required"},{"location":"reference/netreach/#spec","title":"Spec","text":"Fields Description Structure Validation Values Default agentSpec Task Execution Agent Configuration agentSpec Optional Schedule Schedule Task Execution schedule Optional Request Request Configuration for Destination Address request Optional Target Request Target Settings target Optional Expect Task Success Condition Judgment expect Optional"},{"location":"reference/netreach/#agentspec","title":"AgentSpec","text":"Fields Description Structure Validation Values Default Annotation Annotation of Agent Workload Map[string]String Optional kind Type of Agent Workload String Optional Deployment, DaemonSet DaemonSet deploymentReplicas The expected number of replicas when the agent workload type is deployment int Optional Greater than or equal to 0 0 Affinity Agent Workload Affinity labelSelector Optional env Agent Workload Environment Variable env Optional hostNetwork Whether or not the agent workload uses the host network Bool Optional True, false False Resources Agent Workload Resource Usage Configuration Resources Optional Limit cpu: 1000m,Memory:1024Mi terminationGracePeriodMinutes the minutes after a agent workload completes a task before it terminates int Optional Greater than or equal to 0 60"},{"location":"reference/netreach/#schedule","title":"Schedule","text":"Fields Description Structure Validation Values Defaults roundNumber Task Execution Rounds int Optional A value greater than or equal to -1 indicates indefinite execution, with -1 representing permanent execution. A value greater than 0 represents the number of rounds to be executed 1 roundTimeoutMinute Task timeout which needs to be greater than durationInSecond and task execution time int Optional Greater than or equal to 1 60"},{"location":"reference/netreach/#request","title":"Request","text":"Fields Description Structure Validation Values Defaults durationInSecond Duration of request send pressure for each round of tasks which is less than roundTimeoutMinute int Optional Greater than or equal to 1 2 perRequestTimeoutInMS Timeout per request, not greater than durationInSecond int Optional Greater than or equal to 1 500 QPS Requests per second per agent int Optional Greater than or equal to 1 5 <p>When using agent requests, all agents will make requests to the destination address, so the actual QPS received by the server is equal to the number of agents multiplied by the set QPS.</p>"},{"location":"reference/netreach/#target","title":"Target","text":"Fields Descriptions Structures Validations Values Defaults ClusterIP Test cluster service's cluster IP Bool Optional True,false True Endpoint Test cluster Pod endpoint Bool Optional True,false True multusInterface Test cluster Pod Multus multi-NIC IP Bool Optional True,false False IPv4 Test IPv4 Bool Optional True,false True IPv6 Test IPv6 Bool Optional True,false False Ingress Test Ingress Address Bool Optional True,false False nodePort Test Service Node Port Bool Optional True,false True enableLatencyMetric Statistics demo distribution, which increases memory usage when turned on Bool Optional True,false False"},{"location":"reference/netreach/#expect","title":"Expect","text":"<p>Task success condition. If the task result does not meet the expected condition, the task will fail.</p> Fields Description Structures Validation Values Default meanAccessDelayInMs The average delay. If the final result exceeds this value, the task will be judged as failed int Optional Greater than or equal to 1 5000 successRate Success rate of the HTTP request. If the final result is less than this value, the task will fail Float Optional 0-1 1"},{"location":"reference/netreach/#status","title":"status","text":"Fields Description Structures Values doneRound Number of completed task rounds int expectedRound Number of rounds expected to be performed int Finish Whether the task is complete or not Bool True, false lastRoundStatus lastRoundStatus String Notstarted, on-going, succeed, fail History Task History Element is history array"},{"location":"reference/netreach/#history","title":"History","text":"Fields Description Structure Values roundNumber Task Round Number int Status Task Status String Notstarted, on-going, succeed, fail startTimeStamp Start of the current round of tasks String endTimeStamp End of the current round of tasks string duration Execution time of the current round of tasks string deadLineTimeStamp Deadline of the current round of tasks string failedAgentNodeList Agent whose tasks failed Array of elements as string succeedAgentNodeList Agent whose task succeeded Array of elements as string notReportAgentNodeList Agent who did not upload a task report Array of elements as string"},{"location":"reference/report/","title":"Report","text":""},{"location":"reference/report/#agent-report","title":"Agent Report","text":"<p>When agent finish task, it saves report to <code>/report</code> with name fmt.Sprintf(\"%s_%s_round%d_%s_%s\", kindName, taskName, roundNumber, nodeName, suffix). The report will be automatically deleted with age <code>spec.schedulePlan.TimeoutMinute + 5</code> minutes. In this interval,  the controller Pod will collect this report and save to <code>/report</code> of controller Pod.</p>"},{"location":"reference/report/#controller-report","title":"Controller Report","text":"<p>When task finishes, it saves report to <code>/report</code> with name fmt.Sprintf(\"%s_%s_round%d_%s_%s\", kindName, taskName, roundNumber, nodeName, suffix). It also collects all agent report and  saves report to <code>/report</code>. All files in <code>/report</code> of controller will survive with max age maxAgeInDay(default 30 days). It could be adjusted in the configmap.</p> <p>The controller could save reports to host path or PVC.</p>"},{"location":"usage/_feature_example/","title":"\u67d0\u529f\u80fd","text":""},{"location":"usage/_feature_example/#_2","title":"\u4ecb\u7ecd","text":"<p>\u672c\u6587\u4e3a\u4e86\u6f14\u793a\u4ec0\u4e48\uff0c\u5b83\u7684\u5e94\u7528\u573a\u666f</p>"},{"location":"usage/_feature_example/#_3","title":"\u9879\u76ee\u529f\u80fd","text":"<p>\u672c\u9879\u76ee\u6709\u4ec0\u4e48\u529f\u80fd\uff0c\u5b83\u4e3a\u4ec0\u4e48\u80fd\u89e3\u51b3\u95ee\u9898\uff0c\u529f\u80fd\u7684\u5e94\u7528\u573a\u666f\uff0c\u529f\u80fd\u5b9e\u65bd\u7684\u9650\u5236\u6709\u54ea\u4e9b</p>"},{"location":"usage/_feature_example/#_4","title":"\u5b9e\u65bd\u8981\u6c42","text":"<p>\u5b89\u88c5\u8981\u6c42\uff0c\u5982 \u5185\u6838\u9650\u5236\u3001K8S\u7248\u672c\u3001\u7b2c\u4e09\u65b9\u9879\u76ee\u7248\u672c\u7b49\uff0c\u672c\u9879\u76ee\u5b89\u88c5\u65f6\u54ea\u4e9b\u9009\u578b\u8981\u6253\u5f00\u6216\u5173\u95ed</p>"},{"location":"usage/_feature_example/#_5","title":"\u6b65\u9aa4","text":"<p>step by step \u5c0f\u767d\u53ef\u5b9e\u65bd\uff0c\u6bcf\u4e00\u6b65\u9aa4\u7684\u7ed3\u679c\u786e\u8ba4\u548c\u72b6\u6001\u67e5\u770b(\u7528\u4e8e\u6392\u969c)\uff0c\u7279\u6b8a\u8bf4\u660e\uff0cyaml \u6709\u5bf9\u5e94\u7684\u5de5\u7a0b\u6587\u4ef6</p>"},{"location":"usage/_install_example/","title":"\u5b89\u88c5\u6587\u6863","text":""},{"location":"usage/_install_example/#_2","title":"\u4ecb\u7ecd","text":"<p>\u672c\u6587\u8bf4\u660e\u4e3a\u4e86\u5b89\u88c5\u51fa\u4ec0\u4e48\u6837\u7684\u4e00\u5957\u96c6\u7fa4\uff0c\u5b83\u7684\u4ef7\u503c\u662f\u4ec0\u4e48</p>"},{"location":"usage/_install_example/#_3","title":"\u5b9e\u65bd\u8981\u6c42","text":"<p>\u5b89\u88c5\u8981\u6c42\uff0c\u5982 \u5185\u6838\u9650\u5236\u3001K8S\u7248\u672c\u3001\u7b2c\u4e09\u65b9\u9879\u76ee\u7248\u672c\u7b49</p>"},{"location":"usage/_install_example/#_4","title":"\u6b65\u9aa4","text":"<p>step by step \u5c0f\u767d\u53ef\u5b9e\u65bd\uff0c\u6bcf\u4e00\u6b65\u9aa4\u7684\u7ed3\u679c\u786e\u8ba4\u548c\u72b6\u6001\u67e5\u770b\uff0c\u7279\u6b8a\u8bf4\u660e\uff0cyaml \u6709\u5bf9\u5e94\u7684\u5de5\u7a0b\u6587\u4ef6</p> <p>\u53ea\u8c08\u5b89\u88c5\uff0c\u786e\u8ba4\u5b89\u88c5\u6210\u529f\u72b6\u6001</p>"},{"location":"usage/apphttphealthy-zh_CN/","title":"AppHttpHealthy","text":"<p>English | \u7b80\u4f53\u4e2d\u6587</p>"},{"location":"usage/apphttphealthy-zh_CN/#_1","title":"\u4ecb\u7ecd","text":"<p>\u5bf9\u4e8e\u8fd9\u79cd\u4efb\u52a1\uff0c kdoctor-controller \u4f1a\u6839\u636e agentSpec \u751f\u6210\u5bf9\u5e94\u7684 agent \u7b49\u8d44\u6e90 \uff0c\u6bcf\u4e00\u4e2a agent Pod \u90fd\u4f1a\u5411\u6307\u5b9a\u7684 DNS server \u53d1\u9001 DNS \u8bf7\u6c42\uff0c\u9ed8\u8ba4\u5e76\u53d1\u91cf\u4e3a 50 \u53ef\u8986\u76d6\u591a\u526f\u672c\u60c5\u51b5\uff0c\u5e76\u53d1\u91cf\u53ef\u5728 kdoctor \u7684 configmap \u4e2d\u8bbe\u7f6e\uff0c\u5e76\u83b7\u5f97\u6210\u529f\u7387\u548c\u5e73\u5747\u5ef6\u8fdf\u3002\u6839\u636e\u6210\u529f\u6761\u4ef6\u6765\u5224\u65ad\u7ed3\u679c\u662f\u5426\u6210\u529f\u3002\u5e76\u4e14\uff0c\u53ef\u4ee5\u901a\u8fc7\u805a\u5408 API \u83b7\u53d6\u8be6\u7ec6\u7684\u62a5\u544a\u3002</p> <ol> <li> <p>\u5e94\u7528\u573a\u666f\uff1a</p> <ul> <li>\u6d4b\u8bd5\u8fde\u901a\u6027\uff0c\u786e\u8ba4\u6307\u5b9a\u5e94\u7528\u80fd\u591f\u88ab\u96c6\u7fa4\u7684\u6bcf\u4e00\u4e2a\u89d2\u843d\u8bbf\u95ee\u5230</li> <li>\u5927\u89c4\u6a21\u96c6\u7fa4\u6d4b\u8bd5\uff0c\u6a21\u62df\u66f4\u591a\u7684 client \u6570\u91cf\uff0c\u4ee5\u80fd\u591f\u4ea7\u751f\u66f4\u5927\u7684\u538b\u529b\uff0c\u6d4b\u8bd5\u5e94\u7528\u7684\u6297\u538b\u80fd\u529b\uff0c\u6a21\u62df\u66f4\u591a\u7684\u6e90 IP \u6765\u4ea7\u751f\u66f4\u591a\u7684\u5e94\u7528\u4f1a\u8bdd\uff0c\u6d4b\u8bd5\u5e94\u7528\u7684\u8d44\u6e90\u9650\u5236\u3002</li> <li>\u7ed9\u6307\u5b9a\u5e94\u7528\u6ce8\u5165\u538b\u529b\uff0c\u914d\u5408\u7070\u5ea6\u53d1\u5e03\u3001\u6df7\u6c8c\u6d4b\u8bd5\u3001bug \u590d\u73b0\u7b49\u76ee\u7684</li> <li>\u6d4b\u8bd5\u96c6\u7fa4\u5916\u90e8\u670d\u52a1\uff0c\u786e\u8ba4\u96c6\u7fa4 egress \u5de5\u4f5c\u6b63\u5e38</li> </ul> </li> <li> <p>\u5173\u4e8e AppHttpHealthy CRD \u7684\u66f4\u591a\u63cf\u8ff0\uff0c\u53ef\u53c2\u8003AppHttpHealthy</p> </li> <li> <p>\u529f\u80fd\u5217\u8868:</p> <ul> <li>\u652f\u6301 HTTP\u3001HTTPS\u3001HTTP2\uff0c\u80fd\u591f\u5b9a\u4e49 header\u3001body</li> </ul> </li> </ol>"},{"location":"usage/apphttphealthy-zh_CN/#_2","title":"\u4f7f\u7528\u6b65\u9aa4","text":"<p>\u63a5\u4e0b\u6765\u5c06\u5c55\u793a <code>AppHttpHealthy</code> \u7684\u4f7f\u7528\u793a\u4f8b</p>"},{"location":"usage/apphttphealthy-zh_CN/#kdoctor","title":"\u5b89\u88c5 kdoctor","text":"<p>\u53c2\u7167\u5b89\u88c5\u6559\u7a0b\u5b89\u88c5 kdoctor</p>"},{"location":"usage/apphttphealthy-zh_CN/#server","title":"\u5b89\u88c5\u6d4b\u8bd5 server (\u9009\u505a)","text":"<p>kdoctor \u5b98\u65b9\u4ed3\u5e93\u4e2d\u5305\u542b\u4e86\u4e00\u4e2a\u540d\u4e3a server \u7684\u5e94\u7528\uff0c\u5185\u5305\u542b http server\uff0chttps server, DNS server\uff0c\u53ef\u7528\u6765\u6d4b\u8bd5 kdoctor \u529f\u80fd\uff0c\u82e5\u5b58\u5728\u5176\u4ed6\u6d4b\u8bd5\u7684 server \u53ef\u8df3\u8fc7\u5b89\u88c5\u3002</p> <pre><code>helm repo add kdoctor https://kdoctor-io.github.io/kdoctor\nhelm repo update kdoctor\nhelm install server kdoctor/server -n kdoctor --wait --debug --create-namespace \n</code></pre> <p>\u67e5\u770b\u6d4b\u8bd5 server \u72b6\u6001</p> <pre><code>kubectl get pod -n kdoctor -owide\nNAME                                READY   STATUS    RESTARTS   AGE   IP            NODE                    NOMINATED NODE   READINESS GATES\nserver-7649566ff9-dv4jc   1/1     Running   0          76s   172.40.1.45   kdoctor-worker          &lt;none&gt;           &lt;none&gt;\nserver-7649566ff9-qc5dh   1/1     Running   0          76s   172.40.0.35   kdoctor-control-plane   &lt;none&gt;           &lt;none&gt;\n</code></pre> <p>\u83b7\u53d6\u6d4b\u8bd5 server \u7684 service \u5730\u5740</p> <pre><code>kubectl get service -n kdoctor\nNAME               TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)                                AGE\nserver   ClusterIP   172.41.71.0   &lt;none&gt;        80/TCP,443/TCP,53/UDP,53/TCP,853/TCP   2m31s\n</code></pre>"},{"location":"usage/apphttphealthy-zh_CN/#apphttphealthy_1","title":"\u521b\u5efa AppHttpHealthy","text":"<p>\u521b\u5efa http <code>AppHttpHealthy</code> \uff0c\u8be5\u4efb\u52a1\u5c06\u6267\u884c\u4e00\u8f6e\u6301\u7eed 10s \u7684\u4efb\u52a1\uff0c\u4efb\u52a1\u4f1a\u5411\u6307\u5b9a\u7684 server \u4ee5 QPS \u4e3a 10 \u7684\u901f\u5ea6\u53d1\u9001 Get \u8bf7\u6c42\uff0c\u5e76\u4e14\u7acb\u5373\u6267\u884c\u3002</p> <p>\u8fd9\u91cc\u4f7f\u7528 server \u7684 service \u5730\u5740\uff0c\u82e5\u6709\u5176\u4ed6 server \u5730\u5740 \u53ef\u4f7f\u7528\u5176\u4ed6 server \u5730\u5740\u3002</p> <pre><code>SERVER=\"172.41.71.0\"\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: kdoctor.io/v1beta1\nkind: AppHttpHealthy\nmetadata:\n  name: http1\nspec:\n  request:\n    durationInSecond: 10\n    perRequestTimeoutInMS: 1000\n    qps: 10\n  schedule:\n    roundNumber: 1\n    roundTimeoutMinute: 1\n    schedule: 0 1\n  expect:\n    meanAccessDelayInMs: 1000\n    successRate: 1\n  target:\n    host: http://${SERVER}\n    method: GET\nEOF\n</code></pre>"},{"location":"usage/apphttphealthy-zh_CN/#_3","title":"\u67e5\u770b\u4efb\u52a1\u72b6\u6001","text":"<p>\u5f53\u6267\u884c\u5b8c\u6210\u4e00\u8f6e\u540e\u5c31\u53ef\u4ee5\u4f7f\u7528 kdoctor \u805a\u5408 api \u67e5\u770b\u5f53\u524d\u8f6e\u7684\u62a5\u544a\uff0c\u5f53 FINISH \u4e3a true \u65f6\u4efb\u52a1\u5168\u90e8\u5b8c\u6210\uff0c\u53ef\u67e5\u770b\u6574\u4f53\u62a5\u544a</p> <pre><code>kubectl get apphttphealthy\nNAME        FINISH   EXPECTEDROUND   DONEROUND   LASTROUNDSTATUS   SCHEDULE\nhttp        true     1               1           succeed           0 1\n</code></pre> <ul> <li>FINISH\uff1a\u4efb\u52a1\u662f\u5426\u5b8c\u6210</li> <li>EXPECTEDROUND\uff1a\u5e0c\u671b\u4efb\u52a1\u6267\u884c\u8f6e\u6570</li> <li>DONEROUND\uff1a\u5f53\u524d\u6267\u884c\u5b8c\u6210\u8f6e\u6570</li> <li>LASTROUNDSTATUS\uff1a\u6700\u540e\u4e00\u8f6e\u4efb\u52a1\u6267\u884c\u60c5\u51b5</li> <li>SCHEDULE\uff1a\u4efb\u52a1\u7684\u8c03\u5ea6\u89c4\u5219</li> </ul>"},{"location":"usage/apphttphealthy-zh_CN/#_4","title":"\u67e5\u770b\u4efb\u52a1\u62a5\u544a","text":"<ol> <li> <p>\u67e5\u770b\u5df2\u6709\u62a5\u544a</p> <p><code>shell kubectl get kdoctorreport NAME        CREATED AT http        0001-01-01T00:00:00Z</code></p> </li> <li> <p>\u67e5\u770b\u5177\u4f53\u4efb\u52a1\u62a5\u544a</p> <p>\u8282\u70b9 kdoctor-control-plane \u548c\u8282\u70b9 kdoctor-worker \u4e0a agent \u5206\u522b\u90fd\u6267\u884c\u4e00\u8f6e\u53d1\u538b\u540e\uff0c\u5c06 agent \u62a5\u544a\u805a\u5408\u800c\u6210\u3002</p> <p><code>shell kubectl get kdoctorreport http -oyaml apiVersion: system.kdoctor.io/v1beta1 kind: KdoctorReport metadata:   creationTimestamp: null   name: http spec:   FailedRoundNumber: null   FinishedRoundNumber: 1   Report:   - NodeName: kdoctor-control-plane     HttpAppHealthyTask:       Detail:       - MeanDelay: 10.317307         Metrics:           Duration: 11.022081662s           EndTime: \"2023-07-31T07:25:23Z\"           Errors: {}           Latencies:             MaxInMs: 0             MeanInMs: 10.317307             MinInMs: 0             P50InMs: 0             P90InMs: 0             P95InMs: 0             P99InMs: 0           RequestCounts: 104           StartTime: \"2023-07-31T07:25:12Z\"           StatusCodes:             \"200\": 104           SuccessCounts: 104           TPS: 9.435604197939574           TotalDataSize: 40040 byte         Succeed: true         SucceedRate: 1         TargetMethod: GET         TargetName: HttpAppHealthy target         TargetUrl: http://172.41.71.0       Succeed: true       TargetNumber: 1       TargetType: HttpAppHealthy       MaxCPU: 30.651%       MaxMemory: 97.00MB     HttpAppHealthyTaskSpec:     ...     PodName: kdoctor-agent-fmr9m     ReportType: agent test report     RoundDuration: 11.038965547s     RoundNumber: 1     RoundResult: succeed     StartTimeStamp: \"2023-07-31T07:25:12Z\"     EndTimeStamp: \"2023-07-31T07:25:23Z\"     TaskName: apphttphealthy.http     TaskType: AppHttpHealthy   - NodeName: kdoctor-worker     HttpAppHealthyTask:       Detail:       - MeanDelay: 10.548077         Metrics:           ...         Succeed: true         SucceedRate: 1         TargetMethod: GET         TargetName: HttpAppHealthy target         TargetUrl: http://172.41.71.0       Succeed: true       TargetNumber: 1       TargetType: HttpAppHealthy     HttpAppHealthyTaskSpec:     ...     PodName: kdoctor-agent-s468h     ReportType: agent test report     RoundDuration: 11.034140236s     RoundNumber: 1     RoundResult: succeed     StartTimeStamp: \"2023-07-31T07:25:12Z\"     EndTimeStamp: \"2023-07-31T07:25:23Z\"     TaskName: apphttphealthy.http     TaskType: AppHttpHealthy   ReportRoundNumber: 1   RoundNumber: 1   Status: Finished   TaskName: http   TaskType: AppHttpHealthy</code></p> </li> </ol> <p>\u82e5\u62a5\u544a\u4e0e\u9884\u671f\u7ed3\u679c\u4e0d\u7b26\u5408\uff0c\u53ef\u5173\u6ce8\u62a5\u544a\u4e2d\u7684 MaxCPU\u548c MaxMemory \u5b57\u6bb5\uff0c\u5bf9\u6bd4 agent \u8d44\u6e90\u662f\u5426\u5145\u8db3\uff0c\u8c03\u6574 agent \u7684\u8d44\u6e90\u9650\u5236\u3002</p>"},{"location":"usage/apphttphealthy-zh_CN/#_5","title":"\u5176\u4ed6\u5e38\u7528\u793a\u4f8b","text":"<p>\u4e0b\u9762\u662f\u643a\u5e26 body \u7684 http \u8bf7\u6c42\u793a\u4f8b\u548c https \u7684\u8bf7\u6c42\u793a\u4f8b</p> <ol> <li> <p>\u521b\u5efa\u5e26\u6709 body \u7684 http <code>AppHttpHealthy</code>\uff0c\u8be5\u4efb\u52a1\u5c06\u6267\u884c\u4e00\u8f6e\u6301\u7eed 10s \u7684\u4efb\u52a1\uff0c\u4efb\u52a1\u4f1a\u5411\u6307\u5b9a\u7684 server \u4ee5 qps \u4e3a 10 \u7684\u901f\u5ea6\u643a\u5e26body \u8fdb\u884c Post \u8bf7\u6c42\uff0c\u5e76\u4e14\u7acb\u5373\u6267\u884c\u3002</p> <p>\u8fd9\u91cc\u4f7f\u7528 server \u7684 service \u5730\u5740\uff0c\u82e5\u6709\u5176\u4ed6 server \u5730\u5740 \u53ef\u4f7f\u7528\u5176\u4ed6 server \u5730\u5740\u3002</p> <p>\u521b\u5efa\u6d4b\u8bd5 body \u6570\u636e</p> <p><code>shell cat &lt;&lt;EOF | kubectl apply -f - apiVersion: v1 kind: ConfigMap metadata:   name: kdoctor-test-body   namespace: kdoctor-test-server data:   test1: test1   test2: test2 EOF kubectl apply -f http-body.yaml</code></p> <p>\u521b\u5efa <code>AppHttpHealthy</code></p> <p><code>shell SERVER=\"172.41.71.0\" cat &lt;&lt;EOF | kubectl apply -f - apiVersion: kdoctor.io/v1beta1 kind: AppHttpHealthy metadata:   name: http-body spec:   request:     durationInSecond: 10     perRequestTimeoutInMS: 1000     qps: 10   schedule:     roundNumber: 1     roundTimeoutMinute: 1     schedule: 0 1   expect:     meanAccessDelayInMs: 1000     successRate: 1     statusCode: 200   target:     bodyConfigmapName: kdoctor-test-body     bodyConfigmapNamespace: kdoctor-test-server     header:      - \"Content-Type: application/json\"     host: http://${SERVER}     method: POST EOF</code></p> </li> <li> <p>\u521b\u5efa https <code>AppHttpHealthy</code> \uff0c\u8be5\u4efb\u52a1\u5c06\u6267\u884c\u4e00\u8f6e\u6301\u7eed 10s \u7684\u4efb\u52a1\uff0c\u4efb\u52a1\u4f1a\u5411\u6307\u5b9a\u7684 server \u4ee5 qps \u4e3a 10 \u7684\u901f\u5ea6\u4f7f\u7528 https \u534f\u8bae\u643a\u5e26\u8bc1\u4e66\u53d1\u9001 Get \u8bf7\u6c42\uff0c\u5e76\u4e14\u7acb\u5373\u6267\u884c</p> <p>\u6b64 TLS \u8bc1\u4e66\u7531 server \u751f\u6210\uff0c\u8bc1\u4e66\u53ea\u5bf9 Pod \u7684 IP \u8fdb\u884c\u4e86\u7b7e\u540d\uff0c\u56e0\u6b64\u6211\u4eec server \u7684 Pod IP \u8fdb\u884c\u8bbf\u95ee\uff0c\u82e5\u4f7f\u7528\u5176\u4ed6 server \u8bf7\u81ea\u884c\u521b\u5efa\u8bc1\u4e66 secret\u3002</p> <p><code>shell SERVER=\"172.40.0.35\" cat &lt;&lt;EOF | kubectl apply -f - apiVersion: kdoctor.io/v1beta1 kind: AppHttpHealthy metadata:   name: https spec:   request:     durationInSecond: 10     perRequestTimeoutInMS: 1000     qps: 10   schedule:     roundNumber: 1     roundTimeoutMinute: 1     schedule: 0 1   expect:     meanAccessDelayInMs: 1000     successRate: 1     statusCode: 200   target:     host: https://${SERVER}     method: GET     tlsSecretName: https-client-cert     tlsSecretNamespace: kdoctor-test-server EOF</code></p> </li> </ol>"},{"location":"usage/apphttphealthy-zh_CN/#_6","title":"\u73af\u5883\u6e05\u7406","text":"<pre><code>kubectl delete apphttphealthy http https http-body\n</code></pre>"},{"location":"usage/apphttphealthy/","title":"Nethttp","text":"<p>\u7b80\u4f53\u4e2d\u6587 | English</p>"},{"location":"usage/apphttphealthy/#introduction","title":"Introduction","text":"<p>kdoctor-controller creates the necessary resources, including agent, based on the agentSpec. Each agent Pod sends DNS requests to a specified DNS server. By default, the concurrency level is set to 50, which can handle scenarios with multiple replicas. The concurrency level can be configured in the kdoctor configmap. The success rate and average latency are measured, and the results are evaluated based on predefined success criteria. Detailed reports can be obtained using the aggregate API.</p> <ol> <li> <p>Use cases:</p> <ul> <li>Test connectivity to ensure that a specific application can be accessed from every corner of the cluster.</li> <li>Conduct large-scale cluster testing by simulating a higher number of clients to generate increased pressure and assess the application's resilience. Simulate more source IPs to create additional application sessions and test resource limitations.</li> <li>Inject pressure into a specific application for purposes such as gray release, chaos tests, bug reproduction, etc.</li> <li>Test external services of the cluster to verify the proper functioning of cluster egress.</li> </ul> </li> <li> <p>For a more detailed description of the AppHttpHealthy CRD, please refer toAppHttpHealthy</p> </li> <li> <p>Features</p> <ul> <li>Support HTTP, HTTPS, and HTTP2 protocols, allowing customization of headers and bodies.</li> </ul> </li> </ol>"},{"location":"usage/apphttphealthy/#steps","title":"Steps","text":"<p>The following example demonstrates how to use <code>AppHttpHealthy</code>.</p>"},{"location":"usage/apphttphealthy/#install-kdoctor","title":"Install kdoctor","text":"<p>Follow the installation guide to install kdoctor.</p>"},{"location":"usage/apphttphealthy/#install-test-server-optional","title":"Install Test Server (Optional)","text":"<p>The official kdoctor repository includes an application called \"server\" that contains an HTTP server, HTTPS server, and DNS server. This server can be employed to test the functionality of kdoctor. If you have other test servers available, you can skip this installation step.</p> <pre><code>helm repo add kdoctor https://kdoctor-io.github.io/kdoctor\nhelm repo update kdoctor\nhelm install server kdoctor/server -n kdoctor --wait --debug --create-namespace \n</code></pre> <p>Check the status of test server</p> <pre><code>kubectl get pod -n kdoctor -owide\nNAME                                READY   STATUS    RESTARTS   AGE   IP            NODE                    NOMINATED NODE   READINESS GATES\nserver-7649566ff9-dv4jc   1/1     Running   0          76s   172.40.1.45   kdoctor-worker          &lt;none&gt;           &lt;none&gt;\nserver-7649566ff9-qc5dh   1/1     Running   0          76s   172.40.0.35   kdoctor-control-plane   &lt;none&gt;           &lt;none&gt;\n</code></pre> <p>Obtain the service address of the test server</p> <pre><code>kubectl get service -n kdoctor\nNAME               TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)                                AGE\nserver   ClusterIP   172.41.71.0   &lt;none&gt;        80/TCP,443/TCP,53/UDP,53/TCP,853/TCP   2m31s\n</code></pre>"},{"location":"usage/apphttphealthy/#create-apphttphealthy","title":"Create AppHttpHealthy","text":"<p>Create an <code>AppHttpHealthy</code> task for HTTP that will run continuously for 10 seconds. The task will send GET requests to the specified server at a rate of 10 QPS and be executed immediately.</p> <p>We are using the service address of the test server. If you have a different server address available, feel free to use it instead.</p> <pre><code>SERVER=\"172.41.71.0\"\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: kdoctor.io/v1beta1\nkind: AppHttpHealthy\nmetadata:\n  name: http1\nspec:\n  request:\n    durationInSecond: 10\n    perRequestTimeoutInMS: 1000\n    qps: 10\n  schedule:\n    roundNumber: 1\n    roundTimeoutMinute: 1\n    schedule: 0 1\n  expect:\n    meanAccessDelayInMs: 1000\n    successRate: 1\n  target:\n    host: http://${SERVER}\n    method: GET\nEOF\n</code></pre>"},{"location":"usage/apphttphealthy/#check-task-status","title":"Check Task Status","text":"<p>After completing a round of tasks, you can use the kdoctor aggregate API to view the report for the current round. When the FINISH field is set to true, it indicates that all tasks have been completed, and you can access the overall report.</p> <pre><code>kubectl get apphttphealthy\nNAME        FINISH   EXPECTEDROUND   DONEROUND   LASTROUNDSTATUS   SCHEDULE\nhttp        true     1               1           succeed           0 1\n</code></pre> <ul> <li>FINISH: indicate whether the task has been completed</li> <li>EXPECTEDROUND: number of expected task rounds</li> <li>DONEROUND: number of completed task rounds</li> <li>LASTROUNDSTATUS: execution status of the last round of tasks</li> <li>SCHEDULE: schedule rules for the task</li> </ul>"},{"location":"usage/apphttphealthy/#view-task-reports","title":"View Task Reports","text":"<ol> <li> <p>View existed reports</p> <p><code>shell kubectl get kdoctorreport NAME        CREATED AT http        0001-01-01T00:00:00Z</code></p> </li> <li> <p>View specific task reports</p> <p>The reports are aggregated from the agents running on both the kdoctor-control-plane node and the kdoctor-worker nodes after performing two rounds of stress testing respectively.</p> <p><code>shell kubectl get kdoctorreport http -oyaml apiVersion: system.kdoctor.io/v1beta1 kind: KdoctorReport metadata:   creationTimestamp: null   name: http spec:   FailedRoundNumber: null   FinishedRoundNumber: 1   Report:   - NodeName: kdoctor-control-plane     HttpAppHealthyTask:       Detail:       - MeanDelay: 10.317307         Metrics:           Duration: 11.022081662s           EndTime: \"2023-07-31T07:25:23Z\"           Errors: {}           Latencies:             MaxInMs: 0             MeanInMs: 10.317307             MinInMs: 0             P50InMs: 0             P90InMs: 0             P95InMs: 0             P99InMs: 0           RequestCounts: 104           StartTime: \"2023-07-31T07:25:12Z\"           StatusCodes:             \"200\": 104           SuccessCounts: 104           TPS: 9.435604197939574           TotalDataSize: 40040 byte         Succeed: true         SucceedRate: 1         TargetMethod: GET         TargetName: HttpAppHealthy target         TargetUrl: http://172.41.71.0       Succeed: true       TargetNumber: 1       TargetType: HttpAppHealthy       MaxCPU: 30.651%       MaxMemory: 97.00MB     HttpAppHealthyTaskSpec:     ...     PodName: kdoctor-agent-fmr9m     ReportType: agent test report     RoundDuration: 11.038965547s     RoundNumber: 1     RoundResult: succeed     StartTimeStamp: \"2023-07-31T07:25:12Z\"     EndTimeStamp: \"2023-07-31T07:25:23Z\"     TaskName: apphttphealthy.http     TaskType: AppHttpHealthy   - NodeName: kdoctor-worker     HttpAppHealthyTask:       Detail:       - MeanDelay: 10.548077         Metrics:           ...         Succeed: true         SucceedRate: 1         TargetMethod: GET         TargetName: HttpAppHealthy target         TargetUrl: http://172.41.71.0       Succeed: true       TargetNumber: 1       TargetType: HttpAppHealthy     HttpAppHealthyTaskSpec:     ...     PodName: kdoctor-agent-s468h     ReportType: agent test report     RoundDuration: 11.034140236s     RoundNumber: 1     RoundResult: succeed     StartTimeStamp: \"2023-07-31T07:25:12Z\"     EndTimeStamp: \"2023-07-31T07:25:23Z\"     TaskName: apphttphealthy.http     TaskType: AppHttpHealthy   ReportRoundNumber: 1   RoundNumber: 1   Status: Finished   TaskName: http   TaskType: AppHttpHealthy</code></p> </li> </ol> <p>If the reports do not align with the expected results, check the MaxCPU and MaxMemory fields in the report to verify if there are available resources of the agents and adjust the resource limits for the agents accordingly.</p>"},{"location":"usage/apphttphealthy/#other-common-examples","title":"Other Common Examples","text":"<p>Below are examples of HTTP requests with bodies and HTTPS requests:</p> <ol> <li> <p>Create an <code>AppHttpHealthy</code> task for HTTP with a body. This task will run continuously for 10 seconds. It will send POST requests with the provided body to the specified server at a rate of 10 QPS and be executed immediately.</p> <p>We are using the service address of the test server. If you have a different server address available, feel free to use it instead.</p> <p>Creating test body data</p> <p><code>shell cat &lt;&lt;EOF | kubectl apply -f - apiVersion: v1 kind: ConfigMap metadata:   name: kdoctor-test-body   namespace: kdoctor-test-server data:   test1: test1   test2: test2 EOF kubectl apply -f http-body.yaml</code></p> <p>Create <code>AppHttpHealthy</code></p> <p><code>shell SERVER=\"172.41.71.0\" cat &lt;&lt;EOF | kubectl apply -f - apiVersion: kdoctor.io/v1beta1 kind: AppHttpHealthy metadata:   name: http-body spec:   request:     durationInSecond: 10     perRequestTimeoutInMS: 1000     qps: 10   schedule:     roundNumber: 1     roundTimeoutMinute: 1     schedule: 0 1   expect:     meanAccessDelayInMs: 1000     successRate: 1     statusCode: 200   target:     bodyConfigmapName: kdoctor-test-body     bodyConfigmapNamespace: kdoctor-test-server     header:      - \"Content-Type: application/json\"     host: http://${SERVER}     method: POST EOF</code></p> </li> <li> <p>Create an <code>AppHttpHealthy</code> task for HTTPS. This task will run continuously for 10 seconds. It will send GET requests using the HTTPS protocol with the provided certificate to the specified server at a rate of 10 QPS and be executed immediately.</p> <p>The TLS certificate used in this example is generated by the server and is only valid for the Pod's IP. Hence, we are accessing the server using the Pod's IP. If you are using a different server, please create the certificate secret accordingly.</p> <p><code>shell SERVER=\"172.40.0.35\" cat &lt;&lt;EOF | kubectl apply -f - apiVersion: kdoctor.io/v1beta1 kind: AppHttpHealthy metadata:   name: https spec:   request:     durationInSecond: 10     perRequestTimeoutInMS: 1000     qps: 10   schedule:     roundNumber: 1     roundTimeoutMinute: 1     schedule: 0 1   expect:     meanAccessDelayInMs: 1000     successRate: 1     statusCode: 200   target:     host: https://${SERVER}     method: GET     tlsSecretName: https-client-cert     tlsSecretNamespace: kdoctor-test-server EOF</code></p> </li> </ol>"},{"location":"usage/apphttphealthy/#environment-cleanup","title":"Environment Cleanup","text":"<pre><code>kubectl delete apphttphealthy http https http-body\n</code></pre>"},{"location":"usage/debug-zh_CN/","title":"Debug","text":"<p>English | \u7b80\u4f53\u4e2d\u6587</p> <p>Q: \u60f3\u8981\u4f7f\u7528\u66f4\u9ad8\u7684 QPS \u5e94\u8be5\u5982\u4f55\u8bbe\u7f6e\uff1f * A: \u5f53 QPS \u8bbe\u7f6e\u8fc7\u5927\uff0c\u4f1a\u5bfc\u81f4\u670d\u52a1\u5668\u8d44\u6e90\u5360\u7528\u8fc7\u9ad8\uff0c\u5f71\u54cd\u4e1a\u52a1\u3002\u4e3a\u4e86\u9632\u6b62\u5728\u751f\u4ea7\u574f\u5883\u51fa\u73b0\u8bef\u64cd\u4f5c\u3002kdoctor \u5728 webhook \u4e2d\u6dfb\u52a0\u4e86 QPS \u7684\u68c0\u67e5\u3002\u5982\u679c\u60a8\u60f3\u4f7f\u7528\u66f4\u9ad8\u7684 QPS \u53ef\u901a\u8fc7\u53c2\u6570\u8bbe\u7f6e QPS \u9650\u5236 <code>--set feature.appHttpHealthyRequestMaxQPS=1000</code>,<code>--set feature.netReachRequestMaxQPS=1000</code>,<code>--set feature.netDnsRequestMaxQPS=1000</code>\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 kdoctor \u7684 configmap \u4e2d\u53bb\u66f4\u6539 \uff0c \u5e76\u91cd\u542f kdoctor \u7684\u76f8\u5173 pod \u91cd\u65b0\u52a0\u8f7d configmap\u3002</p> <p>Q: \u4e3a\u4ec0\u4e48\u6211\u7684\u4efb\u52a1\u65e0\u6cd5\u8fbe\u5230\u671f\u671b\u7684 QPS \uff1f * A\uff1a\u65e0\u6cd5\u8fbe\u5230 QPS \u7684\u671f\u671b\u539f\u56e0\u6709\u5f88\u591a\u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u51e0\u79cd\u539f\u56e0\uff1a   * \u5e76\u53d1 worker \u8bbe\u7f6e\u8fc7\u4f4e\uff0ckdoctor \u53ef\u901a\u8fc7\u8bbe\u7f6e\u53c2\u6570\u8c03\u6574\u5e76\u53d1\u6570 <code>--set feature.netReachMaxConcurrency=50</code>\uff0c<code>--set feature.appHttpHealthyMaxConcurrency=50</code>\uff0c<code>--set feature.netDnsMaxConcurrency=50</code>\u3002   * kdoctor agent \u5206\u914d\u8d44\u6e90\u4e0d\u5145\u8db3\uff0c\u53ef\u901a\u8fc7 kdoctor \u7684\u805a\u5408\u62a5\u544a<code>kubectl get kdoctorreport</code>\u67e5\u770b\u4efb\u52a1\u6d88\u8017\u7684 cpu \u4e0e \u5185\u5b58\u4f7f\u7528\u91cf\uff0c\u786e\u5b9a kdoctor agent \u8d44\u6e90\u5206\u914d\u662f\u5426\u5145\u8db3\u3002      <code>shell       ~kubectl get kdoctorreport test-task -oyaml       ...       SystemResource:         MaxCPU: 52.951%         MaxMemory: 120.00MB         MeanCPU: 32.645%       ...</code>   * kdoctor agent \u4e2d\u662f\u5426\u5728\u540c\u65f6\u6267\u884c\u5176\u4ed6\u4efb\u52a1\u5c06\u8d44\u6e90\u5360\u6ee1\u3002\u53ef\u901a\u8fc7 kdoctor \u7684\u805a\u5408\u62a5\u544a`kubectl get kdoctorreport \u67e5\u770b\u540c\u65f6\u6267\u884c\u7684\u5176\u4ed6\u4efb\u52a1 QPS \u6570\u91cf\u3002     \u9519\u5f00\u4efb\u52a1\u6267\u884c\u65f6\u95f4\u6216\u901a\u8fc7\u5b9a\u4e49 agentSpec \u6307\u5b9a kdoctor agent \u6267\u884c\u4efb\u52a1\u5c06\u4efb\u52a1\u8fdb\u884c\u9694\u79bb\u3002\u56e0 QPS \u7edf\u8ba1\u5177\u6709\u65f6\u6548\u6027\uff0c\u6240\u4ee5\u53ef\u642d\u914d\u65e5\u5fd7\u4e00\u8d77\u4f5c\u4e3a\u53c2\u8003\uff0c\u5728\u4efb\u52a1\u6267\u884c\u5f00\u59cb\u524d\uff0c\u4f1a\u5c06\u5f53\u524d\u5728\u6267\u884c\u7684 QPS \u8f93\u51fa\u5230\u65e5\u5fd7\u4e2d\u3002      <code>shell       ~kubectl logs kdoctor-agent-74rrp  -n kdoctor |grep \"Before the current task starts\"       {\"level\":\"DEBUG\",\"ts\":\"2023-11-07T10:01:02.821Z\",\"agent\":\"agent.agentController.AppHttpHealthyReconciler.AppHttpHealthy.test-task.round1\",\"caller\":\"pluginManager/agentTools.go:90\",\"msg\":\"Before the current task starts, the total QPS of the tasks being executed is AppHttpHealth=100,NetReach=0,NetDNS=0\",\"AppHttpHealthy\":\"test-task\"}</code> <code>shell       ~kubectl get kdoctorreport test-task -oyaml       ...       TotalRunningLoad:         AppHttpHealthyQPS: 100         NetDnsQPS: 50         NetReachQPS: 0       ...</code> Q: \u4e3a\u4ec0\u4e48 Kdoctor agent \u4f1a OOM\uff1f * A: kdoctor agent \u4f5c\u4e3a\u9ed8\u8ba4\u7684\u6267\u884c\u4efb\u52a1\u7684 agent\uff0c\u5728\u4efb\u52a1\u4e2d\u6ca1\u6709\u6307\u5b9a agent \u65f6\uff0c\u9ed8\u8ba4\u4f7f\u7528 kdoctor agent \u6267\u884c\uff0c\u76ee\u524d\u7684 agent \u8fd8\u4e0d\u652f\u6301\u6839\u636e\u4efb\u52a1\u8d1f\u8f7d\u60c5\u51b5\uff0c\u62d2\u7edd\u6267\u884c\u4efb\u52a1\u6216\u5ef6\u8fdf\u6267\u884c\u4efb\u52a1\u529f\u80fd\u3002      \u56e0\u6b64\u5f53 kdoctor agent \u540c\u65f6\u6267\u884c\u5927\u91cf\u4efb\u52a1\u65f6\uff0c\u7531\u4e8e\u8bf7\u6c42\u91cf\u8fc7\u5927\uff0c\u5185\u5b58\u9650\u5236\u8fc7\u4f4e\uff0c\u5c06\u4f1a\u5bfc\u81f4 kdoctor agent \u5185\u5b58\u8fc7\u8f7d\uff0c\u5bfc\u81f4 OOM\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u4efb\u52a1\u60c5\u51b5\uff0c\u9519\u5f00\u4f7f\u7528 kdoctor agent\uff0c\u8c03\u6574\u5185\u5b58\u9650\u5236\uff0c\u6216\u4f7f\u7528\u6307\u5b9a\u7684 agent \u9694\u79bb\u4efb\u52a1\u3002</p>"},{"location":"usage/debug/","title":"Debug","text":"<p>\u7b80\u4f53\u4e2d\u6587 | English</p> <p>Q: How to achieve higher QPS? * A: When the QPS setting is too high, it can result in excessive server resource utilization, impacting business operations.    To prevent accidental misconfiguration in production environments, kdoctor has added QPS checks in the webhook.  * If you wish to use a higher QPS, you can set the QPS limit using the parameter  <code>--set feature.appHttpHealthyRequestMaxQPS=1000</code>,<code>--set feature.netReachRequestMaxQPS=1000</code>,<code>--set feature.netDnsRequestMaxQPS=1000</code>\uff0cYou can also modify it through the configmap in kdoctor,   And restart the relevant pods of kdoctor to reload the configmap.</p> <p>Q: Why is my task unable to achieve the desired QPS \uff1f * A\uff1aThere are several reasons why the expected QPS cannot be achieved, primarily categorized into the following reasons\uff1a     * The concurrency worker setting is too low. kdoctor can adjust the concurrency by setting the parameters <code>--set feature.netReachMaxConcurrency=50</code>\uff0c<code>--set feature.appHttpHealthyMaxConcurrency=50</code>\uff0c<code>--set feature.netDnsMaxConcurrency=50</code>.     * The kdoctor agent may have insufficient resource allocation. You can use the kdoctor aggregate report <code>kubectl get kdoctorreport</code> to check the CPU and memory usage of the task. This will help you determine if the resource allocation for the kdoctor agent is sufficient.        <code>shell         ~kubectl get kdoctorreport test-task -oyaml         ...         SystemResource:           MaxCPU: 52.951%           MaxMemory: 120.00MB           MeanCPU: 32.645%         ...</code>     * Whether the kdoctor agent is concurrently executing other tasks and occupying resources can be determined by checking the QPS count of other tasks being executed simultaneously.        You can use the kdoctor aggregate report <code>kubectl get kdoctorreport</code> to view the QPS count of other concurrently running tasks.       Stagger the task execution time or isolate the task by defining agentSpec to specify the kdoctor agent to execute the task. Because QPS statistics are time-sensitive, they can be used together with the log as a reference.        Before the task execution starts, the currently executing QPS will be output to the log\u3002        <code>shell         ~kubectl logs kdoctor-agent-74rrp  -n kdoctor |grep \"Before the current task starts\"         {\"level\":\"DEBUG\",\"ts\":\"2023-11-07T10:01:02.821Z\",\"agent\":\"agent.agentController.AppHttpHealthyReconciler.AppHttpHealthy.test-task.round1\",\"caller\":\"pluginManager/agentTools.go:90\",\"msg\":\"Before the current task starts, the total QPS of the tasks being executed is AppHttpHealth=100,NetReach=0,NetDNS=0\",\"AppHttpHealthy\":\"test-task\"}</code> <code>shell         ~kubectl get kdoctorreport test-task -oyaml         ...         TotalRunningLoad:           AppHttpHealthyQPS: 100           NetDnsQPS: 50           NetReachQPS: 0         ...</code> Q: Why does the Kdoctor agent experience OOM (Out of Memory) issues \uff1f * A: The Kdoctor agent serves as the default agent for executing tasks when no specific agent is specified in the task. Currently, the agent does not support features to reject or delay task execution based on the workload.       Therefore, when the Kdoctor agent concurrently handles a large number of tasks, the high request volume combined with low memory limits can lead to memory overload and result in OOM (Out of Memory) errors.      To mitigate this issue, you can stagger the usage of the Kdoctor agent based on the task workload, adjust the memory limits accordingly, or isolate tasks using specific agents that are better suited for the workload.</p>"},{"location":"usage/get-started-kind-zh_CN/","title":"Kind Quick Start","text":"<p>English | \u7b80\u4f53\u4e2d\u6587</p> <p>Kind \u662f\u4e00\u4e2a\u4f7f\u7528 Docker \u5bb9\u5668\u8282\u70b9\u8fd0\u884c\u672c\u5730 Kubernetes \u96c6\u7fa4\u7684\u5de5\u5177\u3002kdoctor \u63d0\u4f9b\u4e86\u5b89\u88c5 Kind \u96c6\u7fa4\u7684\u811a\u672c\uff0c\u80fd\u5feb\u901f\u642d\u5efa\u4e00\u5957\u914d\u5907 nginx\u3001ingress\u3001loadbalancer \u7684 Kind \u96c6\u7fa4\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u8fdb\u884c kdoctor \u7684\u6d4b\u8bd5\u4e0e\u4f53\u9a8c\u3002</p>"},{"location":"usage/get-started-kind-zh_CN/#_1","title":"\u5148\u51b3\u6761\u4ef6","text":"<ul> <li>\u6267\u884c <code>make checkBin</code>\uff0c\u68c0\u67e5\u672c\u5730\u4e3b\u673a\u4e0a\u7684\u5f00\u53d1\u5de5\u5177\u662f\u5426\u6ee1\u8db3\u90e8\u7f72 Kind \u96c6\u7fa4\u4e0e kdoctor \u7684\u6761\u4ef6\uff0c\u5982\u679c\u7f3a\u5c11\u7ec4\u4ef6\u4f1a\u4e3a\u60a8\u81ea\u52a8\u5b89\u88c5\u3002</li> </ul>"},{"location":"usage/get-started-kind-zh_CN/#kind-kdoctor","title":"\u5728 Kind \u96c6\u7fa4\u4e0a\u90e8\u7f72 kdoctor","text":"<ol> <li> <p>\u514b\u9686 kdoctor \u7a33\u5b9a\u7248\u672c\u7684\u4ee3\u7801\u5230\u672c\u5730\u4e3b\u673a\u4e0a\uff0c\u5e76\u8fdb\u5165 kdoctor \u5de5\u7a0b\u7684\u6839\u76ee\u5f55\u3002</p> <p><code>bash ~# LATEST_RELEASE_VERISON=$(curl -s https://api.github.com/repos/kdoctor-io/kdoctor/releases | grep '\"tag_name\":' | grep -v rc | grep -Eo \"([0-9]+\\.[0-9]+\\.[0-9])\" | sort -r | head -n 1) ~# curl -Lo /tmp/$LATEST_RELEASE_VERISON.tar.gz https://github.com/kdoctor-io/kdoctor/archive/refs/tags/v$LATEST_RELEASE_VERISON.tar.gz ~# tar -xvf /tmp/$LATEST_RELEASE_VERISON.tar.gz -C /tmp/ ~# cd /tmp/kdoctor-$LATEST_RELEASE_VERISON</code></p> </li> <li> <p>\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u83b7\u53d6 kdoctor \u7684\u6700\u65b0\u955c\u50cf\u3002</p> <p><code>bash ~# KDOCTOR_LATEST_IMAGE_TAG=$(curl -s https://api.github.com/repos/kdoctor-io/kdoctor/releases | jq -r '.[].tag_name | select((\"^v1.[0-9]*.[0-9]*$\"))' | head -n 1)</code></p> </li> <li> <p>\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff0c\u521b\u5efa Kind \u96c6\u7fa4\uff0c\u5e76\u4e3a\u60a8\u5b89\u88c5 metallb\u3001contour\u3001nginx\u3001kdoctor\u3002</p> <p><code>bash ~# make e2e_init -e PROJECT_IMAGE_VERSION=KDOCTOR_LATEST_IMAGE_TAG</code></p> <p>note: \u5982\u679c\u60a8\u662f\u56fd\u5185\u7528\u6237\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\uff0c\u907f\u514d\u62c9\u53d6\u955c\u50cf\u5931\u8d25\u3002</p> <p><code>bash ~# make e2e_init -e E2E_SPIDERPOOL_TAG=$SPIDERPOOL_LATEST_IMAGE_TAG -e E2E_CHINA_IMAGE_REGISTRY=true</code></p> </li> </ol>"},{"location":"usage/get-started-kind-zh_CN/#_2","title":"\u9a8c\u8bc1\u5b89\u88c5","text":"<p>\u5728 kdoctor \u5de5\u7a0b\u7684\u6839\u76ee\u5f55\u4e0b\u6267\u884c\u5982\u4e0b\u547d\u4ee4\uff0c\u4e3a kubectl \u914d\u7f6e Kind \u96c6\u7fa4\u7684 KUBECONFIG\u3002</p> <pre><code>~# export KUBECONFIG=$(pwd)/test/runtime/kubeconfig_kdoctor.config\n</code></pre> <p>\u60a8\u53ef\u4ee5\u770b\u5230\u5982\u4e0b\u7684\u5185\u5bb9\u8f93\u51fa\uff1a</p> <pre><code>~# kubectl get nodes \nNAME                    STATUS   ROLES           AGE     VERSION\nkdoctor-control-plane   Ready    control-plane   3h50m    v1.27.1\nkdoctor-worker          Ready    &lt;none&gt;          3h50m   v1.27.1\n\n~# kubectl get pod -n kdoctor -owide\nNAME                                     READY   STATUS    RESTARTS   AGE     IP            NODE                    NOMINATED NODE   READINESS GATES\nkdoctor-agent-5n4nb                      1/1     Running   0          3h46m   172.40.1.29   kdoctor-worker          &lt;none&gt;           &lt;none&gt;\nkdoctor-agent-zm4tn                      1/1     Running   0          3h46m   172.40.0.83   kdoctor-control-plane   &lt;none&gt;           &lt;none&gt;\nkdoctor-controller-78589d96c8-lgcw9      1/1     Running   0          3h46m   172.40.1.28   kdoctor-worker          &lt;none&gt;           &lt;none&gt;\nkdoctor-test-server-6bf7f9df47-dq8th     1/1     Running   0          3h46m   172.40.0.82   kdoctor-control-plane   &lt;none&gt;           &lt;none&gt;\nkdoctor-test-server-6bf7f9df47-mhsml     1/1     Running   0          3h46m   172.40.1.27   kdoctor-worker          &lt;none&gt;           &lt;none&gt;\n\n~# kubectl get svc -n kdoctor\nNAME                    TYPE           CLUSTER-IP       EXTERNAL-IP              PORT(S)                                     AGE\nkdoctor-agent-ipv4      LoadBalancer   172.41.217.12    172.18.0.51              5711:30778/TCP,80:31835/TCP,443:30675/TCP   3h46m\nkdoctor-agent-ipv6      LoadBalancer   fd41::2274       fc00:f853:ccd:e793::50   5711:30022/TCP,80:30761/TCP,443:30516/TCP   3h46m\nkdoctor-controller      ClusterIP      172.41.210.120   &lt;none&gt;                   5721/TCP,5722/TCP,443/TCP                   3h46m\nkdoctor-test-server     ClusterIP      172.41.95.144    &lt;none&gt;                   80/TCP,443/TCP,53/UDP,53/TCP,853/TCP        3h46m\n</code></pre> <p><code>kdoctor-test-server</code> \u4e3a kdoctor \u7684\u6d4b\u8bd5 server\uff0c\u91cc\u9762\u5305\u542b http server\u3001https server\u3001dns udp server\u3001dns tcp server,\u4f9b\u6d4b\u8bd5 kdocotr \u529f\u80fd\u4f7f\u7528\u3002 </p>"},{"location":"usage/get-started-kind-zh_CN/#_3","title":"\u914d\u7f6e\u4efb\u52a1","text":"AppHttpHealthyNetReachNetDns <p>\u6211\u4eec\u5bf9 kdocotr-test-server \u7684 service ip \u8fdb\u884c\u8bbf\u95ee\uff0c\u83b7\u53d6 kdocotr-test-server \u7684\u54cd\u5e94\u60c5\u51b5\u3002</p> <p><code>bash SERVER=\"172.41.95.144\" cat &lt;&lt;EOF | kubectl apply -f - apiVersion: kdoctor.io/v1beta1 kind: AppHttpHealthy metadata:   name: http-test spec:   request:     durationInSecond: 10     perRequestTimeoutInMS: 1000     qps: 10   schedule:     roundNumber: 1     roundTimeoutMinute: 1     schedule: 0 1   expect:     meanAccessDelayInMs: 1000     successRate: 1   target:     host: http://${SERVER}     method: GET EOF</code></p> <p>\u67e5\u770b\u4efb\u52a1\u72b6\u6001\uff0c\u7b49\u5f85\u4efb\u52a1\u5b8c\u6210\u3002</p> <p><code>bash ~# kubectl get apphttphealthy NAME        FINISH   EXPECTEDROUND   DONEROUND   LASTROUNDSTATUS   SCHEDULE http-test   false    1               0                             0 1 ~# kubectl get apphttphealthy NAME        FINISH   EXPECTEDROUND   DONEROUND   LASTROUNDSTATUS   SCHEDULE http-test   true     1               1           succeed           0 1</code> </p> <p>\u67e5\u8be2\u4efb\u52a1\u8be6\u7ec6\u62a5\u544a\u3002</p> <p><code>bash ~# kubectl get kdoctorreport http-test -oyaml apiVersion: system.kdoctor.io/v1beta1 kind: KdoctorReport metadata:   creationTimestamp: \"2023-12-11T07:20:01Z\"   name: http-test spec:   FailedRoundNumber: null   FinishedRoundNumber: 1   Report:   - EndTimeStamp: \"2023-12-11T07:20:11Z\"     HttpAppHealthyTask:       Detail:       - MeanDelay: 10.44         Metrics:           Duration: 10.003604664s           EndTime: \"2023-12-11T07:20:11Z\"           Errors: {}           ExistsNotSendRequests: false           Latencies:             MaxInMs: 0             MeanInMs: 10.44             MinInMs: 0             P50InMs: 0             P90InMs: 0             P95InMs: 0             P99InMs: 0           RequestCounts: 100           StartTime: \"2023-12-11T07:20:01Z\"           StatusCodes:             \"200\": 100           SuccessCounts: 100           TPS: 9.996396634892049           TotalDataSize: 37394 byte         Succeed: true         SucceedRate: 1         TargetMethod: GET         TargetName: HttpAppHealthy target         TargetUrl: http://172.41.95.144       Succeed: true       SystemResource:         MaxCPU: 12.723%         MaxMemory: 35.00MB         MeanCPU: 6.227%       TargetNumber: 1       TargetType: HttpAppHealthy       TotalRunningLoad:         AppHttpHealthyQPS: 10         NetDnsQPS: 0         NetReachQPS: 0     HttpAppHealthyTaskSpec:       ...     NodeName: kdoctor-control-plane     PodName: kdoctor-agent-zm4tn     ReportType: agent test report     RoundDuration: 10.014725655s     RoundNumber: 1     RoundResult: succeed     StartTimeStamp: \"2023-12-11T07:20:01Z\"     TaskName: apphttphealthy.http-test     TaskType: AppHttpHealthy   - EndTimeStamp: \"2023-12-11T07:20:11Z\"     HttpAppHealthyTask:       Detail:       - MeanDelay: 11.24         Metrics:           Duration: 10.00058331s           EndTime: \"2023-12-11T07:20:11Z\"           Errors: {}           ExistsNotSendRequests: false           Latencies:             MaxInMs: 0             MeanInMs: 11.24             MinInMs: 0             P50InMs: 0             P90InMs: 0             P95InMs: 0             P99InMs: 0           RequestCounts: 100           StartTime: \"2023-12-11T07:20:01Z\"           StatusCodes:             \"200\": 100           SuccessCounts: 100           TPS: 9.999416724023071           TotalDataSize: 37391 byte         Succeed: true         SucceedRate: 1         TargetMethod: GET         TargetName: HttpAppHealthy target         TargetUrl: http://172.41.95.144       Succeed: true       SystemResource:         MaxCPU: 12.704%         MaxMemory: 35.00MB         MeanCPU: 6.370%       TargetNumber: 1       TargetType: HttpAppHealthy       TotalRunningLoad:         AppHttpHealthyQPS: 10         NetDnsQPS: 0         NetReachQPS: 0     HttpAppHealthyTaskSpec:       ...     NodeName: kdoctor-worker     PodName: kdoctor-agent-5n4nb     ReportType: agent test report     RoundDuration: 10.010301747s     RoundNumber: 1     RoundResult: succeed     StartTimeStamp: \"2023-12-11T07:20:01Z\"     TaskName: apphttphealthy.http-test     TaskType: AppHttpHealthy   ReportRoundNumber: 1   RoundNumber: 1   Status: Finished   TaskName: http-test   TaskType: AppHttpHealthy</code></p> <p>\u6211\u4eec\u5bf9\u96c6\u7fa4\u7684\u8fde\u901a\u6027\u8fdb\u884c\u68c0\u6d4b\u3002</p> <p><code>bash cat &lt;&lt;EOF | kubectl apply -f - apiVersion: kdoctor.io/v1beta1 kind: NetReach metadata:   name: task spec:   expect:     meanAccessDelayInMs: 1500     successRate: 1   request:     durationInSecond: 10     perRequestTimeoutInMS: 1000     qps: 10   schedule:     roundNumber: 1     roundTimeoutMinute: 1     schedule: 0 1   target:     clusterIP: true     endpoint: true     ingress: true     ipv4: true     loadBalancer: true     multusInterface: false     nodePort: true EOF</code></p> <p>\u67e5\u770b\u4efb\u52a1\u72b6\u6001\uff0c\u7b49\u5f85\u4efb\u52a1\u5b8c\u6210\u3002</p> <p><code>bash  ~# kubectl get netreach NAME   FINISH   EXPECTEDROUND   DONEROUND   LASTROUNDSTATUS   SCHEDULE task   false    1               0                             0 1 ~# kubectl get netreach NAME   FINISH   EXPECTEDROUND   DONEROUND   LASTROUNDSTATUS   SCHEDULE task   true     1               1           succeed           0 1</code></p> <p>\u67e5\u8be2\u4efb\u52a1\u8be6\u7ec6\u62a5\u544a\u3002</p> <p><code>bash root@kdoctor-control-plane:/# kubectl get kdoctorreport task -oyaml apiVersion: system.kdoctor.io/v1beta1 kind: KdoctorReport metadata: creationTimestamp: null name: task spec: FailedRoundNumber: null FinishedRoundNumber: 1 Report: - NodeName: kdoctor-control-plane   NetReachTask:     Detail:     - TargetName: AgentLoadbalancerV4IP_172.18.0.51:80       Metrics:         Duration: 10.032286878s         EndTime: \"2023-08-01T08:37:06Z\"         Errors: {}         Latencies:           MaxInMs: 0           MeanInMs: 23.08           MinInMs: 0           P50InMs: 0           P90InMs: 0           P95InMs: 0           P99InMs: 0         RequestCounts: 100         StartTime: \"2023-08-01T08:36:56Z\"         StatusCodes:           \"200\": 100         SuccessCounts: 100         TPS: 9.967817030760152         TotalDataSize: 36968 byte       Succeed: true       SucceedRate: 1       TargetMethod: GET       TargetUrl: http://172.18.0.51:80       MeanDelay: 23.08     - TargetName: AgentNodePortV4IP_172.18.0.3_32713       Metrics:         ...       Succeed: true       SucceedRate: 1       TargetMethod: GET       TargetUrl: http://172.18.0.3:32713       MeanDelay: 68.42     - TargetName: AgentPodV4IP_kdoctor-agent-ntp9l_172.40.0.6       Metrics:         ...       Succeed: true       SucceedRate: 1       TargetMethod: GET       TargetUrl: http://172.40.0.6:80       MeanDelay: 44.049503     - TargetName: AgentClusterV4IP_172.41.249.6:80       Metrics:         ...       Succeed: true       SucceedRate: 1       TargetMethod: GET       TargetUrl: http://172.41.249.6:80       MeanDelay: 26.307692     - TargetName: AgentPodV4IP_kdoctor-agent-krrnp_172.40.1.5       Metrics:         ...       Succeed: true       SucceedRate: 1       TargetMethod: GET       TargetUrl: http://172.40.1.5:80       MeanDelay: 61.564358     - TargetName: AgentIngress_http://172.18.0.50/kdoctoragent       Metrics:         ...       Succeed: true       SucceedRate: 1       TargetMethod: GET       TargetUrl: http://172.18.0.50/kdoctoragent       MeanDelay: 65.47059     Succeed: true     TargetNumber: 6     TargetType: NetReach     MaxCPU: 26.203%     MaxMemory: 101.00MB   NetReachTaskSpec:   ...   PodName: kdoctor-agent-ntp9l   ReportType: agent test report   RoundDuration: 11.178657432s   RoundNumber: 1   RoundResult: succeed   StartTimeStamp: \"2023-08-01T08:36:56Z\"   EndTimeStamp: \"2023-08-01T08:37:07Z\"   TaskName: netreach.task   TaskType: NetReach - NodeName: kdoctor-worker   NetReachTask:     Detail:     - TargetName: AgentClusterV4IP_172.41.249.6:80       Metrics:         ...       Succeed: true       SucceedRate: 1       TargetMethod: GET       TargetUrl: http://172.41.249.6:80       MeanDelay: 47.25     - TargetName: AgentNodePortV4IP_172.18.0.2_32713       Metrics:         ...       Succeed: true       SucceedRate: 1       TargetMethod: GET       TargetUrl: http://172.18.0.2:32713       MeanDelay: 13.480392     - TargetName: AgentPodV4IP_kdoctor-agent-krrnp_172.40.1.5       Metrics:         ...       Succeed: true       SucceedRate: 1       TargetMethod: GET       TargetUrl: http://172.40.1.5:80       MeanDelay: 39.637257     - TargetName: AgentPodV4IP_kdoctor-agent-ntp9l_172.40.0.6       Metrics:         ...       Succeed: true       SucceedRate: 1       TargetMethod: GET       TargetUrl: http://172.40.0.6:80       MeanDelay: 51.38614     - TargetName: AgentLoadbalancerV4IP_172.18.0.51:80       Metrics:         ...       Succeed: true       SucceedRate: 1       TargetMethod: GET       TargetUrl: http://172.18.0.51:80       MeanDelay: 41.735847       - TargetName: AgentIngress_http://172.18.0.50/kdoctoragent       Metrics:         ...       Succeed: true       SucceedRate: 1       TargetMethod: GET       TargetUrl: http://172.18.0.50/kdoctoragent       MeanDelay: 60.463634     Succeed: true     TargetNumber: 6     TargetType: NetReach     MaxCPU: 30.651%     MaxMemory: 97.00MB   NetReachTaskSpec:   ...   PodName: kdoctor-agent-krrnp   ReportType: agent test report   RoundDuration: 11.180813761s   RoundNumber: 1   RoundResult: succeed   StartTimeStamp: \"2023-08-01T08:36:56Z\"   EndTimeStamp: \"2023-08-01T08:37:07Z\"   TaskName: netreach.task   TaskType: NetReach ReportRoundNumber: 1 RoundNumber: 1 Status: Finished TaskName: task TaskType: NetReach</code></p> <p>\u6211\u4eec\u5bf9\u96c6\u7fa4\u7684 dns \u670d\u52a1\u8fdb\u884c\u8fde\u901a\u6027\u68c0\u6d4b\uff0c</p> <p><code>bash cat &lt;&lt;EOF | kubectl apply -f - apiVersion: kdoctor.io/v1beta1 kind: Netdns metadata:   name: netdns-cluster spec:   expect:     meanAccessDelayInMs: 1500     successRate: 1   request:     domain: kubernetes.default.svc.cluster.local     durationInSecond: 10     perRequestTimeoutInMS: 1000     protocol: udp     qps: 10   schedule:     roundNumber: 1     roundTimeoutMinute: 1     schedule: 0 1   target:     targetDns:       serviceName: kube-dns       serviceNamespace: kube-system       testIPv4: true EOF</code></p> <p>\u67e5\u770b\u4efb\u52a1\u72b6\u6001\uff0c\u7b49\u5f85\u4efb\u52a1\u5b8c\u6210\uff0c</p> <p><code>bash ~# kubectl get netdns NAME             FINISH   EXPECTEDROUND   DONEROUND   LASTROUNDSTATUS   SCHEDULE netdns-cluster   false    1               0                             0 1 ~# kubectl get netdns NAME             FINISH   EXPECTEDROUND   DONEROUND   LASTROUNDSTATUS   SCHEDULE netdns-cluster   true     1               1           succeed           0 1</code></p> <p>\u67e5\u8be2\u4efb\u52a1\u8be6\u7ec6\u62a5\u544a</p> <p><code>bash root@kdoctor-control-plane:/# kubectl get kdoctorreport netdns-cluster -oyaml apiVersion: system.kdoctor.io/v1beta1 kind: KdoctorReport metadata: creationTimestamp: null name: netdns-cluster spec: FailedRoundNumber: null FinishedRoundNumber: 1 Report: - NodeName: kdoctor-control-plane   PodName: kdoctor-agent-ntp9l   ReportType: agent test report   RoundDuration: 11.025723086s   RoundNumber: 1   RoundResult: succeed   StartTimeStamp: \"2023-08-01T09:09:39Z\"   EndTimeStamp: \"2023-08-01T09:09:50Z\"   TaskName: netdns.netdns-cluster   TaskType: Netdns   netDNSTask:     detail:     - FailureReason: null       MeanDelay: 0.2970297       Metrics:         DNSMethod: udp         DNSServer: 172.41.0.10:53         Duration: 11.002666395s         EndTime: \"2023-08-01T09:09:50Z\"         Errors: {}         FailedCounts: 0         Latencies:           MaxInMs: 0           MeanInMs: 0.2970297           MinInMs: 0           P50InMs: 0           P90InMs: 0           P95InMs: 0           P99InMs: 0         ReplyCode:           NOERROR: 101         RequestCounts: 101         StartTime: \"2023-08-01T09:09:39Z\"         SuccessCounts: 101         TPS: 9.179593052634765         TargetDomain: kubernetes.default.svc.cluster.local.       Succeed: true       SucceedRate: 1       TargetName: typeA_172.41.0.10:53_kubernetes.default.svc.cluster.local       TargetProtocol: udp       TargetServer: 172.41.0.10:53     succeed: true     targetNumber: 1     targetType: kdoctor agent     MaxCPU: 30.651%     MaxMemory: 97.00MB   netDNSTaskSpec:     ... - NodeName: kdoctor-worker   PodName: kdoctor-agent-krrnp   ReportType: agent test report   RoundDuration: 10.024533428s   RoundNumber: 1   RoundResult: succeed   StartTimeStamp: \"2023-08-01T09:09:39Z\"   EndTimeStamp: \"2023-08-01T09:09:49Z\"   TaskName: netdns.netdns-cluster   TaskType: Netdns   netDNSTask:     detail:     - FailureReason: null       MeanDelay: 0.58       Metrics:         ...       Succeed: true       SucceedRate: 1       TargetName: typeA_172.41.0.10:53_kubernetes.default.svc.cluster.local       TargetProtocol: udp       TargetServer: 172.41.0.10:53     succeed: true     targetNumber: 1     targetType: kdoctor agent     MaxCPU: 30.651%     MaxMemory: 97.00MB   netDNSTaskSpec:     ... ReportRoundNumber: 1 RoundNumber: 1 Status: Finished TaskName: netdns-cluster TaskType: Netdns</code></p> <p>\u63a5\u4e0b\u6765\u60a8\u53ef\u4ee5\u6839\u636e\u60a8\u7684\u9700\u8981\u8fdb\u884c\u4efb\u52a1\u7684\u5b9a\u5236\u5316\u914d\u7f6e:AppHttpHealthy\u3001NetReach\u3001NetDns</p>"},{"location":"usage/get-started-kind-zh_CN/#_4","title":"\u5378\u8f7d","text":"<ul> <li> <p>\u5378\u8f7d Kind \u96c6\u7fa4</p> <p>\u6267\u884c <code>make e2e_clean</code> \u5378\u8f7d Kind \u96c6\u7fa4\u3002</p> </li> </ul>"},{"location":"usage/get-started-kind/","title":"Kind Quick Start","text":"<p>\u7b80\u4f53\u4e2d\u6587 | English</p> <p>Kind is a tool running local Kubernetes clusters using Docker container nodes. kdoctor provides scripts for installing Kind clusters to quickly build a Kind cluster with nginx, ingress, and loadbalancer, which you can use for kdoctor testing and experience.</p>"},{"location":"usage/get-started-kind/#prerequisites","title":"Prerequisites","text":"<ul> <li>Execute <code>make checkBin</code> to check if the development tools on the localhost meet the requirements for deploying a Kind cluster with kdoctor, and if the components are missing, they will be installed.</li> </ul>"},{"location":"usage/get-started-kind/#deploy-kdoctor-on-a-kind-cluster","title":"Deploy kdoctor on a Kind Cluster","text":"<ol> <li> <p>Clone the code for the stable version of kdoctor to the localhost and go to the root directory of the kdoctor project.</p> <p><code>bash ~# LATEST_RELEASE_VERISON=$(curl -s https://api.github.com/repos/kdoctor-io/kdoctor/releases | grep '\"tag_name\":' | grep -v rc | grep -Eo \"([0-9]+\\.[0-9]+\\.[0-9])\" | sort -r | head -n 1) ~# curl -Lo /tmp/$LATEST_RELEASE_VERISON.tar.gz https://github.com/kdoctor-io/kdoctor/archive/refs/tags/v$LATEST_RELEASE_VERISON.tar.gz ~# tar -xvf /tmp/$LATEST_RELEASE_VERISON.tar.gz -C /tmp/ ~# cd /tmp/kdoctor-$LATEST_RELEASE_VERISON</code></p> </li> <li> <p>Get the latest image of kdoctor by using the following method.</p> <p><code>bash ~# KDOCTOR_LATEST_IMAGE_TAG=$(curl -s https://api.github.com/repos/kdoctor-io/kdoctor/releases | jq -r '. [].tag_name | select((\"^v1.[0-9]*. [0-9]*$\"))' | head -n 1)</code></p> </li> <li> <p>Execute the following command to create a Kind cluster and install metallb, contour, nginx, and kdoctor.</p> <p><code>bash ~# make e2e_init -e PROJECT_IMAGE_VERSION=KDOCTOR_LATEST_IMAGE_TAG</code></p> <p>note: If you are a domestic user, you can use the following command to avoid pulling the image failures.</p> <p><code>bash ~# make e2e_init -e E2E_SPIDERPOOL_TAG=$SPIDERPOOL_LATEST_IMAGE_TAG -e E2E_CHINA_IMAGE_REGISTRY=true</code></p> </li> </ol>"},{"location":"usage/get-started-kind/#verify-the-installation","title":"Verify the Installation","text":"<p>Configure KUBECONFIG of the Kind cluster for kubectl by executing the following command in the root directory of the kdoctor project.</p> <p><code>bash    ~# export KUBECONFIG=$(pwd)/test/runtime/kubeconfig_kdoctor.config</code></p> <p>You can see the following output:</p> <pre><code>~# kubectl get nodes \nNAME                    STATUS   ROLES           AGE     VERSION\nkdoctor-control-plane   Ready    control-plane   3h50m    v1.27.1\nkdoctor-worker          Ready    &lt;none&gt;          3h50m   v1.27.1\n\n~# kubectl get pod -n kdoctor -owide\nNAME                                     READY   STATUS    RESTARTS   AGE     IP            NODE                    NOMINATED NODE   READINESS GATES\nkdoctor-agent-5n4nb                      1/1     Running   0          3h46m   172.40.1.29   kdoctor-worker          &lt;none&gt;           &lt;none&gt;\nkdoctor-agent-zm4tn                      1/1     Running   0          3h46m   172.40.0.83   kdoctor-control-plane   &lt;none&gt;           &lt;none&gt;\nkdoctor-controller-78589d96c8-lgcw9      1/1     Running   0          3h46m   172.40.1.28   kdoctor-worker          &lt;none&gt;           &lt;none&gt;\nkdoctor-test-server-6bf7f9df47-dq8th     1/1     Running   0          3h46m   172.40.0.82   kdoctor-control-plane   &lt;none&gt;           &lt;none&gt;\nkdoctor-test-server-6bf7f9df47-mhsml     1/1     Running   0          3h46m   172.40.1.27   kdoctor-worker          &lt;none&gt;           &lt;none&gt;\n\n~# kubectl get svc -n kdoctor\nNAME                    TYPE           CLUSTER-IP       EXTERNAL-IP              PORT(S)                                     AGE\nkdoctor-agent-ipv4      LoadBalancer   172.41.217.12    172.18.0.51              5711:30778/TCP,80:31835/TCP,443:30675/TCP   3h46m\nkdoctor-agent-ipv6      LoadBalancer   fd41::2274       fc00:f853:ccd:e793::50   5711:30022/TCP,80:30761/TCP,443:30516/TCP   3h46m\nkdoctor-controller      ClusterIP      172.41.210.120   &lt;none&gt;                   5721/TCP,5722/TCP,443/TCP                   3h46m\nkdoctor-test-server     ClusterIP      172.41.95.144    &lt;none&gt;                   80/TCP,443/TCP,53/UDP,53/TCP,853/TCP        3h46m\n</code></pre> <p><code>kdoctor-test-server</code> is kdoctor's test server, which contains http server, https server, dns udp server, dns tcp server, for testing kdocotr functions.</p>"},{"location":"usage/get-started-kind/#_1","title":"\u914d\u7f6e\u4efb\u52a1","text":"AppHttpHealthyNetReachNetDns <p>We have access to kdocotr-test-server's service ip to get a response from kdocotr-test-server.</p> <p><code>bash SERVER=\"172.41.95.144\" cat &lt;&lt;EOF | kubectl apply -f - apiVersion: kdoctor.io/v1beta1 kind: AppHttpHealthy metadata:   name: http-test spec:   request:     durationInSecond: 10     perRequestTimeoutInMS: 1000     qps: 10   schedule:     roundNumber: 1     roundTimeoutMinute: 1     schedule: 0 1   expect:     meanAccessDelayInMs: 1000     successRate: 1   target:     host: http://${SERVER}     method: GET EOF</code></p> <p>Check the status of the task and wait for it to complete.</p> <p><code>bash \uff5e# kubectl get apphttphealthy NAME        FINISH   EXPECTEDROUND   DONEROUND   LASTROUNDSTATUS   SCHEDULE http-test   false    1               0                             0 1 \uff5e# kubectl get apphttphealthy NAME        FINISH   EXPECTEDROUND   DONEROUND   LASTROUNDSTATUS   SCHEDULE http-test   true     1               1           succeed           0 1</code> </p> <p>Detailed reports on query missions.</p> <p><code>bash ~# kubectl get kdoctorreport http-test -oyaml apiVersion: system.kdoctor.io/v1beta1 kind: KdoctorReport metadata:   creationTimestamp: \"2023-12-11T07:20:01Z\"   name: http-test spec:   FailedRoundNumber: null   FinishedRoundNumber: 1   Report:   - EndTimeStamp: \"2023-12-11T07:20:11Z\"     HttpAppHealthyTask:       Detail:       - MeanDelay: 10.44         Metrics:           Duration: 10.003604664s           EndTime: \"2023-12-11T07:20:11Z\"           Errors: {}           ExistsNotSendRequests: false           Latencies:             MaxInMs: 0             MeanInMs: 10.44             MinInMs: 0             P50InMs: 0             P90InMs: 0             P95InMs: 0             P99InMs: 0           RequestCounts: 100           StartTime: \"2023-12-11T07:20:01Z\"           StatusCodes:             \"200\": 100           SuccessCounts: 100           TPS: 9.996396634892049           TotalDataSize: 37394 byte         Succeed: true         SucceedRate: 1         TargetMethod: GET         TargetName: HttpAppHealthy target         TargetUrl: http://172.41.95.144       Succeed: true       SystemResource:         MaxCPU: 12.723%         MaxMemory: 35.00MB         MeanCPU: 6.227%       TargetNumber: 1       TargetType: HttpAppHealthy       TotalRunningLoad:         AppHttpHealthyQPS: 10         NetDnsQPS: 0         NetReachQPS: 0     HttpAppHealthyTaskSpec:       ...     NodeName: kdoctor-control-plane     PodName: kdoctor-agent-zm4tn     ReportType: agent test report     RoundDuration: 10.014725655s     RoundNumber: 1     RoundResult: succeed     StartTimeStamp: \"2023-12-11T07:20:01Z\"     TaskName: apphttphealthy.http-test     TaskType: AppHttpHealthy   - EndTimeStamp: \"2023-12-11T07:20:11Z\"     HttpAppHealthyTask:       Detail:       - MeanDelay: 11.24         Metrics:           Duration: 10.00058331s           EndTime: \"2023-12-11T07:20:11Z\"           Errors: {}           ExistsNotSendRequests: false           Latencies:             MaxInMs: 0             MeanInMs: 11.24             MinInMs: 0             P50InMs: 0             P90InMs: 0             P95InMs: 0             P99InMs: 0           RequestCounts: 100           StartTime: \"2023-12-11T07:20:01Z\"           StatusCodes:             \"200\": 100           SuccessCounts: 100           TPS: 9.999416724023071           TotalDataSize: 37391 byte         Succeed: true         SucceedRate: 1         TargetMethod: GET         TargetName: HttpAppHealthy target         TargetUrl: http://172.41.95.144       Succeed: true       SystemResource:         MaxCPU: 12.704%         MaxMemory: 35.00MB         MeanCPU: 6.370%       TargetNumber: 1       TargetType: HttpAppHealthy       TotalRunningLoad:         AppHttpHealthyQPS: 10         NetDnsQPS: 0         NetReachQPS: 0     HttpAppHealthyTaskSpec:       ...     NodeName: kdoctor-worker     PodName: kdoctor-agent-5n4nb     ReportType: agent test report     RoundDuration: 10.010301747s     RoundNumber: 1     RoundResult: succeed     StartTimeStamp: \"2023-12-11T07:20:01Z\"     TaskName: apphttphealthy.http-test     TaskType: AppHttpHealthy   ReportRoundNumber: 1   RoundNumber: 1   Status: Finished   TaskName: http-test   TaskType: AppHttpHealthy</code></p> <p>We test the connectivity of the cluster.</p> <p><code>bash cat &lt;&lt;EOF | kubectl apply -f - apiVersion: kdoctor.io/v1beta1 kind: NetReach metadata:   name: task spec:   expect:     meanAccessDelayInMs: 1500     successRate: 1   request:     durationInSecond: 10     perRequestTimeoutInMS: 1000     qps: 10   schedule:     roundNumber: 1     roundTimeoutMinute: 1     schedule: 0 1   target:     clusterIP: true     endpoint: true     ingress: true     ipv4: true     loadBalancer: true     multusInterface: false     nodePort: true EOF</code></p> <p>Check the status of the task and wait for it to complete.</p> <p><code>bash  ~# kubectl get netreach NAME   FINISH   EXPECTEDROUND   DONEROUND   LASTROUNDSTATUS   SCHEDULE task   false    1               0                             0 1 ~# kubectl get netreach NAME   FINISH   EXPECTEDROUND   DONEROUND   LASTROUNDSTATUS   SCHEDULE task   true     1               1           succeed           0 1</code></p> <p>Detailed reports on query missions.</p> <p><code>bash root@kdoctor-control-plane:/# kubectl get kdoctorreport task -oyaml apiVersion: system.kdoctor.io/v1beta1 kind: KdoctorReport metadata: creationTimestamp: null name: task spec: FailedRoundNumber: null FinishedRoundNumber: 1 Report: - NodeName: kdoctor-control-plane   NetReachTask:     Detail:     - TargetName: AgentLoadbalancerV4IP_172.18.0.51:80       Metrics:         Duration: 10.032286878s         EndTime: \"2023-08-01T08:37:06Z\"         Errors: {}         Latencies:           MaxInMs: 0           MeanInMs: 23.08           MinInMs: 0           P50InMs: 0           P90InMs: 0           P95InMs: 0           P99InMs: 0         RequestCounts: 100         StartTime: \"2023-08-01T08:36:56Z\"         StatusCodes:           \"200\": 100         SuccessCounts: 100         TPS: 9.967817030760152         TotalDataSize: 36968 byte       Succeed: true       SucceedRate: 1       TargetMethod: GET       TargetUrl: http://172.18.0.51:80       MeanDelay: 23.08     - TargetName: AgentNodePortV4IP_172.18.0.3_32713       Metrics:         ...       Succeed: true       SucceedRate: 1       TargetMethod: GET       TargetUrl: http://172.18.0.3:32713       MeanDelay: 68.42     - TargetName: AgentPodV4IP_kdoctor-agent-ntp9l_172.40.0.6       Metrics:         ...       Succeed: true       SucceedRate: 1       TargetMethod: GET       TargetUrl: http://172.40.0.6:80       MeanDelay: 44.049503     - TargetName: AgentClusterV4IP_172.41.249.6:80       Metrics:         ...       Succeed: true       SucceedRate: 1       TargetMethod: GET       TargetUrl: http://172.41.249.6:80       MeanDelay: 26.307692     - TargetName: AgentPodV4IP_kdoctor-agent-krrnp_172.40.1.5       Metrics:         ...       Succeed: true       SucceedRate: 1       TargetMethod: GET       TargetUrl: http://172.40.1.5:80       MeanDelay: 61.564358     - TargetName: AgentIngress_http://172.18.0.50/kdoctoragent       Metrics:         ...       Succeed: true       SucceedRate: 1       TargetMethod: GET       TargetUrl: http://172.18.0.50/kdoctoragent       MeanDelay: 65.47059     Succeed: true     TargetNumber: 6     TargetType: NetReach     MaxCPU: 26.203%     MaxMemory: 101.00MB   NetReachTaskSpec:   ...   PodName: kdoctor-agent-ntp9l   ReportType: agent test report   RoundDuration: 11.178657432s   RoundNumber: 1   RoundResult: succeed   StartTimeStamp: \"2023-08-01T08:36:56Z\"   EndTimeStamp: \"2023-08-01T08:37:07Z\"   TaskName: netreach.task   TaskType: NetReach - NodeName: kdoctor-worker   NetReachTask:     Detail:     - TargetName: AgentClusterV4IP_172.41.249.6:80       Metrics:         ...       Succeed: true       SucceedRate: 1       TargetMethod: GET       TargetUrl: http://172.41.249.6:80       MeanDelay: 47.25     - TargetName: AgentNodePortV4IP_172.18.0.2_32713       Metrics:         ...       Succeed: true       SucceedRate: 1       TargetMethod: GET       TargetUrl: http://172.18.0.2:32713       MeanDelay: 13.480392     - TargetName: AgentPodV4IP_kdoctor-agent-krrnp_172.40.1.5       Metrics:         ...       Succeed: true       SucceedRate: 1       TargetMethod: GET       TargetUrl: http://172.40.1.5:80       MeanDelay: 39.637257     - TargetName: AgentPodV4IP_kdoctor-agent-ntp9l_172.40.0.6       Metrics:         ...       Succeed: true       SucceedRate: 1       TargetMethod: GET       TargetUrl: http://172.40.0.6:80       MeanDelay: 51.38614     - TargetName: AgentLoadbalancerV4IP_172.18.0.51:80       Metrics:         ...       Succeed: true       SucceedRate: 1       TargetMethod: GET       TargetUrl: http://172.18.0.51:80       MeanDelay: 41.735847       - TargetName: AgentIngress_http://172.18.0.50/kdoctoragent       Metrics:         ...       Succeed: true       SucceedRate: 1       TargetMethod: GET       TargetUrl: http://172.18.0.50/kdoctoragent       MeanDelay: 60.463634     Succeed: true     TargetNumber: 6     TargetType: NetReach     MaxCPU: 30.651%     MaxMemory: 97.00MB   NetReachTaskSpec:   ...   PodName: kdoctor-agent-krrnp   ReportType: agent test report   RoundDuration: 11.180813761s   RoundNumber: 1   RoundResult: succeed   StartTimeStamp: \"2023-08-01T08:36:56Z\"   EndTimeStamp: \"2023-08-01T08:37:07Z\"   TaskName: netreach.task   TaskType: NetReach ReportRoundNumber: 1 RoundNumber: 1 Status: Finished TaskName: task TaskType: NetReach</code></p> <p>We perform a connectivity check on the cluster's dns service.</p> <p><code>bash cat &lt;&lt;EOF | kubectl apply -f - apiVersion: kdoctor.io/v1beta1 kind: Netdns metadata:   name: netdns-cluster spec:   expect:     meanAccessDelayInMs: 1500     successRate: 1   request:     domain: kubernetes.default.svc.cluster.local     durationInSecond: 10     perRequestTimeoutInMS: 1000     protocol: udp     qps: 10   schedule:     roundNumber: 1     roundTimeoutMinute: 1     schedule: 0 1   target:     targetDns:       serviceName: kube-dns       serviceNamespace: kube-system       testIPv4: true EOF</code></p> <p>Check the status of the task and wait for it to complete.</p> <p><code>bash ~# kubectl get netdns NAME             FINISH   EXPECTEDROUND   DONEROUND   LASTROUNDSTATUS   SCHEDULE netdns-cluster   false    1               0                             0 1 ~# kubectl get netdns NAME             FINISH   EXPECTEDROUND   DONEROUND   LASTROUNDSTATUS   SCHEDULE netdns-cluster   true     1               1           succeed           0 1</code></p> <p>Detailed reports on query missions.</p> <p><code>bash root@kdoctor-control-plane:/# kubectl get kdoctorreport netdns-cluster -oyaml apiVersion: system.kdoctor.io/v1beta1 kind: KdoctorReport metadata: creationTimestamp: null name: netdns-cluster spec: FailedRoundNumber: null FinishedRoundNumber: 1 Report: - NodeName: kdoctor-control-plane   PodName: kdoctor-agent-ntp9l   ReportType: agent test report   RoundDuration: 11.025723086s   RoundNumber: 1   RoundResult: succeed   StartTimeStamp: \"2023-08-01T09:09:39Z\"   EndTimeStamp: \"2023-08-01T09:09:50Z\"   TaskName: netdns.netdns-cluster   TaskType: Netdns   netDNSTask:     detail:     - FailureReason: null       MeanDelay: 0.2970297       Metrics:         DNSMethod: udp         DNSServer: 172.41.0.10:53         Duration: 11.002666395s         EndTime: \"2023-08-01T09:09:50Z\"         Errors: {}         FailedCounts: 0         Latencies:           MaxInMs: 0           MeanInMs: 0.2970297           MinInMs: 0           P50InMs: 0           P90InMs: 0           P95InMs: 0           P99InMs: 0         ReplyCode:           NOERROR: 101         RequestCounts: 101         StartTime: \"2023-08-01T09:09:39Z\"         SuccessCounts: 101         TPS: 9.179593052634765         TargetDomain: kubernetes.default.svc.cluster.local.       Succeed: true       SucceedRate: 1       TargetName: typeA_172.41.0.10:53_kubernetes.default.svc.cluster.local       TargetProtocol: udp       TargetServer: 172.41.0.10:53     succeed: true     targetNumber: 1     targetType: kdoctor agent     MaxCPU: 30.651%     MaxMemory: 97.00MB   netDNSTaskSpec:     ... - NodeName: kdoctor-worker   PodName: kdoctor-agent-krrnp   ReportType: agent test report   RoundDuration: 10.024533428s   RoundNumber: 1   RoundResult: succeed   StartTimeStamp: \"2023-08-01T09:09:39Z\"   EndTimeStamp: \"2023-08-01T09:09:49Z\"   TaskName: netdns.netdns-cluster   TaskType: Netdns   netDNSTask:     detail:     - FailureReason: null       MeanDelay: 0.58       Metrics:         ...       Succeed: true       SucceedRate: 1       TargetName: typeA_172.41.0.10:53_kubernetes.default.svc.cluster.local       TargetProtocol: udp       TargetServer: 172.41.0.10:53     succeed: true     targetNumber: 1     targetType: kdoctor agent     MaxCPU: 30.651%     MaxMemory: 97.00MB   netDNSTaskSpec:     ... ReportRoundNumber: 1 RoundNumber: 1 Status: Finished TaskName: netdns-cluster TaskType: Netdns</code></p> <p>Next you can customize the configuration of the task according to your needs:AppHttpHealthy\u3001NetReach\u3001NetDns</p>"},{"location":"usage/get-started-kind/#uninstall","title":"Uninstall","text":"<ul> <li> <p>To uninstall the Kind cluster</p> <p>Execute <code>make e2e_clean</code> to uninstall the Kind cluster.</p> </li> </ul>"},{"location":"usage/install-zh_CN/","title":"\u5b89\u88c5\u6587\u6863","text":"<p>English | \u7b80\u4f53\u4e2d\u6587</p>"},{"location":"usage/install-zh_CN/#_2","title":"\u4ecb\u7ecd","text":"<p>\u5b89\u88c5 kdoctor \u5bf9\u96c6\u7fa4\u5185\u5916\u7684\u7f51\u7edc\u53ca\u6027\u80fd\u8fdb\u884c\u68c0\u67e5</p>"},{"location":"usage/install-zh_CN/#_3","title":"\u5b9e\u65bd\u8981\u6c42","text":"<p>1.\u4e00\u5957\u5b8c\u6574\u7684 k8s \u96c6\u7fa4</p> <p>2.\u5df2\u5b89\u88c5 Helm</p> <p>3.storageClass(\u53ef\u9009) \u5982\u679c\u9700\u8981 kdoctor-controller \u9ad8\u53ef\u7528\u4e14\u9700\u8981\u62a5\u544a\u6301\u4e45\u5316</p>"},{"location":"usage/install-zh_CN/#_4","title":"\u5b89\u88c5","text":""},{"location":"usage/install-zh_CN/#helm","title":"\u6dfb\u52a0 helm \u4ed3\u5e93","text":"<pre><code>helm repo add kdoctor https://kdoctor-io.github.io/kdoctor\nhelm repo update kdoctor\n</code></pre>"},{"location":"usage/install-zh_CN/#kdoctor","title":"\u5b89\u88c5 kdoctor","text":"<p>kdoctor \u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u7684\u9700\u6c42\u8fdb\u884c\u5b89\u88c5\uff0c\u4ee5\u4e0b\u4e3a\u51e0\u4e2a\u573a\u666f\u7684\u63a8\u8350\u5b89\u88c5\u65b9\u5f0f</p>"},{"location":"usage/install-zh_CN/#_5","title":"\u975e\u9ad8\u53ef\u7528\u5b89\u88c5","text":"<p>\u4ee5\u4e0b\u65b9\u6cd5 kdoctor agent \u53ea\u5c06\u62a5\u544a\u6253\u5370\u5230\u6807\u51c6\u8f93\u51fa\uff1a</p> <pre><code>helm install kdoctor kdoctor/kdoctor \\\n    -n kdoctor --debug --create-namespace \n</code></pre>"},{"location":"usage/install-zh_CN/#_6","title":"\u9ad8\u53ef\u7528\u5b89\u88c5","text":"<p>\u4ee5\u4e0b\u65b9\u6cd5\u5c06 kdoctor-controller \u7684\u6536\u96c6\u62a5\u544a\u5f15\u5bfc\u5230\u5b58\u50a8\uff0c\u56e0\u6b64,\u9700\u8981\u5b89\u88c5 storageClass</p> <pre><code>\nhelm  install kdoctor kdoctor/kdoctor \\\n    -n kdoctor --debug --create-namespace \\\n    --set kdoctorController.replicas=2 \\\n    --set feature.aggregateReport.controller.pvc.enabled=true \\\n    --set feature.aggregateReport.controller.pvc.storageClass=local-path  \\\n    --set feature.aggregateReport.controller.pvc.storageRequests=\"100Mi\" \\\n    --set feature.aggregateReport.controller.pvc.storageLimits=\"500Mi\"\n</code></pre>"},{"location":"usage/install-zh_CN/#kdoctor_1","title":"\u786e\u8ba4 kdoctor \u6240\u6709\u7ec4\u4ef6\u6b63\u5e38\u8fd0\u884c","text":"<pre><code>kubectl get pod -n kdoctor\nNAME                                  READY   STATUS    RESTARTS   AGE\nkdoctor-controller-686b75d6d7-k4dcq   1/1     Running   0          137m\n</code></pre>"},{"location":"usage/install-zh_CN/#kdoctor_2","title":"\u5378\u8f7d kdoctor","text":"<pre><code>helm uninstall kdoctor -n kdoctor\n</code></pre>"},{"location":"usage/install/","title":"Install","text":"<p>\u7b80\u4f53\u4e2d\u6587 | English</p>"},{"location":"usage/install/#introduction","title":"Introduction","text":"<p>Install kdoctor to check network and performance inside and outside the cluster.</p>"},{"location":"usage/install/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>A complete k8s cluster.</p> </li> <li> <p>Helm has been installed.</p> </li> <li> <p>StorageClass (optional) is supported if kdoctor-controller is required for high availability and report persistence is required.</p> </li> </ol>"},{"location":"usage/install/#install_1","title":"Install","text":""},{"location":"usage/install/#add-helm-repository","title":"Add Helm Repository","text":"<pre><code>helm repo add kdoctor https://kdoctor-io.github.io/kdoctor\nhelm repo update kdoctor\n</code></pre>"},{"location":"usage/install/#install-kdoctor","title":"Install kdoctor","text":"<p>kdoctor can be installed according to different needs, the following are the recommended installation methods for several scenarios</p>"},{"location":"usage/install/#non-highly-available-installation","title":"Non-highly Available Installation","text":"<p>The kdoctor agent only prints reports to standard output in the following way:</p> <pre><code>helm install kdoctor kdoctor/kdoctor \\\n    -n kdoctor --debug --create-namespace \n</code></pre>"},{"location":"usage/install/#highly-available-installation","title":"Highly Available Installation","text":"<p>The following method directs the collection reports from kdoctor-controller to storage, so you need to install storageClass.</p> <pre><code>\nhelm install kdoctor kdoctor/kdoctor \\\n    -n kdoctor --debug --create-namespace \\\n    --set kdoctorController.replicas=2 \\\n    --set feature.aggregateReport.controller.pvc.enabled=true \\\n    --set feature.aggregateReport.controller.pvc.storageClass=local-path \\\n    --set feature.aggregateReport.controller.pvc.storageRequests=\"100Mi\" \\\n    --set feature.aggregateReport.controller.pvc.storageLimits=\"500Mi\"\n</code></pre>"},{"location":"usage/install/#verify-that-all-components-of-kdoctor-are-running-properly","title":"Verify that All Components of kdoctor are Running Properly","text":"<pre><code>kubectl get pod -n kdoctor\nNAME                                  READY   STATUS    RESTARTS   AGE\nkdoctor-controller-686b75d6d7-k4dcq   1/1     Running   0          137m\n</code></pre>"},{"location":"usage/install/#uninstall-kdoctor","title":"Uninstall kdoctor","text":"<pre><code>helm uninstall kdoctor -n kdoctor\n</code></pre>"},{"location":"usage/netdns-zh_CN/","title":"NetDns","text":"<p>English | \u7b80\u4f53\u4e2d\u6587</p>"},{"location":"usage/netdns-zh_CN/#_1","title":"\u4ecb\u7ecd","text":"<p>\u5bf9\u4e8e\u8fd9\u79cd\u4efb\u52a1\uff0c kdoctor-controller \u4f1a\u6839\u636e agentSpec \u751f\u6210\u5bf9\u5e94\u7684 agent \u7b49\u8d44\u6e90 \uff0c\u6bcf\u4e00\u4e2a agent Pod \u90fd\u4f1a\u5411\u6307\u5b9a\u7684 DNS server \u53d1\u9001 DNS \u8bf7\u6c42\uff0c\u9ed8\u8ba4\u5e76\u53d1\u91cf\u4e3a 50 \u53ef\u8986\u76d6\u591a\u526f\u672c\u60c5\u51b5\uff0c\u5e76\u53d1\u91cf\u53ef\u5728 kdoctor \u7684 configmap \u4e2d\u8bbe\u7f6e\uff0c\u5e76\u83b7\u5f97\u6210\u529f\u7387\u548c\u5e73\u5747\u5ef6\u8fdf\u3002\u6839\u636e\u6210\u529f\u6761\u4ef6\u6765\u5224\u65ad\u7ed3\u679c\u662f\u5426\u6210\u529f\u3002\u5e76\u4e14\uff0c\u53ef\u4ee5\u901a\u8fc7\u805a\u5408 API \u83b7\u53d6\u8be6\u7ec6\u7684\u62a5\u544a\u3002</p> <ol> <li> <p>\u5e94\u7528\u573a\u666f\uff1a</p> <ul> <li>\u751f\u4ea7\u6216 E2E \u73af\u5883\u4e0b\uff0c\u68c0\u6d4b\u96c6\u7fa4\u6bcf\u4e2a\u89d2\u843d\u53ef\u8bbf\u95ee CoreDNS \u670d\u52a1</li> <li>\u5728\u5e94\u7528\u90e8\u7f72\u9636\u6bb5\uff0c\u7528\u4ee5\u914d\u5408\u8c03\u6574 CoreDNS \u7684\u8d44\u6e90\u548c\u526f\u672c\u6570\u91cf\uff0c\u4ee5\u786e\u8ba4\u80fd\u591f\u652f\u6491\u671f\u671b\u7684\u8bbf\u95ee\u538b\u529b</li> <li>\u7ed9 CoreDNS \u6ce8\u5165\u538b\u529b\uff0c\u914d\u5408 CoreDNS \u5347\u7ea7\u6d4b\u8bd5\u3001\u6df7\u6c8c\u6d4b\u8bd5\u3001bug \u590d\u73b0\u7b49\u76ee\u7684</li> <li>\u6d4b\u8bd5\u96c6\u7fa4\u5916\u90e8\u7684 DNS \u670d\u52a1</li> </ul> </li> <li> <p>\u5173\u4e8e NetDns CRD \u7684\u66f4\u591a\u63cf\u8ff0\uff0c\u53ef\u53c2\u8003NetDns</p> </li> <li> <p>\u529f\u80fd\u5217\u8868:</p> <ul> <li>\u652f\u6301\u96c6\u7fa4\u5185\u5916 DNS server \u6d4b\u8bd5</li> <li>\u652f\u6301 typeA \u3001typeAAAA \u8bb0\u5f55</li> <li>\u652f\u6301 UDP\u3001TCP\u3001TCP-TLS \u534f\u8bae</li> </ul> </li> </ol>"},{"location":"usage/netdns-zh_CN/#_2","title":"\u4f7f\u7528\u6b65\u9aa4","text":"<p>\u63a5\u4e0b\u6765\u5c06\u5c55\u793a <code>NetDNS</code> \u7684\u4f7f\u7528\u793a\u4f8b</p>"},{"location":"usage/netdns-zh_CN/#kdoctor","title":"\u5b89\u88c5 kdoctor","text":"<p>\u53c2\u7167\u5b89\u88c5\u6559\u7a0b\u5b89\u88c5 kdoctor</p>"},{"location":"usage/netdns-zh_CN/#server","title":"\u5b89\u88c5\u6d4b\u8bd5 server (\u9009\u505a)","text":"<p>kdoctor \u5b98\u65b9\u4ed3\u5e93\u4e2d\u5305\u542b\u4e86\u4e00\u4e2a\u540d\u4e3a server \u7684\u5e94\u7528\uff0c\u5185\u5305\u542b http server\uff0chttps server, DNS server\uff0c\u53ef\u7528\u6765\u6d4b\u8bd5 kdoctor \u529f\u80fd\uff0c\u82e5\u5b58\u5728\u5176\u4ed6\u6d4b\u8bd5\u7684 server \u53ef\u8df3\u8fc7\u5b89\u88c5\u3002</p> <pre><code>helm repo add kdoctor https://kdoctor-io.github.io/kdoctor\nhelm repo update kdoctor\nhelm install server kdoctor/server -n kdoctor-test-server --wait --debug --create-namespace \n</code></pre> <p>\u67e5\u770b\u6d4b\u8bd5 server \u72b6\u6001</p> <pre><code>kubectl get pod -n kdoctor -owide\nNAME                                READY   STATUS    RESTARTS   AGE   IP            NODE                    NOMINATED NODE   READINESS GATES\nserver-7649566ff9-dv4jc   1/1     Running   0          76s   172.40.1.45   kdoctor-worker          &lt;none&gt;           &lt;none&gt;\nserver-7649566ff9-qc5dh   1/1     Running   0          76s   172.40.0.35   kdoctor-control-plane   &lt;none&gt;           &lt;none&gt;\n</code></pre> <p>\u83b7\u53d6\u6d4b\u8bd5 server \u7684 service \u5730\u5740</p> <pre><code>kubectl get service -n kdoctor \nNAME               TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)                                AGE\nserver   ClusterIP   172.41.71.0   &lt;none&gt;        80/TCP,443/TCP,53/UDP,53/TCP,853/TCP   2m31s\n</code></pre>"},{"location":"usage/netdns-zh_CN/#netdns_1","title":"\u521b\u5efa NetDns","text":"<p>\u521b\u5efa <code>NetDns</code>\uff0c\u8be5\u4efb\u52a1\u5c06\u6267\u884c\u4e00\u8f6e\u6301\u7eed 10s \u7684\u4efb\u52a1\uff0c\u4efb\u52a1\u4f1a\u5411\u96c6\u7fa4\u5185 DNS server \u4ee5 QPS \u4e3a 10 \u7684\u901f\u5ea6\u4f7f\u7528 UDP \u534f\u8bae\uff0c\u8bf7\u6c42\u89e3\u6790 <code>kubernetes.default.svc.cluster.local</code> \u57df\u540d\u7684 typeA \u8bb0\u5f55\uff0c\u5e76\u4e14\u7acb\u5373\u6267\u884c\u3002</p> <pre><code>cat &lt;&lt;EOF | kubectl apply -f -\napiVersion: kdoctor.io/v1beta1\nkind: Netdns\nmetadata:\n  name: netdns-cluster\nspec:\n  expect:\n    meanAccessDelayInMs: 1500\n    successRate: 1\n  request:\n    domain: kubernetes.default.svc.cluster.local\n    durationInSecond: 10\n    perRequestTimeoutInMS: 1000\n    protocol: udp\n    qps: 10\n  schedule:\n    roundNumber: 1\n    roundTimeoutMinute: 1\n    schedule: 0 1\n  target:\n    targetDns:\n      serviceName: kube-dns\n      serviceNamespace: kube-system\n      testIPv4: true\nEOF\n</code></pre>"},{"location":"usage/netdns-zh_CN/#_3","title":"\u67e5\u770b\u4efb\u52a1\u72b6\u6001","text":"<p>\u5f53\u6267\u884c\u5b8c\u6210\u4e00\u8f6e\u540e\u5c31\u53ef\u4ee5\u4f7f\u7528 kdoctor \u805a\u5408 api \u67e5\u770b\u5f53\u524d\u8f6e\u7684\u62a5\u544a\uff0c\u5f53 FINISH \u4e3a true \u65f6\u4efb\u52a1\u5168\u90e8\u5b8c\u6210\uff0c\u53ef\u67e5\u770b\u6574\u4f53\u62a5\u544a</p> <pre><code>kubectl get netdns\nNAME             FINISH   EXPECTEDROUND   DONEROUND   LASTROUNDSTATUS   SCHEDULE\nnetdns-cluster   true     1               1           succeed           0 1\n</code></pre> <ul> <li>FINISH\uff1a\u4efb\u52a1\u662f\u5426\u5b8c\u6210</li> <li>EXPECTEDROUND\uff1a\u5e0c\u671b\u4efb\u52a1\u6267\u884c\u8f6e\u6570</li> <li>DONEROUND\uff1a\u5f53\u524d\u6267\u884c\u5b8c\u6210\u8f6e\u6570</li> <li>LASTROUNDSTATUS\uff1a\u6700\u540e\u4e00\u8f6e\u4efb\u52a1\u6267\u884c\u60c5\u51b5</li> <li>SCHEDULE\uff1a\u4efb\u52a1\u7684\u8c03\u5ea6\u89c4\u5219</li> </ul>"},{"location":"usage/netdns-zh_CN/#_4","title":"\u67e5\u770b\u4efb\u52a1\u62a5\u544a","text":"<ol> <li> <p>\u67e5\u770b\u5df2\u6709\u62a5\u544a</p> <p><code>shell kubectl get kdoctorreport NAME             CREATED AT netdns-cluster   0001-01-01T00:00:00Z</code></p> </li> <li> <p>\u67e5\u770b\u5177\u4f53\u4efb\u52a1\u62a5\u544a</p> <p>\u8282\u70b9 kdoctor-control-plane \u548c\u8282\u70b9 kdoctor-worker \u4e0a agent \u5206\u522b\u90fd\u6267\u884c\u4e00\u8f6e\u53d1\u538b\u540e\uff0c\u5c06 agent \u62a5\u544a\u805a\u5408\u800c\u6210\u3002</p> <p><code>shell root@kdoctor-control-plane:/# kubectl get kdoctorreport netdns-cluster -oyaml apiVersion: system.kdoctor.io/v1beta1 kind: KdoctorReport metadata:   creationTimestamp: null   name: netdns-cluster spec:   FailedRoundNumber: null   FinishedRoundNumber: 1   Report:   - NodeName: kdoctor-control-plane     PodName: kdoctor-agent-ntp9l     ReportType: agent test report     RoundDuration: 11.025723086s     RoundNumber: 1     RoundResult: succeed     StartTimeStamp: \"2023-08-01T09:09:39Z\"     EndTimeStamp: \"2023-08-01T09:09:50Z\"     TaskName: netdns.netdns-cluster     TaskType: Netdns     netDNSTask:       detail:       - FailureReason: null         MeanDelay: 0.2970297         Metrics:           DNSMethod: udp           DNSServer: 172.41.0.10:53           Duration: 11.002666395s           EndTime: \"2023-08-01T09:09:50Z\"           Errors: {}           FailedCounts: 0           Latencies:             MaxInMs: 0             MeanInMs: 0.2970297             MinInMs: 0             P50InMs: 0             P90InMs: 0             P95InMs: 0             P99InMs: 0           ReplyCode:             NOERROR: 101           RequestCounts: 101           StartTime: \"2023-08-01T09:09:39Z\"           SuccessCounts: 101           TPS: 9.179593052634765           TargetDomain: kubernetes.default.svc.cluster.local.         Succeed: true         SucceedRate: 1         TargetName: typeA_172.41.0.10:53_kubernetes.default.svc.cluster.local         TargetProtocol: udp         TargetServer: 172.41.0.10:53       succeed: true       targetNumber: 1       targetType: kdoctor agent       MaxCPU: 30.651%       MaxMemory: 97.00MB     netDNSTaskSpec:       ...   - NodeName: kdoctor-worker     PodName: kdoctor-agent-krrnp     ReportType: agent test report     RoundDuration: 10.024533428s     RoundNumber: 1     RoundResult: succeed     StartTimeStamp: \"2023-08-01T09:09:39Z\"     EndTimeStamp: \"2023-08-01T09:09:49Z\"     TaskName: netdns.netdns-cluster     TaskType: Netdns     netDNSTask:       detail:       - FailureReason: null         MeanDelay: 0.58         Metrics:           ...         Succeed: true         SucceedRate: 1         TargetName: typeA_172.41.0.10:53_kubernetes.default.svc.cluster.local         TargetProtocol: udp         TargetServer: 172.41.0.10:53       succeed: true       targetNumber: 1       targetType: kdoctor agent       MaxCPU: 30.651%       MaxMemory: 97.00MB     netDNSTaskSpec:       ...   ReportRoundNumber: 1   RoundNumber: 1   Status: Finished   TaskName: netdns-cluster   TaskType: Netdns</code></p> </li> </ol> <p>\u82e5\u62a5\u544a\u4e0e\u9884\u671f\u7ed3\u679c\u4e0d\u7b26\u5408\uff0c\u53ef\u5173\u6ce8\u62a5\u544a\u4e2d\u7684 MaxCPU\u548c MaxMemory \u5b57\u6bb5\uff0c\u5bf9\u6bd4 agent \u8d44\u6e90\u662f\u5426\u5145\u8db3\uff0c\u8c03\u6574 agent \u7684\u8d44\u6e90\u9650\u5236\u3002</p>"},{"location":"usage/netdns-zh_CN/#dns-server","title":"\u96c6\u7fa4\u5916 DNS server \u6d4b\u8bd5","text":"<p>\u4e0b\u9762\u662f\u643a\u5e26 body \u7684 http \u8bf7\u6c42\u793a\u4f8b\u548c https \u7684\u8bf7\u6c42\u793a\u4f8b\uff1a</p> <ol> <li> <p>\u521b\u5efa <code>NetDns</code> \u4efb\u52a1\uff0c\u8be5\u4efb\u52a1\u5c06\u6267\u884c\u4e00\u8f6e\u6301\u7eed 10s \u7684\u4efb\u52a1\uff0c\u4efb\u52a1\u4f1a\u5411\u6307\u5b9a\u7684 DNS server \u4ee5 QPS \u4e3a 10 \u7684\u901f\u5ea6\u8fdb\u884c UDP \u8bf7\u6c42 <code>kubernetes.default.svc.cluster.local</code> \u57df\u540d\u7684 typeAAAA\uff0c\u5e76\u4e14\u7acb\u5373\u6267\u884c\u3002</p> <p>\u8fd9\u91cc\u4f7f\u7528 server \u7684 service \u5730\u5740\uff0c\u82e5\u6709\u5176\u4ed6 server \u5730\u5740 \u53ef\u4f7f\u7528\u5176\u4ed6 server \u5730\u5740\u3002</p> <p>\u521b\u5efa <code>NetDns</code></p> <p><code>shell SERVER=\"172.41.71.0\" apiVersion: kdoctor.io/v1beta1 kind: Netdns metadata:   name: netdns- user spec:   expect:     meanAccessDelayInMs: 1500     successRate: 1   request:     domain: kubernetes.default.svc.cluster.local     durationInSecond: 10     perRequestTimeoutInMS: 1000     protocol: udp     qps: 10   schedule:     roundNumber: 1     roundTimeoutMinute: 1     schedule: 0 1   target:     targetUser:       port: 53       server: ${SERVER} EOF</code></p> </li> </ol>"},{"location":"usage/netdns-zh_CN/#_5","title":"\u73af\u5883\u6e05\u7406","text":"<pre><code>kubectl delete netdns netdns-cluster netdns- user\n</code></pre>"},{"location":"usage/netdns/","title":"netdns","text":"<p>\u7b80\u4f53\u4e2d\u6587 | English</p>"},{"location":"usage/netdns/#introduction","title":"Introduction","text":"<p>kdoctor-controller creates the necessary resources, including agent, based on the agentSpec. Each agent Pod sends DNS requests to a specified DNS server. By default, the concurrency level is set to 50, which can handle scenarios with multiple replicas. The concurrency level can be configured in the kdoctor configmap. The success rate and average latency are measured, and the results are evaluated based on predefined success criteria. Detailed reports can be obtained using the aggregate API.</p> <ol> <li> <p>Use Cases:</p> <ul> <li>Test the accessibility of the CoreDNS service from all corners of the cluster in production or E2E environments.</li> <li>Adjust CoreDNS resources and replica count during application deployment to ensure it can handle the expected load.</li> <li>Apply stress to CoreDNS for purposes like testing upgrades, chaos tests, bug reproduction, etc</li> <li>Test external DNS services from within the cluster.</li> </ul> </li> <li> <p>For more detailed information about the NetDns CRD, refer to NetDns</p> </li> <li> <p>Features:</p> <ul> <li>Support testing DNS servers both inside and outside the cluster</li> <li>Supports typeA and typeAAAA records</li> <li>Supports UDP, TCP, and TCP-TLS protocols</li> </ul> </li> </ol>"},{"location":"usage/netdns/#steps","title":"Steps","text":"<p>The following example demonstrates how to use <code>NetDNS</code>.</p>"},{"location":"usage/netdns/#install-kdoctor","title":"Install kdoctor","text":"<p>Follow the installation guide to install kdoctor.</p>"},{"location":"usage/netdns/#install-test-server-optional","title":"Install Test Server (Optional)","text":"<p>The official kdoctor repository includes an application called \"server\" that contains an HTTP server, HTTPS server, and DNS server. This server can be employed to test the functionality of kdoctor. If you have other test servers available, you can skip this installation step.</p> <pre><code>helm repo add kdoctor https://kdoctor-io.github.io/kdoctor\nhelm repo update kdoctor\nhelm install server kdoctor/server -n kdoctor-test-server --wait --debug --create-namespace \n</code></pre> <p>Check the status of test server</p> <pre><code>kubectl get pod -n kdoctor -owide\nNAME                                READY   STATUS    RESTARTS   AGE   IP            NODE                    NOMINATED NODE   READINESS GATES\nserver-7649566ff9-dv4jc   1/1     Running   0          76s   172.40.1.45   kdoctor-worker          &lt;none&gt;           &lt;none&gt;\nserver-7649566ff9-qc5dh   1/1     Running   0          76s   172.40.0.35   kdoctor-control-plane   &lt;none&gt;           &lt;none&gt;\n</code></pre> <p>Obtain the service address of the test server</p> <pre><code>kubectl get service -n kdoctor \nNAME               TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)                                AGE\nserver   ClusterIP   172.41.71.0   &lt;none&gt;        80/TCP,443/TCP,53/UDP,53/TCP,853/TCP   2m31s\n</code></pre>"},{"location":"usage/netdns/#create-netdns","title":"Create NetDns","text":"<p>Create <code>NetDns</code> object that will execute a 10-second continuous task. The task will send UDP requests to the cluster's internal DNS server at a rate of 10 QPS. It will request the typeA records whose domain name is <code>kubernetes.default.svc.cluster.local</code>.</p> <pre><code>cat &lt;&lt;EOF | kubectl apply -f -\napiVersion: kdoctor.io/v1beta1\nkind: Netdns\nmetadata:\n  name: netdns-cluster\nspec:\n  expect:\n    meanAccessDelayInMs: 1500\n    successRate: 1\n  request:\n    domain: kubernetes.default.svc.cluster.local\n    durationInSecond: 10\n    perRequestTimeoutInMS: 1000\n    protocol: udp\n    qps: 10\n  schedule:\n    roundNumber: 1\n    roundTimeoutMinute: 1\n    schedule: 0 1\n  target:\n    targetDns:\n      serviceName: kube-dns\n      serviceNamespace: kube-system\n      testIPv4: true\nEOF\n</code></pre>"},{"location":"usage/netdns/#check-task-status","title":"Check Task Status","text":"<p>After completing a round of tasks, you can use the kdoctor aggregate API to view the report for the current round. When the FINISH field is set to true, it indicates that all tasks have been completed, and you can access the overall report.</p> <pre><code>kubectl get netdns\nNAME             FINISH   EXPECTEDROUND   DONEROUND   LASTROUNDSTATUS   SCHEDULE\nnetdns-cluster   true     1               1           succeed           0 1\n</code></pre> <ul> <li>FINISH: indicate whether the task has been completed</li> <li>EXPECTEDROUND: number of expected task rounds</li> <li>DONEROUND: number of completed task rounds</li> <li>LASTROUNDSTATUS: execution status of the last round of tasks</li> <li>SCHEDULE: schedule rules for the task</li> </ul>"},{"location":"usage/netdns/#view-task-reports","title":"View Task Reports","text":"<ol> <li> <p>View existed reports</p> <p><code>shell kubectl get kdoctorreport NAME             CREATED AT netdns-cluster   0001-01-01T00:00:00Z</code></p> </li> <li> <p>View specific task reports</p> <p>The reports are aggregated from the agents running on both the kdoctor-control-plane node and the kdoctor-worker nodes after performing two rounds of stress testing respectively.</p> <p><code>shell root@kdoctor-control-plane:/# kubectl get kdoctorreport netdns-cluster -oyaml apiVersion: system.kdoctor.io/v1beta1 kind: KdoctorReport metadata:   creationTimestamp: null   name: netdns-cluster spec:   FailedRoundNumber: null   FinishedRoundNumber: 1   Report:   - NodeName: kdoctor-control-plane     PodName: kdoctor-agent-ntp9l     ReportType: agent test report     RoundDuration: 11.025723086s     RoundNumber: 1     RoundResult: succeed     StartTimeStamp: \"2023-08-01T09:09:39Z\"     EndTimeStamp: \"2023-08-01T09:09:50Z\"     TaskName: netdns.netdns-cluster     TaskType: Netdns     netDNSTask:       detail:       - FailureReason: null         MeanDelay: 0.2970297         Metrics:           DNSMethod: udp           DNSServer: 172.41.0.10:53           Duration: 11.002666395s           EndTime: \"2023-08-01T09:09:50Z\"           Errors: {}           FailedCounts: 0           Latencies:             MaxInMs: 0             MeanInMs: 0.2970297             MinInMs: 0             P50InMs: 0             P90InMs: 0             P95InMs: 0             P99InMs: 0           ReplyCode:             NOERROR: 101           RequestCounts: 101           StartTime: \"2023-08-01T09:09:39Z\"           SuccessCounts: 101           TPS: 9.179593052634765           TargetDomain: kubernetes.default.svc.cluster.local.         Succeed: true         SucceedRate: 1         TargetName: typeA_172.41.0.10:53_kubernetes.default.svc.cluster.local         TargetProtocol: udp         TargetServer: 172.41.0.10:53       succeed: true       targetNumber: 1       targetType: kdoctor agent       MaxCPU: 30.651%       MaxMemory: 97.00MB     netDNSTaskSpec:       ...   - NodeName: kdoctor-worker     PodName: kdoctor-agent-krrnp     ReportType: agent test report     RoundDuration: 10.024533428s     RoundNumber: 1     RoundResult: succeed     StartTimeStamp: \"2023-08-01T09:09:39Z\"     EndTimeStamp: \"2023-08-01T09:09:49Z\"     TaskName: netdns.netdns-cluster     TaskType: Netdns     netDNSTask:       detail:       - FailureReason: null         MeanDelay: 0.58         Metrics:           ...         Succeed: true         SucceedRate: 1         TargetName: typeA_172.41.0.10:53_kubernetes.default.svc.cluster.local         TargetProtocol: udp         TargetServer: 172.41.0.10:53       succeed: true       targetNumber: 1       targetType: kdoctor agent       MaxCPU: 30.651%       MaxMemory: 97.00MB     netDNSTaskSpec:       ...   ReportRoundNumber: 1   RoundNumber: 1   Status: Finished   TaskName: netdns-cluster   TaskType: Netdns</code></p> </li> </ol> <p>If the reports do not align with the expected results, check the MaxCPU and MaxMemory fields in the report to verify if there are available resources of the agents and adjust the resource limits for the agents accordingly.</p>"},{"location":"usage/netdns/#test-an-external-dns-server","title":"Test an External DNS Server","text":"<p>Below are examples of HTTP and HTTPS requests with body:</p> <ol> <li> <p>Create <code>NetDns</code> object that will execute a 10-second continuous task. The task will send UDP requests to the cluster's internal DNS server at a rate of 10 QPS. It will request the typeA records whose domain name is <code>kubernetes.default.svc.cluster.local</code>.</p> <p>We are using the service address of the test server. If you have a different server address available, feel free to use it instead.</p> <p>Create <code>NetDns</code></p> <p><code>shell SERVER=\"172.41.71.0\" apiVersion: kdoctor.io/v1beta1 kind: Netdns metadata:   name: netdns- user spec:   expect:     meanAccessDelayInMs: 1500     successRate: 1   request:     domain: kubernetes.default.svc.cluster.local     durationInSecond: 10     perRequestTimeoutInMS: 1000     protocol: udp     qps: 10   schedule:     roundNumber: 1     roundTimeoutMinute: 1     schedule: 0 1   target:     targetUser:       port: 53       server: ${SERVER} EOF</code></p> </li> </ol>"},{"location":"usage/netdns/#environment-cleanup","title":"Environment Cleanup","text":"<pre><code>kubectl delete netdns netdns-cluster netdns- user\n</code></pre>"},{"location":"usage/netreach-zh_CN/","title":"NetReach","text":"<p>English | \u7b80\u4f53\u4e2d\u6587</p>"},{"location":"usage/netreach-zh_CN/#_1","title":"\u4ecb\u7ecd","text":"<p>\u5bf9\u4e8e\u8fd9\u79cd\u4efb\u52a1\uff0ckdoctor-controller \u4f1a\u6839\u636e agentSpec \u751f\u6210\u5bf9\u5e94\u7684 agent \u7b49\u8d44\u6e90\uff0c\u6bcf\u4e00\u4e2a agent Pod \u90fd\u4f1a\u4ee5\u4e00\u5b9a\u7684\u538b\u529b\u76f8\u4e92\u53d1\u9001http \u8bf7\u6c42\uff0c\u8bf7\u6c42\u5730\u5740\u4e3a\u6bcf\u4e00\u4e2a agent \u7684 Pod ip \u3001service ip\u3001ingress ip \u7b49\u7b49\uff0c\u5e76\u83b7\u5f97\u6210\u529f\u7387\u548c\u5e73\u5747\u5ef6\u8fdf\u3002\u6839\u636e\u6210\u529f\u6761\u4ef6\u6765\u5224\u65ad\u7ed3\u679c\u662f\u5426\u6210\u529f\u3002\u5e76\u4e14\uff0c\u53ef\u4ee5\u901a\u8fc7\u805a\u5408 API \u83b7\u53d6\u8be6\u7ec6\u7684\u62a5\u544a\u3002</p> <ol> <li> <p>\u5e94\u7528\u573a\u666f\uff1a</p> <ul> <li>\u6bcf 1min \u5fc3\u8df3\uff0c\u76d1\u63a7\u96c6\u7fa4\u5185\u6bcf\u4e2a\u89d2\u843d\u7684\u8fde\u901a\u6027</li> <li>\u5927\u89c4\u6a21\u96c6\u7fa4\u90e8\u7f72\u540e\uff0c\u5de1\u68c0\u96c6\u7fa4\u6bcf\u4e2a\u89d2\u843d\u7684\u8fde\u901a\u6027</li> <li>\u7ed9\u96c6\u7fa4\u6240\u6709\u89d2\u843d\u3001\u6bcf\u79cd\u901a\u4fe1\u65b9\u5f0f\u6ce8\u5165\u6d41\u91cf\uff0c\u914d\u5408 bug \u590d\u73b0\u7b49\u573a\u666f</li> <li>\u751f\u4ea7\u6216 E2E \u73af\u5883\u4e0b\uff0c\u5de1\u68c0 CNI\u3001Loadbalancer\u3001kube-proxy\u3001Ingress\u3001Multus \u7b49\u7ec4\u4ef6\u7684\u5f02\u5e38\u3002</li> </ul> </li> <li> <p>\u5173\u4e8e NetReach CRD \u7684\u66f4\u591a\u63cf\u8ff0\uff0c\u53ef\u53c2\u8003NetReach</p> </li> <li> <p>\u529f\u80fd\u5217\u8868:</p> <p>\u652f\u6301 ClusterIP\u3001Endpoint\u3001Ingress\u3001NodePort\u3001LoadBalancer\u3001Multus \u591a\u7f51\u5361\u3001IPv4 IPv6</p> </li> </ol>"},{"location":"usage/netreach-zh_CN/#_2","title":"\u4f7f\u7528\u6b65\u9aa4","text":"<p>\u63a5\u4e0b\u6765\u5c06\u5c55\u793a <code>NetReach</code> \u7684\u4f7f\u7528\u793a\u4f8b</p>"},{"location":"usage/netreach-zh_CN/#kdoctor","title":"\u5b89\u88c5 kdoctor","text":"<p>\u53c2\u7167\u5b89\u88c5\u6559\u7a0b\u5b89\u88c5 kdoctor</p>"},{"location":"usage/netreach-zh_CN/#netreach_1","title":"\u521b\u5efa NetReach","text":"<p>\u521b\u5efa <code>NetReach</code> \uff0c\u8be5\u4efb\u52a1\u5c06\u6267\u884c\u4e00\u8f6e\u6301\u7eed 10s \u7684\u4efb\u52a1\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684 agent \u4f1a\u76f8\u4e92\u4f7f\u7528 http \u534f\u8bae\u8bbf\u95ee ClusterIP\u3001Endpoint\u3001Ingress\u3001NodePort\u3001LoadBalancer \u7684 IPv4 \u5730\u5740\uff0c\u5e76\u7acb\u5373\u6267\u884c\u3002</p> <pre><code>cat &lt;&lt;EOF | kubectl apply -f -\napiVersion: kdoctor.io/v1beta1\nkind: NetReach\nmetadata:\n  name: task\nspec:\n  expect:\n    meanAccessDelayInMs: 1500\n    successRate: 1\n  request:\n    durationInSecond: 10\n    perRequestTimeoutInMS: 1000\n    qps: 10\n  schedule:\n    roundNumber: 1\n    roundTimeoutMinute: 1\n    schedule: 0 1\n  target:\n    clusterIP: true\n    endpoint: true\n    ingress: true\n    ipv4: true\n    loadBalancer: true\n    multusInterface: false\n    nodePort: true\nEOF\n</code></pre>"},{"location":"usage/netreach-zh_CN/#_3","title":"\u67e5\u770b\u4efb\u52a1\u72b6\u6001","text":"<p>\u5f53\u6267\u884c\u5b8c\u6210\u4e00\u8f6e\u540e\u5c31\u53ef\u4ee5\u4f7f\u7528 kdoctor \u805a\u5408 api \u67e5\u770b\u5f53\u524d\u8f6e\u7684\u62a5\u544a\uff0c\u5f53 FINISH \u4e3a true \u65f6\u4efb\u52a1\u5168\u90e8\u5b8c\u6210\uff0c\u53ef\u67e5\u770b\u6574\u4f53\u62a5\u544a</p> <pre><code>kubectl get netreach\nNAME   FINISH   EXPECTEDROUND   DONEROUND   LASTROUNDSTATUS   SCHEDULE\ntask   true     1               1           succeed           0 1\n</code></pre> <ul> <li>FINISH\uff1a\u4efb\u52a1\u662f\u5426\u5b8c\u6210</li> <li>EXPECTEDROUND\uff1a\u5e0c\u671b\u4efb\u52a1\u6267\u884c\u8f6e\u6570</li> <li>DONEROUND\uff1a\u5f53\u524d\u6267\u884c\u5b8c\u6210\u8f6e\u6570</li> <li>LASTROUNDSTATUS\uff1a\u6700\u540e\u4e00\u8f6e\u4efb\u52a1\u6267\u884c\u60c5\u51b5</li> <li>SCHEDULE\uff1a\u4efb\u52a1\u7684\u8c03\u5ea6\u89c4\u5219</li> </ul>"},{"location":"usage/netreach-zh_CN/#_4","title":"\u67e5\u770b\u4efb\u52a1\u62a5\u544a","text":"<ol> <li> <p>\u67e5\u770b\u5df2\u6709\u62a5\u544a</p> <p><code>shell kubectl get kdoctorreport NAME   CREATED AT task   0001-01-01T00:00:00Z</code></p> </li> <li> <p>\u67e5\u770b\u5177\u4f53\u4efb\u52a1\u62a5\u544a</p> <p>\u8282\u70b9 kdoctor-control-plane \u548c\u8282\u70b9 kdoctor-worker \u4e0a agent \u5206\u522b\u90fd\u6267\u884c\u4e00\u8f6e\u4e92\u76f8\u53d1\u538b\u540e\uff0c\u5c06 agent \u62a5\u544a\u805a\u5408\u800c\u6210\u3002</p> <p><code>shell root@kdoctor-control-plane:/# kubectl get kdoctorreport task -oyaml apiVersion: system.kdoctor.io/v1beta1 kind: KdoctorReport metadata:   creationTimestamp: null   name: task spec:   FailedRoundNumber: null   FinishedRoundNumber: 1   Report:   - NodeName: kdoctor-control-plane     NetReachTask:       Detail:       - TargetName: AgentLoadbalancerV4IP_172.18.0.51:80         Metrics:           Duration: 10.032286878s           EndTime: \"2023-08-01T08:37:06Z\"           Errors: {}           Latencies:             MaxInMs: 0             MeanInMs: 23.08             MinInMs: 0             P50InMs: 0             P90InMs: 0             P95InMs: 0             P99InMs: 0           RequestCounts: 100           StartTime: \"2023-08-01T08:36:56Z\"           StatusCodes:             \"200\": 100           SuccessCounts: 100           TPS: 9.967817030760152           TotalDataSize: 36968 byte         Succeed: true         SucceedRate: 1         TargetMethod: GET         TargetUrl: http://172.18.0.51:80         MeanDelay: 23.08       - TargetName: AgentNodePortV4IP_172.18.0.3_32713         Metrics:           ...         Succeed: true         SucceedRate: 1         TargetMethod: GET         TargetUrl: http://172.18.0.3:32713         MeanDelay: 68.42       - TargetName: AgentPodV4IP_kdoctor-agent-ntp9l_172.40.0.6         Metrics:           ...         Succeed: true         SucceedRate: 1         TargetMethod: GET         TargetUrl: http://172.40.0.6:80         MeanDelay: 44.049503       - TargetName: AgentClusterV4IP_172.41.249.6:80         Metrics:           ...         Succeed: true         SucceedRate: 1         TargetMethod: GET         TargetUrl: http://172.41.249.6:80         MeanDelay: 26.307692       - TargetName: AgentPodV4IP_kdoctor-agent-krrnp_172.40.1.5         Metrics:           ...         Succeed: true         SucceedRate: 1         TargetMethod: GET         TargetUrl: http://172.40.1.5:80         MeanDelay: 61.564358       - TargetName: AgentIngress_http://172.18.0.50/kdoctoragent         Metrics:           ...         Succeed: true         SucceedRate: 1         TargetMethod: GET         TargetUrl: http://172.18.0.50/kdoctoragent         MeanDelay: 65.47059       Succeed: true       TargetNumber: 6       TargetType: NetReach       MaxCPU: 26.203%       MaxMemory: 101.00MB     NetReachTaskSpec:     ...     PodName: kdoctor-agent-ntp9l     ReportType: agent test report     RoundDuration: 11.178657432s     RoundNumber: 1     RoundResult: succeed     StartTimeStamp: \"2023-08-01T08:36:56Z\"     EndTimeStamp: \"2023-08-01T08:37:07Z\"     TaskName: netreach.task     TaskType: NetReach   - NodeName: kdoctor-worker     NetReachTask:       Detail:       - TargetName: AgentClusterV4IP_172.41.249.6:80         Metrics:           ...         Succeed: true         SucceedRate: 1         TargetMethod: GET         TargetUrl: http://172.41.249.6:80         MeanDelay: 47.25       - TargetName: AgentNodePortV4IP_172.18.0.2_32713         Metrics:           ...         Succeed: true         SucceedRate: 1         TargetMethod: GET         TargetUrl: http://172.18.0.2:32713         MeanDelay: 13.480392       - TargetName: AgentPodV4IP_kdoctor-agent-krrnp_172.40.1.5         Metrics:           ...         Succeed: true         SucceedRate: 1         TargetMethod: GET         TargetUrl: http://172.40.1.5:80         MeanDelay: 39.637257       - TargetName: AgentPodV4IP_kdoctor-agent-ntp9l_172.40.0.6         Metrics:           ...         Succeed: true         SucceedRate: 1         TargetMethod: GET         TargetUrl: http://172.40.0.6:80         MeanDelay: 51.38614       - TargetName: AgentLoadbalancerV4IP_172.18.0.51:80         Metrics:           ...         Succeed: true         SucceedRate: 1         TargetMethod: GET         TargetUrl: http://172.18.0.51:80         MeanDelay: 41.735847         - TargetName: AgentIngress_http://172.18.0.50/kdoctoragent         Metrics:           ...         Succeed: true         SucceedRate: 1         TargetMethod: GET         TargetUrl: http://172.18.0.50/kdoctoragent         MeanDelay: 60.463634       Succeed: true       TargetNumber: 6       TargetType: NetReach       MaxCPU: 30.651%       MaxMemory: 97.00MB     NetReachTaskSpec:     ...     PodName: kdoctor-agent-krrnp     ReportType: agent test report     RoundDuration: 11.180813761s     RoundNumber: 1     RoundResult: succeed     StartTimeStamp: \"2023-08-01T08:36:56Z\"     EndTimeStamp: \"2023-08-01T08:37:07Z\"     TaskName: netreach.task     TaskType: NetReach   ReportRoundNumber: 1   RoundNumber: 1   Status: Finished   TaskName: task   TaskType: NetReach</code></p> </li> </ol> <p>\u82e5\u62a5\u544a\u4e0e\u9884\u671f\u7ed3\u679c\u4e0d\u7b26\u5408\uff0c\u53ef\u5173\u6ce8\u62a5\u544a\u4e2d\u7684 MaxCPU \u548c MaxMemory \u5b57\u6bb5\uff0c\u5bf9\u6bd4 agent \u8d44\u6e90\u662f\u5426\u5145\u8db3\uff0c\u8c03\u6574 agent \u7684\u8d44\u6e90\u9650\u5236\u3002</p>"},{"location":"usage/netreach-zh_CN/#_5","title":"\u73af\u5883\u6e05\u7406","text":"<pre><code>kubectl delete netreach task\n</code></pre>"},{"location":"usage/netreach/","title":"Nethttp","text":"<p>\u7b80\u4f53\u4e2d\u6587 | English</p>"},{"location":"usage/netreach/#introduction","title":"Introduction","text":"<p>kdoctor-controller creates the necessary resources, including agent, based on the agentSpec. Each agent Pod sends HTTP requests to each other with a certain level of stress. These requests target various addresses such as Pod IP, service IP, ingress IP, and more. The success rate and average latency are measured, and the results are evaluated based on predefined success criteria. Detailed reports can be obtained using the aggregate API.</p> <ol> <li> <p>Use cases:</p> <ul> <li>Monitor connectivity in every corner of the cluster with a 1-minute heartbeat interval.</li> <li>Perform connectivity inspections across all corners of the cluster after deploying at scale</li> <li>Inject traffic to all corners of the cluster using different communication methods for scenarios like bug reproduction</li> <li>Inspect anomalies in components such as CNI, LoadBalancer, kube-proxy, Ingress, Multus, etc., in production or E2E environments.</li> </ul> </li> <li> <p>For more information on NetReach CRD, refer toNetReach</p> </li> <li> <p>Features:</p> <p>Support ClusterIP, Endpoint, Ingress, NodePort, LoadBalancer, Multus with multiple network interfaces, IPv4, and IPv6.</p> </li> </ol>"},{"location":"usage/netreach/#steps","title":"Steps","text":"<p>The following example demonstrates how to use <code>NetReach</code>.</p>"},{"location":"usage/netreach/#install-kdoctor","title":"Install kdoctor","text":"<p>Follow the installation guide to install kdoctor.</p>"},{"location":"usage/netreach/#create-netreach","title":"Create NetReach","text":"<p>Create <code>NetReach</code> object that will execute a 10-second continuous task. Each agent on the nodes will use the HTTP protocol to access the IPv4 addresses of ClusterIP, Endpoint, Ingress, NodePort, and LoadBalancer immediately.</p> <pre><code>cat &lt;&lt;EOF | kubectl apply -f -\napiVersion: kdoctor.io/v1beta1\nkind: NetReach\nmetadata:\n  name: task\nspec:\n  expect:\n    meanAccessDelayInMs: 1500\n    successRate: 1\n  request:\n    durationInSecond: 10\n    perRequestTimeoutInMS: 1000\n    qps: 10\n  schedule:\n    roundNumber: 1\n    roundTimeoutMinute: 1\n    schedule: 0 1\n  target:\n    clusterIP: true\n    endpoint: true\n    ingress: true\n    ipv4: true\n    loadBalancer: true\n    multusInterface: false\n    nodePort: true\nEOF\n</code></pre>"},{"location":"usage/netreach/#check-task-status","title":"Check Task Status","text":"<p>After completing a round of tasks, you can use the kdoctor aggregate API to view the report for the current round. When FINISH is true, it indicates that all tasks have been completed, and you can view the overall report.</p> <pre><code>kubectl get netreach\nNAME   FINISH   EXPECTEDROUND   DONEROUND   LASTROUNDSTATUS   SCHEDULE\ntask   true     1               1           succeed           0 1\n</code></pre> <ul> <li>FINISH: indicate whether the task has been completed</li> <li>EXPECTEDROUND: number of expected task rounds</li> <li>DONEROUND: number of completed task rounds</li> <li>LASTROUNDSTATUS: execution status of the last round of tasks</li> <li>SCHEDULE: schedule rules for the task</li> </ul>"},{"location":"usage/netreach/#view-task-reports","title":"View Task Reports","text":"<ol> <li> <p>View existed reports</p> <p><code>shell kubectl get kdoctorreport NAME   CREATED AT task   0001-01-01T00:00:00Z</code></p> </li> <li> <p>View specific task reports</p> </li> </ol> <p>The reports are aggregated from the agents running on both the kdoctor-control-plane node and the kdoctor-worker nodes after performing two rounds of stress testing respectively.</p> <pre><code>```shell\nroot@kdoctor-control-plane:/# kubectl get kdoctorreport task -oyaml\napiVersion: system.kdoctor.io/v1beta1\nkind: KdoctorReport\nmetadata:\n  creationTimestamp: null\n  name: task\nspec:\n  FailedRoundNumber: null\n  FinishedRoundNumber: 1\n  Report:\n  - NodeName: kdoctor-control-plane\n    NetReachTask:\n      Detail:\n      - TargetName: AgentLoadbalancerV4IP_172.18.0.51:80\n        Metrics:\n          Duration: 10.032286878s\n          EndTime: \"2023-08-01T08:37:06Z\"\n          Errors: {}\n          Latencies:\n            MaxInMs: 0\n            MeanInMs: 23.08\n            MinInMs: 0\n            P50InMs: 0\n            P90InMs: 0\n            P95InMs: 0\n            P99InMs: 0\n          RequestCounts: 100\n          StartTime: \"2023-08-01T08:36:56Z\"\n          StatusCodes:\n            \"200\": 100\n          SuccessCounts: 100\n          TPS: 9.967817030760152\n          TotalDataSize: 36968 byte\n        Succeed: true\n        SucceedRate: 1\n        TargetMethod: GET\n        TargetUrl: http://172.18.0.51:80\n        MeanDelay: 23.08\n      - TargetName: AgentNodePortV4IP_172.18.0.3_32713\n        Metrics:\n          ...\n        Succeed: true\n        SucceedRate: 1\n        TargetMethod: GET\n        TargetUrl: http://172.18.0.3:32713\n        MeanDelay: 68.42\n      - TargetName: AgentPodV4IP_kdoctor-agent-ntp9l_172.40.0.6\n        Metrics:\n          ...\n        Succeed: true\n        SucceedRate: 1\n        TargetMethod: GET\n        TargetUrl: http://172.40.0.6:80\n        MeanDelay: 44.049503\n      - TargetName: AgentClusterV4IP_172.41.249.6:80\n        Metrics:\n          ...\n        Succeed: true\n        SucceedRate: 1\n        TargetMethod: GET\n        TargetUrl: http://172.41.249.6:80\n        MeanDelay: 26.307692\n      - TargetName: AgentPodV4IP_kdoctor-agent-krrnp_172.40.1.5\n        Metrics:\n          ...\n        Succeed: true\n        SucceedRate: 1\n        TargetMethod: GET\n        TargetUrl: http://172.40.1.5:80\n        MeanDelay: 61.564358\n      - TargetName: AgentIngress_http://172.18.0.50/kdoctoragent\n        Metrics:\n          ...\n        Succeed: true\n        SucceedRate: 1\n        TargetMethod: GET\n        TargetUrl: http://172.18.0.50/kdoctoragent\n        MeanDelay: 65.47059\n      Succeed: true\n      TargetNumber: 6\n      TargetType: NetReach\n      MaxCPU: 26.203%\n      MaxMemory: 101.00MB\n    NetReachTaskSpec:\n    ...\n    PodName: kdoctor-agent-ntp9l\n    ReportType: agent test report\n    RoundDuration: 11.178657432s\n    RoundNumber: 1\n    RoundResult: succeed\n    StartTimeStamp: \"2023-08-01T08:36:56Z\"\n    EndTimeStamp: \"2023-08-01T08:37:07Z\"\n    TaskName: netreach.task\n    TaskType: NetReach\n  - NodeName: kdoctor-worker\n    NetReachTask:\n      Detail:\n      - TargetName: AgentClusterV4IP_172.41.249.6:80\n        Metrics:\n          ...\n        Succeed: true\n        SucceedRate: 1\n        TargetMethod: GET\n        TargetUrl: http://172.41.249.6:80\n        MeanDelay: 47.25\n      - TargetName: AgentNodePortV4IP_172.18.0.2_32713\n        Metrics:\n          ...\n        Succeed: true\n        SucceedRate: 1\n        TargetMethod: GET\n        TargetUrl: http://172.18.0.2:32713\n        MeanDelay: 13.480392\n      - TargetName: AgentPodV4IP_kdoctor-agent-krrnp_172.40.1.5\n        Metrics:\n          ...\n        Succeed: true\n        SucceedRate: 1\n        TargetMethod: GET\n        TargetUrl: http://172.40.1.5:80\n        MeanDelay: 39.637257\n      - TargetName: AgentPodV4IP_kdoctor-agent-ntp9l_172.40.0.6\n        Metrics:\n          ...\n        Succeed: true\n        SucceedRate: 1\n        TargetMethod: GET\n        TargetUrl: http://172.40.0.6:80\n        MeanDelay: 51.38614\n      - TargetName: AgentLoadbalancerV4IP_172.18.0.51:80\n        Metrics:\n          ...\n        Succeed: true\n        SucceedRate: 1\n        TargetMethod: GET\n        TargetUrl: http://172.18.0.51:80\n        MeanDelay: 41.735847\n        - TargetName: AgentIngress_http://172.18.0.50/kdoctoragent\n        Metrics:\n          ...\n        Succeed: true\n        SucceedRate: 1\n        TargetMethod: GET\n        TargetUrl: http://172.18.0.50/kdoctoragent\n        MeanDelay: 60.463634\n      Succeed: true\n      TargetNumber: 6\n      TargetType: NetReach\n      MaxCPU: 30.651%\n      MaxMemory: 97.00MB\n    NetReachTaskSpec:\n    ...\n    PodName: kdoctor-agent-krrnp\n    ReportType: agent test report\n    RoundDuration: 11.180813761s\n    RoundNumber: 1\n    RoundResult: succeed\n    StartTimeStamp: \"2023-08-01T08:36:56Z\"\n    EndTimeStamp: \"2023-08-01T08:37:07Z\"\n    TaskName: netreach.task\n    TaskType: NetReach\n  ReportRoundNumber: 1\n  RoundNumber: 1\n  Status: Finished\n  TaskName: task\n  TaskType: NetReach\n```\n</code></pre> <p>If the reports do not align with the expected results, check the MaxCPU and MaxMemory fields in the report to verify if there are available resources of the agents and adjust the resource limits for the agents accordingly.</p>"},{"location":"usage/netreach/#environment-cleanup","title":"Environment Cleanup","text":"<pre><code>kubectl delete netreach task\n</code></pre>"},{"location":"usage/performance/","title":"Performance","text":""},{"location":"usage/performance/#environment","title":"Environment","text":"<ul> <li>Kubenetes: <code>v1.25.4</code></li> <li>Container runtime: <code>containerd 1.6.12</code></li> <li>OS: <code>CentOS Linux 8</code></li> <li>Kernel: <code>4.18.0-348.7.1.el8_5.x86_64</code></li> </ul> Node Role CPU Memory master1 control-plane 4C 8Gi master2 control-plane 4C 8Gi master3 control-plane 4C 8Gi worker4 3C 8Gi worker5 3C 8Gi worker6 3C 8Gi worker7 3C 8Gi worker8 3C 8Gi worker9 3C 8Gi worker10 3C 8Gi"},{"location":"usage/performance/#nethttp","title":"Nethttp","text":"<p>The test is conducted in a pod with a CPU of 1 core.</p> <p>The test server is a server that sleeps for one second and then returns.</p>"},{"location":"usage/performance/#http11","title":"Http1.1","text":"Client Time Requests QPS Memory kdoctor 0.5m 89660 2988.67 210Mb ab 0.5m 76700 2599.31 60Mb wrk 0.5m 86105 2867.67 50Mb hey 0.5m 58423 1947.42 210Mb Client Time Requests QPS Memory kdoctor 1m 179634 2993.9 210Mb ab 1m 153875 2564.59 60Mb wrk 1m 176966 2945.69 50Mb hey 1m 118452 1974.2 220Mb Client Time Requests QPS Memory kdoctor 5m 897979 2993.26 210Mb ab 5m 763983 2546.61 60Mb wrk 5m 895324 2983.71 50Mb hey 5m 596077 1986.92 270Mb"},{"location":"usage/performance/#http2","title":"Http2","text":"Client Time Requests QPS Memory kdoctor 0.5m 238787 7959.57 350Mb hey 0.5m 7213 240.44 110Mb Client Time Requests QPS Memory kdoctor 1m 481070 8017.83 370Mb hey 1m 14665 244.42 120Mb Client Time Requests QPS Memory kdoctor 5m 2419874 8066.25 390Mb hey 5m 74776 249.25 130Mb"},{"location":"usage/performance/#netdns","title":"Netdns","text":"<p>The test is conducted in a Pod with a CPU of 1 core.</p> Client Time Requests QPS Memory kdoctor 1m 1855511 30925.18 23Mb dnsperf 1m 1728086 28800.40 8Mb Client Time Requests QPS Memory kdoctor 5m 9171699 30572.33 100Mb dnsperf 5m 8811137 29370.34 8Mb Client Time Requests QPS Memory kdoctor 10m 18561282 30935.47 173Mb dnsperf 10m 17260779 28767.66 8Mb"}]}